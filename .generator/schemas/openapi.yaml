openapi: 3.0.1
info:
  title: KubeBlocks Cloud API
  version: 1.0.0
  description: |
    ***KubeBlocks Cloud API*** is a RESTful API for managing KubeBlocks Cloud resources.

    The API is organized around REST.

    Our API has predictable resource-oriented URLs, accepts `JSON-encoded` request bodies, returns `JSON-encoded` responses, and uses standard HTTP response codes, authentication, and verbs.

    We use standard HTTP authentication and provide API keys to identify who you are. Your API keys carry many privileges, so be sure to keep them secret! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth.
  contact:
    email: support@apecloud.com
    name: ApeCloud Support
    url: https://www.apecloud.com
servers:
  - url: http://127.0.0.1:8080
    description: local
  - url: https://api-dev.apecloud.cn
    description: dev
  - url: https://cloudapi.apecloud.cn
    description: demo
security:
  - BearerToken: []
tags:
  - name: user
    description: User APIs
  - name: role
    description: Role Management APIs
  - name: environment
    description: Environment APIs
  - name: benchmark
    description: Benchmark APIs
  - name: cluster
    description: Cluster APIs
  - name: clusterLog
    description: Cluster Log APIs
  - name: clusterTask
    description: Cluster task APIS
  - name: account
    description: Cluster Account APIs
  - name: opsrequest
    description: Cluster Ops APIs
  - name: clusterTag
    description: Cluster Tag APIs
  - name: tls
    description: Cluster TLS APIs
  - name: ipWhitelist
    description: Cluster IP Whitelist APIs
  - name: backup
    description: Backup APIs
  - name: restore
    description: Restore APIs
  - name: backupRepo
    description: Backup Repo APIs
  - name: parameterTemplate
    description: Parameter Template APIs
  - name: engine
    description: Engine APIs
  - name: event
    description: Operation Events
  - name: dms
    description: Data Management System APIs
  - name: database
    description: Cluster Database APIs
  - name: parameter
    description: Cluster Parameter APIs
  - name: alert
    description: Alert APIs
  - name: alertReceiver
    description: Alert Receiver APIs
  - name: alertRule
    description: Alert Rule APIs
  - name: alertMetrics
    description: Alert Metrics APIs
  - name: alertStrategy
    description: Alert Strategy APIs
  - name: alertObject
    description: Alert Object APIs
  - name: clusterAlertSwitch
    description: Cluster Alert switch APIs
  - name: alertConfig
    description: Alert Config APIs
  - name: alertInhibit
    description: Alert Inhibit APIs
  - name: class
    description: Engine Class APIs
  - name: feature
    description: Feature APIs
  - name: recycleBinCluster
    description: Cluster In Recycle Bin APIs
  - name: project
    description: Project APIs
  - name: disasterRecovery
    description: Cluster Disaster Recovery APIs
  - name: llm
    description: LLM APIs
  - name: organizationParameter
    description: Organization Parameter APIs
  - name: dataReplication
    description: Data Replication APIs
  - name: import
    description: Data Import APIs
paths:
  /api/v1/user:
    get:
      description: Get authenticated login user info
      summary: Get authenticated user
      operationId: getAuthenticatedUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
    patch:
      description: partially update the specified User. If you want to update phone number, you must request /api/v1/user/phone-verification-code first.
      operationId: patchAuthenticatedUser
      summary: Update user information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
          description: OK
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
      x-codegen-request-body-name: body
  /api/v1/user/password:
    patch:
      description: Update current authenticated user password.
      summary: Update current authenticated user password
      operationId: updateAuthenticatedUserPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                new_password:
                  description: The new password for the user.
                  type: string
              required:
                - new_password
              type: object
        required: true
      responses:
        '204':
          content: {}
          description: Password updated successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - user
      x-codegen-request-body-name: body
  /api/v1/user/phone-verification-code:
    post:
      description: to update user phone number, send verification code first
      summary: Send verification code to user's phone
      operationId: phoneVerification
      requestBody:
        content:
          application/json:
            schema:
              properties:
                phoneNumber:
                  $ref: '#/components/schemas/phoneNumber'
              type: object
        required: true
      responses:
        '204':
          content: {}
          description: Verification code sent to user's phone
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - user
      x-codegen-request-body-name: body
  /api/v1/user/apikey/{keyName}:
    patch:
      description: partially update the specified apikey
      operationId: patchAPIkey
      summary: Update apikey information
      parameters:
        - description: Name of the apikey
          in: path
          name: keyName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apikeyCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikey'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
        - shared
      x-codegen-request-body-name: body
    delete:
      description: delete apikey
      summary: Delete apikey
      operationId: deleteApikey
      parameters:
        - description: Name of the Apikey
          in: path
          name: keyName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when apikey is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - user
        - shared
  /api/v1/user/apikeys:
    get:
      description: Get apikeys of the authenticated user
      summary: Get apikeys of the authenticated user
      operationId: readUserApikeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikeyList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
        - shared
    post:
      description: Create apikey of the authenticated user
      summary: Create apikey of the authenticated user
      operationId: createUserApikey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apikeyCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikeyWithSK'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - user
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations:
    get:
      description: List organizations of current user
      summary: List organizations of current user
      operationId: listOrg
      parameters:
        - description: The pagination token in the List request
          in: query
          name: pageToken
          schema:
            type: string
        - description: The pagination size in the List request.
          in: query
          name: pageSize
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userOrgList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - organization
    post:
      description: Create a new organization
      summary: Create organization
      operationId: createOrg
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - organization
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}:
    get:
      description: read the specified Org
      summary: Get organization
      operationId: readOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
        - shared
    patch:
      description: partially update the specified Org
      summary: Update organization
      operationId: patchOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
          description: OK
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
          description: Created
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
        - shared
      x-codegen-request-body-name: body
    delete:
      description: partially delete the specified org
      summary: Delete organization
      operationId: deleteOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when org is deleted successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
        - shared
  /api/v1/organizations/{orgName}/members:
    get:
      description: list members of the specified Org
      summary: List members
      operationId: listOrgMember
      parameters:
        - description: Name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMemberList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - member
        - shared
    post:
      description: Add organization with specific role
      summary: Add member
      operationId: addOrgMember
      parameters:
        - description: Name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgMemberAdd'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMember'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - member
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/members/{memberId}:
    delete:
      description: delete a Org Member
      summary: Delete member
      operationId: deleteOrgMember
      parameters:
        - description: Name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - member
        - shared
    get:
      description: read the specified OrgMember
      summary: Get member
      operationId: readOrgMember
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMember'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - member
        - shared
    patch:
      description: Only authenticated organization admins can update the member's role
      summary: Update member role
      operationId: patchOrgMember
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgMemberUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMember'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - member
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/members/{memberId}/freeze:
    post:
      description: freeze the member in org
      summary: freeze the member in org
      operationId: freezeMember
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
        - shared
  /api/v1/organizations/{orgName}/members/{memberId}/unfreeze:
    post:
      description: unfreeze the member in org
      summary: unfreeze the member in org
      operationId: unfreezeMember
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
        - shared
  /api/v1/organizations/{orgName}/permissions:
    get:
      operationId: listOrgMemberPermission
      summary: List permissions of a member
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissionList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - member
        - role
  /api/v1/organizations/{orgName}/eventfilter/{filterType}:
    get:
      description: Query available filters for event listing
      summary: Query available filters for event listing
      operationId: getEventFilter
      parameters:
        - description: The orgName
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The event filter field you want to obtain. OpenAPI do not support orgName.
          in: path
          name: filterType
          required: true
          schema:
            $ref: '#/components/schemas/eventFilterType'
        - description: The resource type you want to obtain.
          in: query
          name: resourceType
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventFilterOptionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - event
  /api/v1/organizations/{orgName}/events:
    get:
      description: List events
      summary: List events
      operationId: listOrgEvents
      parameters:
        - description: Organization Name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: Advanced query conditions, supporting all types of filterType. Such as "operatorID:333 operatorID:444"
          in: query
          name: customQuery
          schema:
            type: string
        - description: the status of the event
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/eventResultStatus'
        - description: the pageNumber of the query
          in: query
          name: pageNumber
          schema:
            type: integer
        - description: the pageSize of the query
          in: query
          name: pageSize
          schema:
            type: integer
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/sortDesc'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventList'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - event
        - shared
  /api/v1/organizations/{orgName}/events/{eventID}:
    get:
      description: Retrieves detailed information about an event based on the provided Event ID.
      summary: Query event detail by Event ID
      operationId: getOrgEvent
      parameters:
        - description: Organization Name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: Unique identifier for the event.
          in: path
          name: eventID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - event
  /api/v1/organizations/{orgName}/parameters:
    get:
      operationId: listOrgParameters
      summary: List parameters of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: the category of the parameters
          in: query
          name: category
          schema:
            type: string
        - description: the name of the parameter
          in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameterList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organizationParameter
        - shared
    post:
      operationId: batchUpdateOrgParameters
      summary: Batch update parameters of an organization
      description: Batch update parameters of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgParameterList'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameterList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organizationParameter
        - shared
  /api/v1/organizations/{orgName}/parameters/{parameterName}:
    get:
      operationId: getOrgParameter
      summary: Get a parameter of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The name of the parameter
          in: path
          name: parameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameter'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organizationParameter
        - shared
    patch:
      operationId: patchOrgParameter
      summary: Update a parameter of an organization
      description: Update a parameter of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The name of the parameter
          in: path
          name: parameterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgParameter'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameter'
          description: OK
      tags:
        - organizationParameter
        - shared
  /api/v1/organizations/{orgName}/resourceQuota:
    get:
      operationId: resourceQuotaAndUsage
      summary: Get the resource quota and usage of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgResourceQuotaAndUsage'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organizationResourceQuota
    post:
      operationId: resourceQuota
      summary: Batch update parameters of an organization
      description: Batch update parameters of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgResourceQuota'
        required: true
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organizationResourceQuota
  /api/v1/organizations/{orgName}/environments:
    get:
      operationId: listEnvironment
      description: List environments
      summary: List environments
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: engine name
          in: query
          name: engine
          schema:
            type: string
        - description: version of the engine
          in: query
          name: version
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /api/v1/organizations/{orgName}/environments/{environmentName}:
    get:
      operationId: getEnvironment
      summary: Get environment
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /api/v1/organizations/{orgName}/environments/{environmentName}/availableZones:
    get:
      tags:
        - environment
      summary: List the availability zones where the environment's nodes are located
      description: List available zones of an environment
      operationId: listEnvNodeZone
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stringList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/environments/{environmentName}/storageClasses:
    get:
      description: Provides a summary of storage class statistics, aggregated and organized by namespace.
      operationId: getStorageClassStats
      summary: Get storage class stats
      parameters:
        - description: name of the Organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/storageClassList'
          description: A successful response.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the resource does not exist.
      tags:
        - storageClass
  /api/v1/organizations/{orgName}/environments/{environmentName}/loadbalancer:
    get:
      operationId: getLoadBalancer
      summary: Get the load balancer info in the environment
      parameters:
        - description: name of the Organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loadBalancer'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - loadBalancer
      x-codegen-request-body-name: body
  /api/v1/environments/{environmentName}/loadbalancer/vipPool:
    get:
      operationId: listVIPPool
      summary: List environment VIP Pools
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vipPoolList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - vipPool
  /api/v1/environments/{environmentName}/nodeGroups:
    get:
      operationId: listNodeGroup
      summary: List environment node group
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
        - name: zones
          in: query
          description: available zone for filtering node groups
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nodeGroup'
          description: Returned when environment is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
      x-codegen-request-body-name: body
  /api/v1/environments/{environmentName}/nodes/resourceStats:
    get:
      description: Returns aggregated resource statistics for the specified environment within an organization.
      summary: Get resource statistics of nodes
      operationId: listNodesResourceStats
      parameters:
        - description: The name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeResourceStatsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - resourceStats
        - shared
  /api/v1/environments/{environmentName}/modules:
    get:
      operationId: getEnvironmentModuleInfo
      summary: Get environment module information in an environment
      parameters:
        - name: environmentName
          in: path
          required: true
          description: Environment Name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentModuleInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
  /api/v1/organizations/{orgName}/benchmark:
    get:
      tags:
        - benchmark
      operationId: listBenchmark
      summary: List benchmark tasks
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: cluster
          in: query
          description: name of the cluster
          schema:
            type: string
        - name: benchType
          in: query
          description: type of the benchmark
          schema:
            type: string
        - name: clusterID
          in: query
          description: id of the cluster
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmarkList'
    delete:
      tags:
        - benchmark
      operationId: deleteBenchmark
      summary: Delete benchmark tasks
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        description: ids of the benchmark
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteBenchOption'
        required: true
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/benchmark/{benchmarkId}:
    get:
      tags:
        - benchmark
      operationId: getBenchmark
      summary: Get benchmark task info
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: benchmarkId
          in: path
          description: id of the benchmark
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark'
  /api/v1/organizations/{orgName}/benchmark/pgbench:
    post:
      tags:
        - benchmark
      operationId: createPgbench
      summary: Create a pgbench benchmark task
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pgbench'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/benchmark/sysbench:
    post:
      tags:
        - benchmark
      operationId: createSysbench
      summary: Create a sysbench benchmark task
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sysbench'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/benchmark/tpcc:
    post:
      tags:
        - benchmark
      operationId: createTpcc
      summary: Create a tpcc benchmark task
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tpcc'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/benchmark/ycsb:
    post:
      tags:
        - benchmark
      operationId: createYcsb
      summary: Create a ycsb benchmark task
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ycsb'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/benchmark'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters:
    get:
      tags:
        - cluster
        - shared
      operationId: listCluster
      summary: List clusters in the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterDefinition
          in: query
          description: The clusterDefinition in the List request
          schema:
            type: string
        - name: environmentName
          in: query
          description: Environment Type
          schema:
            type: string
        - name: environmentType
          in: query
          description: Environment Type
          schema:
            $ref: '#/components/schemas/environmentType'
        - name: tagKey
          in: query
          description: Tag key; this parameter is deprecated, use tagKeys instead
          schema:
            type: string
        - name: tagValue
          in: query
          description: Tag value; this parameter is deprecated, use tagValues instead
          schema:
            type: string
        - name: tagKeys
          in: query
          description: A list of tags' keys
          schema:
            type: array
            items:
              type: string
        - name: tagValues
          in: query
          description: A list of tags' values corresponding to the tagKeys
          schema:
            type: array
            items:
              type: string
        - name: licenseId
          in: query
          description: license id
          schema:
            type: integer
        - name: refClusterName
          in: query
          description: list clusters referenced by this cluster
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      operationId: createCluster
      summary: Create new cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/validate:
    post:
      operationId: validateClusterCreation
      summary: Validate cluster creation
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterCreate'
        required: true
      responses:
        '204':
          content: {}
          description: Return when cluster creation is validated successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}:
    get:
      operationId: getCluster
      summary: Get cluster details
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
        - shared
    patch:
      description: Update the specified Cluster
      summary: Update cluster specified fields
      operationId: patchCluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: Returned when project is updated successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
      x-codegen-request-body-name: body
    delete:
      tags:
        - cluster
        - shared
      operationId: deleteCluster
      summary: Delete cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the KubeBlocks cluster
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: if it is true, the cluster will be deleted no matter what the termination policy is, and will not be moved to the recycle bin.
          schema:
            type: boolean
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/clustersWithDelete/{clusterID}:
    get:
      operationId: getClusterByID
      summary: Get cluster details by ID
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the KubeBlocks cluster
          in: path
          name: clusterID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/instances:
    get:
      operationId: listInstance
      summary: List cluster instances
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/instances/{instanceName}:
    delete:
      operationId: deleteInstance
      summary: Delete instance of cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the instance
          in: path
          name: instanceName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: delete instance of cluster successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/instances/{instanceName}/events:
    get:
      operationId: listInstanceEvents
      summary: List instance events
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the instance
          in: path
          name: instanceName
          required: true
          schema:
            type: string
        - description: return number of events
          in: query
          name: returnNumber
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceEventList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/workloads/{workloadName}/log:
    get:
      description: read log of the specified cluster instance
      summary: Tail cluster instance container log
      operationId: getClusterInstanceLog
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the workload
          in: path
          name: workloadName
          required: true
          schema:
            type: string
        - description: type of the workload, supported values ["Pod", "Job"], default value is Pod.
          in: query
          name: workloadType
          schema:
            type: string
        - description: Return previous terminated container logs. Defaults to false.
          in: query
          name: previous
          schema:
            type: boolean
        - description: A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
          in: query
          name: sinceSeconds
          schema:
            type: integer
        - description: If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
          in: query
          name: tailLines
          schema:
            type: integer
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/haHistory:
    get:
      operationId: describeClusterHaHistory
      summary: describe cluster HA history
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the component
          in: query
          name: componentName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haHistoryResponse'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/logs/running:
    get:
      description: Query running logs of a cluster
      summary: Query cluster running logs
      operationId: queryRunningLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/logs/slow:
    get:
      description: Query slow logs of a cluster
      summary: Query cluster slow logs
      operationId: querySlowLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        client:
                          type: string
                        command:
                          type: string
                        dbName:
                          type: string
                        executionTime:
                          type: integer
                        extra:
                          additionalProperties:
                            type: string
                          type: object
                        timestamp:
                          type: string
                        user:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/logs/audit:
    get:
      description: Query audit logs of a cluster
      summary: Query cluster audit logs
      operationId: queryAuditLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        client:
                          type: string
                        command:
                          type: string
                        dbName:
                          type: string
                        executionTime:
                          type: integer
                        extra:
                          additionalProperties:
                            type: string
                          type: object
                        timestamp:
                          type: string
                        user:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/logs/error:
    get:
      description: Query error logs of a cluster
      summary: Query cluster error logs
      operationId: queryErrorLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/logs/pod:
    get:
      description: Query pod logs of a cluster
      summary: Query cluster pod logs
      operationId: queryPodLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      deprecated: true
      description: list accounts in cluster
      summary: List cluster accounts
      operationId: listAccountsOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          schema:
            type: string
        - description: include root account
          in: query
          name: includeRoot
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - shared
      x-codegen-request-body-name: body
    post:
      description: create an account in cluster
      deprecated: true
      summary: Create cluster account
      operationId: createAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      deprecated: true
      description: delete an account in cluster
      summary: Delete cluster account
      operationId: deleteAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - shared
    patch:
      deprecated: true
      description: update an account in cluster
      summary: update cluster account
      operationId: updateAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/accounts/privileges/{accountName}:
    patch:
      deprecated: true
      description: update privileges of account
      summary: update account privileges
      operationId: updateAccountPrivilegesOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privilegeList'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/databases:
    get:
      deprecated: true
      description: list databases in cluster
      summary: List cluster databases
      operationId: listDatabasesOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/databaseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - shared
    post:
      deprecated: true
      description: create a database in cluster
      summary: Create cluster database
      operationId: createDatabaseOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/database'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when database is created successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/databases/{databaseName}:
    delete:
      deprecated: true
      description: delete a database in cluster
      summary: Delete cluster database
      operationId: deleteDatabaseOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when database is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/reconfigure:
    post:
      operationId: reconfigureCluster
      summary: Update cluster configuration
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reconfigureCreate'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/stop:
    post:
      operationId: stopCluster
      summary: Stop cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/start:
    post:
      operationId: startCluster
      summary: Start cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/restart:
    post:
      operationId: restartCluster
      summary: Restart cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsRestart'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/rebuildInstance:
    post:
      operationId: rebuildInstance
      summary: rebuild the instance
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsRebuildInstance'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/rebuildInstance/availableNodes:
    get:
      operationId: listAvailableNodes
      summary: List available nodes for rebuilding instance
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the instance to be rebuilt
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeList'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/upgrade:
    post:
      operationId: upgradeCluster
      summary: Upgrade cluster version
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsUpgrade'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/upgradeableServiceVersion:
    get:
      description: list upgraded service version of the component
      summary: list upgraded service version of the component
      operationId: ListUpgradeableServiceVersion
      parameters:
        - description: Name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: organization name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineServiceVersions'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engine
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/volume-expand:
    post:
      operationId: clusterVolumeExpand
      summary: Expand cluster volume size
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsVolumeExpand'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/vscale:
    post:
      operationId: verticalScaleCluster
      summary: Vertical scale cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsVScale'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/hscale:
    post:
      operationId: horizontalScaleCluster
      summary: Horizontal scale cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsHScale'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/promote:
    post:
      operationId: promoteCluster
      summary: Promote cluster intance to primary
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsPromote'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/expose:
    post:
      operationId: exposeCluster
      summary: Expose cluster loadbalancer endpoint
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsExpose'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/updateLicense:
    post:
      operationId: updateClusterLicense
      summary: Update the cluster license
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsLicense'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/custom-ops:
    post:
      operationId: customOps
      summary: Create custom OpsRequest
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsCustom'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/opsrequests/{opsName}/cancel:
    post:
      description: cancel a OpsRequest
      summary: Cancel OpsRequest
      operationId: cancelOps
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the OpsRequest
          in: path
          name: opsName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/volumes/io-quotas:
    post:
      tags:
        - opsrequest
        - shared
      operationId: specifyClusterIOQuotas
      summary: Specify IOPS and BPS of cluster volumes
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsIoQuotas'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsIoQuotas'
          description: Accepted
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/clustertasks/{taskId}:
    get:
      description: Get cluster task
      summary: Get cluster task
      operationId: getClusterTask
      parameters:
        - description: Organization Name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: Cluster Name
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterTask
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/clustertasks:
    get:
      operationId: listClusterTasks
      summary: List cluster tasks in console
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          schema:
            type: string
          required: true
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: You want to check the status of the task. If not passed, all selected by default
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/opsStatus'
        - description: You want to check the type of the task. If not passed, all selected by default
          in: query
          name: clusterTaskType
          schema:
            $ref: '#/components/schemas/opsType'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTaskList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - clusterTask
  /api/v1/organizations/{orgName}/clusters/{clusterName}/autohealing:
    get:
      operationId: getAutohealing
      summary: list autohealing job
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get autohealing job list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autohealingList'
      tags:
        - autohealing
        - shared
  /api/v1/organizations/{orgName}/clusterTags:
    get:
      tags:
        - clusterTag
        - shared
      operationId: getTags
      summary: Get cluster tags
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterIds
          in: query
          description: Comma-separated list of cluster IDs
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list tags successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clusterTags'
  /api/v1/organizations/{orgName}/tags/{tagId}:
    delete:
      tags:
        - clusterTag
        - shared
      description: delete cluster tag
      summary: Delete tag
      operationId: deleteTag
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - clusterTag
        - shared
      description: Update cluster tags
      operationId: updateTag
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: tagUpdate
  /api/v1/organizations/{orgName}/tags:
    get:
      tags:
        - clusterTag
        - shared
      description: List tags by organization name.
      operationId: listOrgTags
      summary: List tags by organization name
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list tags successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgTagsList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - clusterTag
        - shared
      description: create tag
      summary: Create cluster tags
      operationId: createTag
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagCreate'
        required: true
      responses:
        '201':
          description: create tag successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagCreate'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/endpoints:
    get:
      operationId: listEndpoints
      summary: List cluster endpoints
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: count of the NodePort host
          in: query
          name: nodePortHostCount
          schema:
            type: integer
            default: 3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/metrics:
    get:
      description: Query cluster metrics by specified metric name and instance name, support instant and range query
      operationId: queryClusterMetrics
      summary: Query cluster metrics
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: The promQL query string
          required: true
          schema:
            type: string
        - name: queryType
          in: query
          description: The query type in the query, if use instant, the query will return the lastest instant value, if use range, the query will return a list of values in the time range
          required: true
          schema:
            $ref: '#/components/schemas/metricsQueryType'
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterMetrics'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/instances/metrics:
    get:
      operationId: getInstacesMetrics
      summary: Get instaces metrics in cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceMetricsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tls:
    get:
      operationId: getTLSCertificate
      summary: Get cluster TLS certificate
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tlsCertList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - tls
        - shared
    post:
      operationId: tlsSwitcher
      summary: Enable or disable cluster TLS
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tlsRequest'
        description: Enable TLS or not
        required: true
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - tls
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/{engineName}/clusterBackupMethod:
    get:
      operationId: getBackupMethod
      summary: get backup method
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: engineName
          in: path
          description: engine name
          required: true
          schema:
            type: string
        - description: clusterID is required when you want to get the backup method of a existing cluster
          in: query
          name: clusterID
          schema:
            type: string
        - name: enablePITR
          in: query
          description: define whether to enable PITR (Point-In-Time Recovery). This setting is required when clusterId is not empty.
          schema:
            type: boolean
        - name: withRebuildInstance
          in: query
          description: defined whether to search for rebuilding instance.
          schema:
            type: boolean
        - name: withHScale
          in: query
          description: defined whether to search for rebuilding instance.
          schema:
            type: boolean
        - name: component
          in: query
          description: The component type is required when withRebuildInstance/withHScale is true.
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/clusterBackupMethod'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backupMethod
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/backups:
    post:
      operationId: createClusterBackup
      summary: Create backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/backupPolicy:
    get:
      operationId: getClusterBackupPolicy
      summary: Get backup policy
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: use volume snapshot to back up
          in: query
          name: useVolumeSnapshot
          schema:
            default: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupPolicy'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
        - shared
    patch:
      description: partially update the specified Backup Policy
      summary: Update backup policy
      operationId: updateBackupPolicy
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: use volume snapshot to back up
          in: query
          name: useVolumeSnapshot
          schema:
            default: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupPolicy'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupPolicy'
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - backup
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/backups:
    get:
      operationId: listBackups
      summary: List backups
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: cluster name of the Backup
          in: query
          name: clusterName
          schema:
            type: string
        - description: cluster ID of the Backup
          in: query
          name: clusterID
          schema:
            type: string
        - name: backupRepo
          in: query
          description: backup repo of the Backup
          schema:
            type: string
        - name: fetchWithDeletedCluster
          in: query
          description: defined whether to search for deleted clusters. if not set, returns all backups
          schema:
            type: boolean
        - name: withDeletedBackups
          in: query
          description: defined whether to search for deleted backups. if not set, only return backups that are not deleted
          schema:
            type: boolean
        - name: backupType
          in: query
          description: type of the backup
          schema:
            type: string
        - name: withRebuildInstance
          in: query
          description: defined whether to search for rebuilding instance.
          schema:
            type: boolean
        - name: withHScale
          in: query
          description: defined whether to search for hScale instance.
          schema:
            type: boolean
        - name: componentName
          in: query
          description: get the backups belong to the component
          schema:
            type: string
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
  /api/v1/organizations/{orgName}/backupStats:
    get:
      operationId: getBackupStats
      summary: Get backup statistics
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupStats'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
  /api/v1/organizations/{orgName}/backups/{backupId}:
    delete:
      operationId: deleteBackup
      summary: Delete backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
        - shared
    get:
      operationId: getBackup
      summary: Get backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
        - shared
  /api/v1/organizations/{orgName}/backups/{backupId}/logs:
    get:
      operationId: getBackupLog
      summary: Get backup log
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupLog'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
        - shared
  /api/v1/organizations/{orgName}/backups/{backupId}/view:
    post:
      tags:
        - backup
        - shared
      operationId: viewBackup
      summary: view backup info
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupView'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/fileEntryList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/backups/{backupId}/download:
    get:
      tags:
        - backup
        - shared
      operationId: downloadBackup
      summary: Download full backup
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      tags:
        - backup
        - shared
      operationId: downloadMultipleBackups
      summary: Download multiple backup files
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupDownload'
        required: true
      responses:
        '200':
          description: A successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/organizations/{orgName}/clustersWithDelete/restoreTimeRange:
    get:
      operationId: getRestoreTimeRange
      summary: Get cluster restore time ragne
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the KubeBlocks cluster
          in: query
          name: clusterID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/restore:
    delete:
      operationId: deleteRestoreObject
      summary: Delete restore task
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the restore
          in: query
          name: restoreName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
        - shared
    get:
      operationId: listClusterRestore
      summary: List restore tasks
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
        - shared
    post:
      operationId: doRestore
      summary: Restore current cluster or instance
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restore'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restore'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/restore/{restoreId}/logs:
    get:
      operationId: GetRestoreLog
      summary: get restore workload logs of the cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: id of the restore
          in: path
          name: restoreId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreLog'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/markClusterRestoreCompleted:
    post:
      operationId: markClusterRestoreCompleted
      summary: mark cluster to restore completed, usually used when manually repairing or recovering issues
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - markCluster
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/restore:
    post:
      operationId: restoreCluster
      summary: Restore new cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restoreCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
      x-codegen-request-body-name: body
    get:
      operationId: listRestores
      summary: List restore tasks
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      tags:
        - restore
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /api/v1/environments/{environmentName}/engines/{engineName}/serviceVersion:
    get:
      description: list the service version of the engine
      summary: list the service version of the engine
      operationId: ListServiceVersion
      parameters:
        - description: environment name
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: engine mode
          in: query
          name: engineMode
          required: true
          schema:
            type: string
        - description: component type, refer to componentDef and support NamePrefix
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineServiceVersions'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
        - shared
  /api/v1/organizations/{orgName}/backupRepo:
    get:
      operationId: listBackupRepos
      summary: List backup repos
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepoList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
  /api/v1/environments/{environmentName}/backupRepo/{backupRepoName}:
    get:
      operationId: getBackupRepo
      summary: Get backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the BackupRepo
          in: path
          name: backupRepoName
          required: true
          schema:
            type: string
        - description: name of the organization
          in: query
          name: orgName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepo'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backupRepo
  /api/v1/organizations/{orgName}/clusters/{clusterName}/parameterHistories:
    get:
      operationId: listParametersHistory
      summary: List parameters history of the cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the parameter
          in: query
          name: parameterName
          required: false
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterHistoryList'
          description: get parameters history of the cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameter
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/parameters:
    get:
      operationId: listParameterProps
      summary: List parameter properties of the cluster
      tags:
        - parameter
        - shared
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
        - description: whether to return the raw template content
          in: query
          name: rawContent
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterList'
          description: get configuration of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/parameterTemplates:
    get:
      operationId: listParameterTemplates
      summary: List parameter templates in an Org
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: the template partition in listParamTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/parameterTemplatePartition'
        - description: Cluster Application Version
          in: query
          name: version
          schema:
            type: string
        - description: component type
          in: query
          name: component
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplList'
          description: list parameter templates successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    post:
      operationId: createParameterTemplate
      summary: Create parameter template
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: create parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/parameterTemplate/{parameterTemplateName}:
    get:
      operationId: readParameterTemplate
      summary: Get parameter template details
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
        - description: the template partition in read paramTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/parameterTemplatePartition'
        - description: whether to return the raw template content
          in: query
          name: rawContent
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterList'
          description: read parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    delete:
      operationId: deleteParameterTemplate
      summary: Delete parameter template
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    patch:
      summary: Update parameter template
      operationId: patchParameterTemplate
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/parameterTemplate:
    get:
      operationId: getClusterParameterTemplate
      summary: Get cluster parameter template
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
        - description: engine name
          in: query
          name: engineName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplApplyToClusterList'
          description: get parameter template applicable to the cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
        - shared
    post:
      operationId: exportParameterTemplateFromCluster
      summary: Export parameter template from cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreateFromCluster'
        required: true
      responses:
        '200':
          content: {}
          description: export parameter template from cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
        - shared
      x-codegen-request-body-name: body
    patch:
      operationId: updateClusterParameterTemplate
      summary: Update cluster parameter template
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTpls'
        required: true
      responses:
        '200':
          content: {}
          description: update cluster parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/receivers:
    get:
      tags:
        - alertReceiver
      summary: List alert receivers
      operationId: listAlertReceivers
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: alert receiver category
          schema:
            $ref: '#/components/schemas/alertReceiverCategory'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiverList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertReceiver
      operationId: createAlertReceiver
      summary: Create alert receiver
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: alert receiver category
          required: true
          schema:
            $ref: '#/components/schemas/alertReceiverCategory'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertReceiver'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/receivers/{receiverId}:
    delete:
      operationId: deleteAlertReceiver
      summary: Delete alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - alertReceiver
        - shared
    get:
      operationId: getAlertReceiver
      summary: Get alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - alertReceiver
    patch:
      description: partially update the alert receiver
      operationId: patchAlertReceiver
      summary: Update alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertReceiver'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - alertReceiver
      x-codegen-request-body-name: body
  /api/v1/alerts/checkURL:
    post:
      summary: Batch check URLs connectivity
      description: Tests multiple URLs for connectivity in parallel
      operationId: batchCheckURLConnectivity
      tags:
        - alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/URLCheck'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLCheck'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/alerts/statistic:
    get:
      summary: alert statistic
      description: alert statistic
      operationId: alertStatistic
      tags:
        - alert
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStatistic'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/strategies:
    get:
      tags:
        - alertStrategy
      operationId: listAlertStrategies
      summary: List alert strategies
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStrategyList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertStrategy
      operationId: createAlertStrategy
      summary: Create alert strategy in org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStrategy'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
    patch:
      tags:
        - alertStrategy
      operationId: patchAlertStrategy
      summary: Update alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/alerts/strategies/{strategyId}:
    delete:
      tags:
        - alertStrategy
      operationId: deleteAlertStrategy
      summary: Delete alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: strategyId
          in: path
          description: id of the alert strategies
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - alertStrategy
      operationId: updateAlertStrategy
      summary: Update alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: strategyId
          in: path
          description: id of the alert strategies
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/alerts/rules:
    get:
      tags:
        - alertRule
      operationId: listAlertRules
      summary: List alert rules
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: disabled
          in: query
          description: disabled status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRuleList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertRule
      operationId: createAlertRule
      summary: Create alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertRule'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/alerts/rules/{alertName}:
    get:
      tags:
        - alertRule
        - shared
      operationId: getAlertRule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: name of the alert
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - alertRule
        - shared
      operationId: deleteAlertRule
      summary: Delete alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: id of the alert rules
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertRule
        - shared
      operationId: updateAlertRule
      summary: Update alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: id of the alert rules
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertRule'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/alerts/metrics:
    get:
      tags:
        - alertMetrics
        - shared
      operationId: listAlertMetrics
      summary: List alert metric types
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/alertMetricList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/objects:
    get:
      tags:
        - alertObject
      operationId: listAlertObjects
      summary: List alert objects
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: page size
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObjectList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertObject
      operationId: setAlertObjectsStatus
      summary: Set alert objects status
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            required: true
            schema:
              type: array
              items:
                $ref: '#/components/schemas/alertObject'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObjectList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/objects/{alertId}:
    patch:
      tags:
        - alertObject
        - shared
      operationId: setAlertObjectStatus
      summary: Set alert object status
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertId
          in: path
          description: alert id
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/cluster/{clusterName}:
    get:
      tags:
        - clusterAlertSwitch
        - shared
      operationId: getClusterAlertDisabled
      summary: Check if cluster alert is disabled
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - clusterAlertSwitch
        - shared
      operationId: setClusterAlertDisabled
      summary: Set cluster alert disabled or enabled
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertCluster'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/config:
    get:
      tags:
        - alertConfig
        - shared
      operationId: getAlertConfig
      summary: Get alert config
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertConfig
        - shared
      operationId: setAlertConfig
      summary: Set alert config
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertConfig'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/inhibits:
    get:
      tags:
        - alertInhibit
      operationId: listAlertInhibits
      summary: List alert inhibits
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibitList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertInhibit
      operationId: createAlertInhibit
      summary: Create alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertInhibit'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertInhibit
      operationId: patchAlertInhibit
      summary: Patch alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertInhibit'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/inhibits/{inhibitId}:
    get:
      tags:
        - alertInhibit
        - shared
      operationId: getAlertInhibit
      summary: Get alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: inhibitId
          in: path
          description: inhibit id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - alertInhibit
        - shared
      operationId: deleteAlertInhibit
      summary: Delete alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: inhibitId
          in: path
          description: inhibit id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/alerts/rules/config:
    get:
      tags:
        - alertRule
      summary: Download organization-specific alert rule configuration file
      description: Downloads the current alert rule configuration for a specific organization as a YAML file.
      operationId: downloadOrgAlertRuleFile
      parameters:
        - name: orgName
          in: path
          required: true
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: Successful download of the organization-specific alert rule configuration file.
          content:
            application/x-yaml:
              schema:
                type: string
                format: binary
                description: YAML file content containing the new alert rule configuration
            application/json:
              schema:
                type: string
                format: binary
                description: JSON file content containing the new alert rule configuration
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - alertRule
      summary: Update alert rule configuration via YAML upload
      description: Replaces the entire alert rule configuration with the content of the uploaded YAML file.
      operationId: updateRuleConfig
      parameters:
        - name: orgName
          in: path
          required: true
          description: The name of the organization.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/alertRuleConfig'
      responses:
        '204':
          description: Alert rule configuration updated successfully.
        '400':
          description: Invalid YAML format or content.
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          description: Internal server error during update.
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/alerts/rules/config/restore:
    post:
      tags:
        - alertRule
      summary: Restore organization's alert rule configuration to defaults
      description: Restores the alert rule configuration for a specific organization to the system default settings.
      operationId: restoreOrgAlertRuleToDefault
      parameters:
        - name: orgName
          in: path
          required: true
          description: The name of the organization.
          schema:
            type: string
      responses:
        '200':
          description: Alert rule configuration for the organization restored to defaults successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Alert rule configuration for organization 'example-org-1' has been restored to defaults successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/environments/{environmentName}/engines:
    get:
      operationId: listEnginesInEnv
      summary: List engines in environment
      parameters:
        - description: name of the EnvironmentName
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: engine name
          in: query
          name: name
          schema:
            type: string
        - description: engine Type
          in: query
          name: type
          schema:
            $ref: '#/components/schemas/engineType'
        - description: engine version
          in: query
          name: version
          schema:
            type: string
        - name: provider
          in: query
          description: engine provider
          schema:
            type: string
        - name: all
          in: query
          description: list all engines include uninstall engines
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
        - shared
  /api/v1/engines/resourceConstraints:
    get:
      operationId: listEngineResourceConstraints
      summary: List engine resource constraints
      parameters:
        - description: engine name
          in: query
          name: engine
          schema:
            type: string
        - description: engine mode
          in: query
          name: mode
          schema:
            type: string
        - description: engine component
          in: query
          name: component
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceConstraintList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
  /api/v1/engineOptions:
    get:
      description: list all engineOptions
      summary: List all engineOptions
      operationId: listEngineOptions
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOptionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engineOption
  /api/v1/engineOptions/{engineName}:
    get:
      description: Get a engineOption detail
      summary: Get engineOption
      operationId: getEngineOption
      parameters:
        - description: Name of the engineOption
          in: path
          name: engineName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOption'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
  /api/v1/engineLicenses:
    get:
      description: list all engineLicenses
      summary: List all engineLicenses
      operationId: listEngineLicenses
      parameters:
        - description: engine name
          in: query
          name: engineName
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineLicenseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}:
    get:
      tags:
        - dms
        - shared
      operationId: getDataSourceV2
      summary: get the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
    delete:
      tags:
        - dms
        - shared
      operationId: deleteDataSourceV2
      summary: delete the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when datasource is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource:
    get:
      tags:
        - dms
        - shared
      operationId: listDataSourceV2
      summary: list the datasource of a cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasourceList'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/testDS:
    post:
      tags:
        - dms
        - shared
      operationId: testDataSourceV2
      summary: test the datasource
      parameters:
        - name: orgName
          description: name of the Org
          required: true
          in: path
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/organizations/{orgName}/clusters/{clusterName}/createDS:
    post:
      tags:
        - dms
        - shared
      operationId: createDataSourceV2
      summary: create the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/updateDS:
    post:
      tags:
        - dms
        - shared
      operationId: updateDataSourceV2
      summary: update the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/query:
    post:
      tags:
        - dms
        - shared
      operationId: query
      summary: create a SQL query
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsQueryRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryResponse'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/export:
    post:
      tags:
        - dms
        - shared
      summary: Data Export
      operationId: DataExport
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsExportRequest'
      responses:
        '200':
          description: data in format
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/import:
    post:
      tags:
        - dms
        - shared
      summary: Data Import
      operationId: DataImport
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsImportRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DmsImportFormData'
      responses:
        '200':
          description: create import task success, wait for task complete...
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: string
                    description: the task id
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/task:
    get:
      tags:
        - dms
        - shared
      summary: Get the task progress
      operationId: GetTaskProgress
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: taskId
          in: query
          description: the task id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get the task success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsTaskInfo'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/tasks:
    get:
      tags:
        - dms
        - shared
      summary: Get the task list
      operationId: GetTaskList
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get the task list success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsTaskList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/schemas:
    get:
      tags:
        - dms
        - shared
      operationId: getSchemaList
      summary: list all databases or schema of the cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSchemaList'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}:
    get:
      tags:
        - dms
        - shared
      operationId: ListObjectTypesInSchema
      summary: list the type and number of database objects in the specified database or schema
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectList'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}/{type}:
    get:
      tags:
        - dms
        - shared
      operationId: ListObjectNamesByType
      summary: list the all name for the specified object type
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: object type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectNameList'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}/{type}/{objectName}:
    get:
      tags:
        - dms
        - shared
      operationId: GetObjectInfo
      summary: get the detail object info
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: object type
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          description: object name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectResponse'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/history:
    get:
      tags:
        - dms
        - shared
      operationId: listQueryHistory
      summary: list the query History
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryHistoryList'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/sqlExplain:
    post:
      tags:
        - dms
        - shared
      operationId: sqlExplain
      summary: explain a SQL
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsExplainRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryResponse'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/generateDDL:
    post:
      tags:
        - dms
        - shared
      operationId: generateDDL
      summary: support ddl and dml operations
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsGenerateDDLRequest'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: string
                description: operation executed successfully
  /api/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/showData:
    post:
      tags:
        - dms
        - shared
      operationId: showData
      summary: read data of table or view
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowDataRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsResult'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/sessions:
    get:
      deprecated: true
      tags:
        - dms
        - shared
      summary: list all session for the cluster
      operationId: listSessionsOld
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: all
          in: query
          description: whether list all session includes sleep
          default: 'true'
          schema:
            type: string
      responses:
        '200':
          description: list all session success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSessionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/session/{session}:
    delete:
      deprecated: true
      tags:
        - dms
        - shared
      summary: close the session for the cluster
      operationId: closeSessions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: session
          in: path
          description: name of the storage volume
          required: true
          schema:
            type: string
        - name: keep
          in: query
          description: whether only close the query and keep the session
          default: 'false'
          schema:
            type: string
      responses:
        '200':
          description: close the session success
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/ipWhitelist:
    get:
      operationId: listIPWhitelist
      summary: List IP whitelists
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelistList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
        - shared
    post:
      operationId: createIPWhitelist
      summary: Create IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: whitelist
              properties:
                name:
                  description: Name of the whitelist
                  title: Name
                  type: string
                description:
                  description: Description
                  title: Description
                  type: string
                addresses:
                  items:
                    type: string
                  description: Whitelist IP Addresses
                  title: Addresses
                  type: array
              required:
                - name
                - addresses
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelist'
          description: Returned when object is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
        - shared
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/clusters/{clusterName}/ipWhitelist/{ipWhitelistId}:
    patch:
      operationId: updateIPWhitelist
      summary: Update IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: ID of the IP whitelist
          in: path
          name: ipWhitelistId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: whitelist
              properties:
                name:
                  description: Name of the whitelist
                  title: Name
                  type: string
                description:
                  description: Description
                  title: Description
                  type: string
                addresses:
                  items:
                    type: string
                  description: Whitelist IP Addresses
                  title: Addresses
                  type: array
              required:
                - name
                - addresses
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelist'
          description: Returned when object is updated successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
        - shared
      x-codegen-request-body-name: body
    delete:
      operationId: deleteIPWhiteList
      summary: Delete IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: ID of the IP whitelist
          in: path
          name: ipWhitelistId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when object is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
        - shared
  /api/v1/permissions:
    get:
      tags:
        - role
        - shared
      summary: List all permissions
      description: List all permissions
      operationId: listPermissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissionList'
        '401':
          $ref: '#/components/responses/401'
  /api/v1/organizations/{orgName}/roles:
    get:
      tags:
        - role
        - shared
      summary: List roles of a organization
      description: List roles of a organization
      operationId: listRoles
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - role
        - shared
      summary: Create role
      description: Create role
      operationId: createRole
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/roles/{roleName}:
    get:
      tags:
        - role
        - shared
      summary: Get role by name
      description: Get role by name
      operationId: getRoleByName
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - role
        - shared
      summary: Update role by name
      description: Update role by name
      operationId: updateRoleByName
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roleUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - role
        - shared
      summary: Delete role by name
      description: Delete role by name
      operationId: deleteRoleByName
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when role is deleted successfully.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/roles/{roleName}/permissions:
    get:
      tags:
        - role
        - shared
      summary: List permissions of a role
      description: List permissions of a role
      operationId: listRolePermissions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/roles/{roleName}/permissions/batch:
    post:
      tags:
        - role
        - shared
      summary: Batch add permissions to a role
      description: Batch add permissions to a role
      operationId: batchAddRolePermissions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '204':
          description: Returned when permissions are added successfully.
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    delete:
      tags:
        - role
        - shared
      summary: Batch remove permissions from a role
      description: Batch remove permissions from a role
      operationId: batchRemoveRolePermissions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '204':
          description: Returned when permissions are removed successfully.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/classes:
    get:
      tags:
        - class
      operationId: listClasses
      summary: List classes
      parameters:
        - name: engineName
          in: query
          description: code
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/classTypes:
    get:
      tags:
        - classTypes
      operationId: getClassTypes
      summary: Get all class types
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/classType'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/classTypes/{id}:
    get:
      tags:
        - classTypes
      operationId: getClassType
      summary: Get a class type by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classType'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/features:
    get:
      description: Get feature list
      summary: Get feature list
      operationId: listFeature
      parameters:
        - description: name of the feature group
          in: query
          name: group
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - feature
        - shared
  /api/v1/features/{featureName}:
    get:
      description: Get feature
      summary: Get feature
      operationId: readFeature
      parameters:
        - description: name of the feature
          in: path
          name: featureName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feature'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - feature
        - shared
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tenants:
    get:
      tags:
        - oceanbase
        - shared
      operationId: listTenants
      summary: list all tenants for the oceanbase cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}:
    get:
      tags:
        - oceanbase
        - shared
      operationId: getTenant
      summary: get tenants detail information of the oceanbase cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          description: id of the tenant
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameters:
    get:
      tags:
        - dms
        - shared
      summary: list cluster parameters
      operationId: listParameters
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
        - name: mode
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsParameterList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameter:
    post:
      tags:
        - dms
        - shared
      summary: alter cluster parameter
      operationId: alterParameter
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsObAlterParameter'
      responses:
        '200':
          description: close the session success
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameterHistory:
    get:
      tags:
        - dms
        - shared
      summary: List parameters history of the Oceanbase tenant
      operationId: tenantParameterHistory
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: tenantId
          description: id of the tenant
          in: path
          required: true
          schema:
            type: string
        - description: name of the parameter
          in: query
          name: parameterName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterHistoryList'
          description: get parameters history of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/recycleBin/clusters:
    get:
      tags:
        - recycleBinCluster
        - shared
      operationId: listRecycleBinCluster
      summary: List clusters in the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/recycleBin/clusters/{clusterName}:
    get:
      tags:
        - recycleBinCluster
        - shared
      operationId: getRecycleBinCluster
      summary: Get cluster in the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - recycleBinCluster
        - shared
      operationId: deleteRecycleBinCluster
      summary: Delete cluster from the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: isDeleteBackup
          in: query
          description: whether to delete the backup of the cluster
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/recycleBin/clusters/{clusterName}/restore:
    post:
      tags:
        - recycleBinCluster
        - shared
      operationId: restoreRecycleBinCluster
      summary: Restore cluster from the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/environments/{environmentName}/projects:
    get:
      tags:
        - project
      operationId: listProjects
      summary: List projects in an environment
      parameters:
        - name: environmentName
          in: path
          description: environment name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/disasterRecovery:
    delete:
      operationId: deleteDisasterRecovery
      summary: Delete a disaster recovery instance
      description: Delete a specific disaster recovery instance
      deprecated: true
      parameters:
        - description: name of the org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The ID of the disaster recovery logical instance
          in: query
          name: logicalInstanceID
          schema:
            type: string
        - description: The ID of the disaster recovery cluster
          in: query
          name: clusterID
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryTask'
          description: Disaster recovery instance async job task information.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
  /api/v1/organizations/{orgName}/parent/{parentClusterID}/disasterRecovery:
    get:
      operationId: listDisasterRecovery
      summary: List Disaster Recovery instances under the main cluster
      description: Retrieve a list of disaster recovery instances for a specific database cluster.
      deprecated: true
      parameters:
        - description: The ID of the parent database cluster
          in: path
          name: parentClusterID
          required: true
          schema:
            type: string
        - description: name of the org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryClusterList'
          description: A list of disaster recovery instances.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
    post:
      operationId: createDisasterRecovery
      summary: Create a new disaster recovery instance
      description: Create a new disaster recovery instance for a database cluster.
      deprecated: true
      parameters:
        - description: The ID of the parent database cluster
          in: path
          name: parentClusterID
          required: true
          schema:
            type: string
        - description: name of the org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disasterRecoveryCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryTask'
          description: Disaster recovery instance async job task information.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/disasterRecovery/{clusterID}/promote:
    post:
      operationId: promoteDisasterRecovery
      summary: Promote a disaster recovery instance to the main instance
      description: Promote the disaster recovery instance to the primary database instance.
      deprecated: true
      parameters:
        - description: The ID of the disaster recovery instance
          in: path
          name: clusterID
          required: true
          schema:
            type: string
        - description: name of the org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/disasterRecoveryPromote'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryTask'
          description: Disaster recovery instance async job task information.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/disasterRecovery/{clusterID}/switchHistory:
    get:
      operationId: getDisasterRecoveryHistory
      summary: Get switch history of a disaster recovery instance
      description: Retrieve the history of failover and failback operations for a specific disaster recovery instance.
      deprecated: true
      parameters:
        - description: The ID of the disaster recovery instance
          in: path
          name: clusterID
          required: true
          schema:
            type: string
        - description: name of the org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryHistory'
          description: Switch history retrieved successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
  /api/v1/organizations/{orgName}/disasterRecovery/{clusterID}/status:
    get:
      operationId: getDisasterRecoveryStatus
      summary: Retrieve Disaster Recovery Instance Status
      description: Get detailed information about the status of a specific disaster recovery instance, including delay and current replication point.
      deprecated: true
      parameters:
        - description: Unique identifier of the disaster recovery instance
          in: path
          name: clusterID
          required: true
          schema:
            type: string
        - description: Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/disasterRecoveryStatusResponse'
          description: Status query successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - disasterRecovery
  /api/v1/organizations/{orgName}/cluster/{clusterName}/available-relations:
    get:
      tags:
        - relation
        - shared
      summary: list the available clusters for the organization to create the a relation
      operationId: listAvailableClustersForRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: targetType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list the available clusters for the organization to create the a relation successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/relations:
    get:
      tags:
        - relation
        - shared
      summary: list the clusters that have built a relation to the specified cluster
      operationId: listRelatedClusters
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list the clusters that have built relations to the cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relatedClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - relation
        - shared
      summary: create a relation between the clusters in the organization
      operationId: createRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: create a relation between the clusters in the organization successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/relation/{target}:
    delete:
      tags:
        - relation
        - shared
      summary: delete a existed relation between the clusters in the organization
      operationId: deleteRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: delete a existed relation between the clusters in the organization successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/brokers:
    get:
      summary: Get all brokers in cluster
      operationId: getKafkaBrokers
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/brokers/{brokerId}/configs:
    get:
      summary: Get all configs of a broker
      operationId: getKafkaBrokerConfigs
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: brokerId
          in: path
          required: true
          schema:
            type: integer
          description: The id of broker
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update broker config
      operationId: updateKafkaBrokerConfig
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: brokerId
          in: path
          required: true
          schema:
            type: integer
          description: The id of broker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBrokerConfigRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topics:
    get:
      summary: Get all topics in cluster
      operationId: getKafkaTopics
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: nameFilter
          in: query
          required: false
          description: search pattern, support prefix search
          schema:
            type: string
        - name: onlyNames
          in: query
          required: false
          schema:
            type: boolean
          description: if true, only return topic names
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create new topic
      operationId: createKafkaTopic
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTopicRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}:
    get:
      summary: Get topic Infos
      operationId: getKafkaTopicInfos
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDetails'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete topic
      operationId: deleteKafkaTopic
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Topic successfully deleted
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/brokers:
    get:
      summary: Get broker distributions of topic
      operationId: getKafkaTopicBrokers
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicBrokerList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/partitions:
    get:
      summary: Get partition list of topic
      operationId: getKafkaTopicPartitions
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: expand topic partition
      operationId: expandKafkaTopicPartitions
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpandPartitionRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/configs:
    get:
      summary: Get topic configuration
      operationId: getKafkaTopicConfig
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update topic configuration
      operationId: setKafkaTopicConfig
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicConfigRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/consumer-groups:
    get:
      summary: List consumer groups of topic
      operationId: listKafkaTopicConsumerGroups
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/consumer-groups/{groupId}/offsets:
    get:
      summary: List consumer offsets of topic
      operationId: listKafkaTopicConsumerOffsets
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicOffsetList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Reset consumer offset of topic
      operationId: resetKafkaTopicConsumerOffset
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetOffsetRequest'
      responses:
        '204':
          description: Consumer offset successfully reset
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/messages:
    get:
      summary: List messages from topic
      operationId: listKafkaTopicMessages
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
        - name: partition
          in: query
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: count
          in: query
          description: 获取消息的数量
          required: false
          schema:
            type: integer
            default: 100
        - name: keyFilter
          in: query
          description: 消息 key 的过滤条件（大小写不敏感）
          required: false
          schema:
            type: string
        - name: valueFilter
          in: query
          description: 消息内容的过滤条件（大小写不敏感）
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicMessageList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Produce message to topic
      operationId: produceKafkaTopicMessage
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicMessageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: 生成消息的字节长度
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/consumer-groups:
    get:
      summary: List all consumer groups
      operationId: listKafkaConsumerGroups
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: query
          required: false
          schema:
            type: string
          description: the id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/consumer-groups/{groupId}:
    get:
      summary: Get consumer group describe
      operationId: getKafkaConsumerGroupDescribe
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupDescribeResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete consumer group
      operationId: deleteKafkaConsumerGroup
      tags:
        - kafka
        - shared
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '204':
          description: Consumer group successfully deleted
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/redis/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      tags:
        - redis
        - shared
      summary: list redis accounts
      operationId: listRedisAccounts
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: the component type to list accounts
          required: false
          schema:
            type: string
      responses:
        '200':
          description: list redis users success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLUserResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - redis
        - shared
      summary: create redis account
      operationId: createRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: the component type to create account
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLUser'
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/redis/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      tags:
        - redis
        - shared
      summary: delete redis account
      operationId: deleteRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: accountName
          in: path
          description: the name of account
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: in which component type to delete account
          required: false
          schema:
            type: string
      responses:
        '200':
          description: delete redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - redis
        - shared
      summary: update redis account
      operationId: updateRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: accountName
          in: path
          description: the name of account
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: in which component type to update account
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLUser'
      responses:
        '200':
          description: update redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/damengdb/organizations/{orgName}/clusters/{clusterName}/tablespaces:
    get:
      tags:
        - dameng
      summary: List damengdb tablespaces
      description: List tablespaces for a Dameng cluster.
      operationId: listTablespaces
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: Organization name
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: Cluster name
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmTablespaceList'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - dameng
      summary: Create damengdb tablespace
      description: Create tablespace for a Dameng cluster.
      operationId: createTablespace
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: Organization name
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: Cluster name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmTablespace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmTablespace'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/damengdb/organizations/{orgName}/clusters/{clusterName}/tablespaces/{tablespaceName}:
    get:
      tags:
        - dameng
      summary: Get Dameng tablespace info
      operationId: getTablespace
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: Organization name
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: Cluster name
        - name: tablespaceName
          in: path
          required: true
          schema:
            type: string
          description: Tablespace name
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmTablespace'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - dameng
      summary: Delete damengdb tablespace
      description: Delete tablespace for a Dameng cluster.
      operationId: deleteTablespace
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: Organization name
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: Cluster name
        - name: tablespaceName
          in: path
          required: true
          schema:
            type: string
          description: Tablespace name
      responses:
        '204':
          content: {}
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - dameng
      summary: Update damengdb tablespace
      description: Update tablespace for a Dameng cluster.
      operationId: updateTablespace
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: Organization name
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: Cluster name
        - name: tablespaceName
          in: path
          required: true
          schema:
            type: string
          description: Tablespace name
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmTablespace'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmTablespace'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/console:
    get:
      tags:
        - dms
        - shared
      summary: get engine available console
      description: get engine available console
      operationId: getEngineAvailableConsole
      parameters:
        - name: engineName
          in: path
          description: name of the engine
          required: true
          schema:
            type: string
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/console'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - dms
        - shared
      summary: disable console
      description: disable console
      operationId: disableConsole
      parameters:
        - name: engineName
          in: path
          description: name of the engine
          required: true
          schema:
            type: string
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '204':
          description: disable console successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - dms
        - shared
      summary: enable console
      description: enable console
      operationId: enableConsole
      parameters:
        - name: engineName
          in: path
          description: name of the engine
          required: true
          schema:
            type: string
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DMSConsoleEnableOpt'
      responses:
        '204':
          description: enable console successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/demo:
    post:
      tags:
        - rdbms
        - shared
      description: generate demo data
      summary: generate demo data
      operationId: generateDemoData
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: acccount name which owns the database to generate demo data
          in: query
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when demo data is generated successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/dboptions:
    get:
      tags:
        - rdbms
        - shared
      description: get available options for creating database
      summary: get database options
      operationId: getDatabaseOptions
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: option type
          in: query
          name: type
          required: true
          schema:
            type: string
        - name: charset
          in: query
          description: specified charset
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: filter keyword
          required: false
          schema:
            type: string
      responses:
        '200':
          description: get database options success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/databases:
    get:
      description: list databases for rdbms engine cluster
      summary: List cluster databases
      operationId: listDatabases
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/databaseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
        - shared
    post:
      description: create a database in cluster
      summary: Create cluster database
      operationId: createDatabase
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/database'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when database is created successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
        - shared
      x-codegen-request-body-name: body
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/databases/{databaseName}:
    get:
      description: get a database info in cluster
      operationId: getDatabase
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/database'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - database
        - rdbms
        - shared
    delete:
      description: delete a database in cluster
      summary: Delete cluster database
      operationId: deleteDatabase
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
        - shared
    patch:
      description: update a database config in cluster
      summary: update database config
      operationId: updateDatabaseConfig
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - database
        - rdbms
        - shared
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      description: list accounts in cluster
      summary: List cluster accounts
      operationId: listAccounts
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
        - shared
      x-codegen-request-body-name: body
    post:
      description: create an account in cluster
      summary: Create cluster account
      operationId: createAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
        - shared
      x-codegen-request-body-name: body
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      description: delete an account in cluster
      summary: Delete cluster account
      operationId: deleteAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
        - shared
    patch:
      description: update an account in cluster
      summary: update cluster account
      operationId: updateAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Update account password successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
        - shared
      x-codegen-request-body-name: body
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/root-password:
    get:
      description: get root account password
      summary: get root account password
      operationId: getRootAccountPassword
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: query
          name: accountName
          required: true
          schema:
            type: string
        - description: name of the component
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          description: get root account password success
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - account
        - shared
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}/privileges:
    patch:
      description: update account privileges for rdbms engine
      summary: update account privileges
      operationId: updateAccountPrivileges
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privilegeList'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when account privileges are updated successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
        - shared
      x-codegen-request-body-name: body
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/sessions:
    get:
      description: list sessions in cluster
      summary: List cluster sessions
      operationId: listSessions
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: all
          in: query
          description: whether list all session includes sleep
          default: true
          schema:
            type: boolean
      responses:
        '200':
          description: list all session success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSessionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - session
        - rdbms
        - shared
  /api/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/sessions/{session}:
    delete:
      description: kill a session in cluster
      summary: Kill cluster session
      operationId: killSession
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: session id
          in: path
          name: session
          required: true
          schema:
            type: string
        - description: if keep is true, the session will not be killed but only closed
          in: query
          name: keep
          schema:
            type: boolean
      responses:
        '204':
          content: {}
          description: Returned when session is killed successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - session
        - rdbms
        - shared
  /api/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      description: list accounts in mongodb
      summary: List mongodb accounts
      operationId: listMongoDBAccounts
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
        - shared
      x-codegen-request-body-name: body
    post:
      description: create an account in mongodb
      summary: Create mongodb account
      operationId: createMongoDBAccount
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
        - shared
      x-codegen-request-body-name: body
  /api/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      description: delete an account in mongodb
      summary: Delete mongodb account
      operationId: deleteMongoDBAccount
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
        - shared
  /api/v1/data/mssql/organizations/{orgName}/clusters/{clusterName}/accounts:
    delete:
      operationId: deleteMssqlAccount
      summary: delete mssql account compatible with windows account
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: query
          name: account
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mssql
        - shared
    patch:
      operationId: updateMssqlAccount
      summary: update mssql account compatible with windows account
      tags:
        - account
        - mssql
        - shared
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
      responses:
        '204':
          content: {}
          description: Update mssql account successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/data/mssql/organizations/{orgName}/clusters/{clusterName}/tde:
    patch:
      operationId: manageMssqlTDEDatabase
      summary: batch modify database tde status
      tags:
        - mssql
        - shared
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dbTDERequest'
      responses:
        '204':
          content: {}
          description: Enable mssql database in tde successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/llm:
    get:
      tags:
        - llm
      deprecated: true
      operationId: ListLLMForOrg
      summary: List available LLM for org
      description: available
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
      responses:
        '200':
          description: available llm list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - llm
      deprecated: true
      operationId: addLLMForOrg
      summary: add LLM for org
      description: add LLM for org
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llm'
      responses:
        '200':
          description: llm added successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/llm/{id}:
    get:
      tags:
        - llm
      deprecated: true
      operationId: getLLMByIDInOrg
      summary: Get LLM by ID in org
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
        - description: ID of the LLM
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '201':
          description: LLM by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llm'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - llm
      deprecated: true
      operationId: updateLLM
      summary: Update LLM
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
        - description: ID of the LLM
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/llm'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llm'
          description: Returned when object is updated successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
    delete:
      tags:
        - llm
      deprecated: true
      operationId: deleteLLM
      summary: Delete LLM
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
        - description: ID of the LLM
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when object is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/llm/check:
    post:
      tags:
        - llm
      deprecated: true
      operationId: checkAPIKeyForOrg
      summary: check apikey available for org
      description: check apikey available for org
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/checkAPIKey'
      responses:
        '200':
          description: apikey available
          content:
            application/json:
              schema:
                type: boolean
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/organizations/{orgName}/llm/models:
    get:
      tags:
        - llm
      operationId: listAvailableModelInOrg
      summary: List available model in org
      parameters:
        - name: orgName
          in: path
          required: true
          type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/ai/conversations:
    get:
      tags:
        - AI
      summary: List conversations by user
      description: Retrieves a list of conversations filtered by user.
      operationId: listConversations
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: type
          in: query
          description: Type of conversations to filter, can be bi or analysis.
          schema:
            type: string
      responses:
        '200':
          description: A list of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aiConversationListResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - AI
      summary: Create a new conversation
      description: Creates a new conversation.
      operationId: newAIConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIConversationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aiConversation'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/ai/conversations/{conversationId}/messages:
    get:
      tags:
        - AI
      summary: Get AI conversation messages
      description: Retrieves ai messages for a specific conversation. If pre is not provided, returns the last 10 turn messages. If pre is provided, returns 10 turn messages after the pre message.
      operationId: getConversationMessages
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation
          schema:
            type: string
            format: uuid
        - name: pre
          in: query
          description: Previous message ID
          schema:
            type: string
      responses:
        '200':
          description: A list of messages for the conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aiMessageListResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/ai/conversations/{conversationId}:
    delete:
      tags:
        - AI
      summary: Delete a conversation
      description: Deletes a specific conversation and all its associated messages.
      operationId: deleteConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          description: ID of the conversation to delete
          schema:
            type: string
            format: uuid
      responses:
        '204':
          content: {}
          description: Conversation deleted successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/ai/chatbi/v2:
    post:
      tags:
        - AI
      summary: SSE endpoint for Chat BI V2
      description: Establishes an SSE connection for AI BI conversation.
      operationId: chatBIV2SSE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatRequest'
      responses:
        '200':
          description: Successful operation, returns an event stream.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/chatResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/ai/chatops/v2:
    post:
      tags:
        - AI
      summary: SSE endpoint for Chat V2
      description: Establishes an SSE connection for AI conversation.
      operationId: chatV2SSE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatRequest'
      responses:
        '200':
          description: Successful operation, returns an event stream.
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/chatResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /api/v1/keys:
    get:
      tags:
        - key
      operationId: listKeys
      summary: List Keys
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /api/v1/platformParameters/{platformParameterName}:
    get:
      tags:
        - platformParameter
        - shared
      operationId: getPlatformParameter
      summary: get platformParameter by name
      parameters:
        - description: name of the platformParameter
          in: path
          name: platformParameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformParameter'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/environments/{environmentName}/storages:
    get:
      operationId: listStorages
      summary: List storages
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - name: name
          description: the search key to search storage's name
          in: query
          schema:
            type: string
        - name: key
          description: key to search storage's tag
          in: query
          schema:
            type: string
        - name: value
          description: value to search storage's tag
          in: query
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    post:
      operationId: createStorage
      summary: Create a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /api/v1/environments/{environmentName}/storages/{storageName}:
    get:
      operationId: getStorage
      summary: Get a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    post:
      operationId: updateStorage
      summary: Update a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    delete:
      operationId: deleteStorage
      summary: Delete a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /api/v1/organizations/{orgName}/replication/channel:
    get:
      deprecated: true
      operationId: listDataChannels
      summary: List Data Channels
      description: Retrieve a list of data channels.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The name of the data channel
          in: query
          name: name
          required: false
          schema:
            type: string
        - description: The status of the data channel
          in: query
          name: status
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataChannelList'
          description: A list of data channels.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
    post:
      deprecated: true
      operationId: createDataChannel
      summary: Create a new data channel
      description: Create a new data channel.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataReplicationCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataChannelResponse'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/replication/channel/{channelID}:
    get:
      deprecated: true
      operationId: getDataChannel
      summary: Get Data Channel Details
      description: Retrieve a data channel detail.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The ID of the data channel
          in: path
          name: channelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataChannelDetail'
          description: A detail of data channel.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
    delete:
      deprecated: true
      operationId: deleteDataChannel
      summary: Delete a data channel
      description: Delete a data channel.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The ID of the data channel
          in: path
          name: channelID
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when channel is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
  /api/v1/organizations/{orgName}/replication/channel/{channelID}/ops/{opsType}:
    post:
      deprecated: true
      operationId: createDataChannelOps
      summary: Create a new data channel ops
      description: Create a new data channel ops.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The ID of the data channel
          in: path
          name: channelID
          required: true
          schema:
            type: string
        - description: The operation type
          in: path
          name: opsType
          required: true
          schema:
            $ref: '#/components/schemas/dataReplication_opsType'
      responses:
        '204':
          content: {}
          description: Returned when operation is completed successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
  /api/v1/organizations/{orgName}/replication/channel/{channelID}/events:
    get:
      deprecated: true
      operationId: listDataChannelEvents
      summary: List Data Channel Events
      description: Retrieve a list of data channel events.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The ID of the data channel
          in: path
          name: channelID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataReplication_eventList'
          description: A list of data channel events.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
  /api/v1/organizations/{orgName}/replication/channel/objects:
    post:
      deprecated: true
      operationId: queryReplicationObject
      summary: query replication object
      description: query replication object.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/replicationObjectQuery'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replicationObjectTree'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '501':
          $ref: '#/components/responses/501'
      tags:
        - dataReplication
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/replication/channel/precheck:
    post:
      deprecated: true
      operationId: createPreCheck
      summary: create pre check
      description: create pre check.
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preCheckCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preCheckTaskResponse'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
      x-codegen-request-body-name: body
  /api/v1/organizations/{orgName}/replication/channel/precheck/{preCheckID}:
    get:
      deprecated: true
      operationId: getPreCheck
      summary: get preCheck
      description: get preCheck.
      parameters:
        - description: The ID of the preCheck task
          in: path
          name: preCheckID
          required: true
          schema:
            type: string
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preCheckTaskDetail'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
    delete:
      deprecated: true
      operationId: deletePreCheck
      summary: delete preCheck
      description: delete preCheck.
      parameters:
        - description: The ID of the preCheck task
          in: path
          name: preCheckID
          required: true
          schema:
            type: string
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when preCheck is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
  /api/v1/organizations/{orgName}/replication/channel/{channelID}/logs:
    get:
      deprecated: true
      description: Query logs of a data channel
      summary: Query data channel logs
      operationId: queryDataChannelLogs
      parameters:
        - description: The Name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: channelID
          required: true
          schema:
            type: string
        - in: query
          name: moduleName
          schema:
            type: string
        - in: query
          name: logType
          schema:
            $ref: '#/components/schemas/logType'
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        timestamp:
                          type: string
                        log:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - dataReplication
  /api/v1/organizations/{orgName}/clusters/{clusterName}/import/support-sources:
    get:
      tags:
        - import
        - shared
      summary: Get supported data import sources
      description: Returns supported data source types and their detailed configuration requirements based on target engine type
      operationId: getImportSupportSources
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns supported data source list and configuration requirements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSupportSourcesResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/import/preflight:
    post:
      tags:
        - import
        - shared
      summary: Data source preflight check
      description: Initiates async preflight validation and returns task ID for later result querying
      operationId: importPreflight
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Data source connection configuration and selection rules
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportPreflightRequest'
      responses:
        '200':
          description: Preflight initiated successfully, returns task ID for querying results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preCheckTaskResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/import:
    get:
      tags:
        - import
        - shared
      summary: Query import task list
      description: Gets import task list for specified cluster, supports filtering by status and pagination
      operationId: listImportTask
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns task list with pagination info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTaskListResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - import
        - shared
      summary: Create import task
      description: Creates new data import task based on data source configuration and import options
      operationId: createImportTask
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Import task configuration including data source connection, object selection and import options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportTaskCreateRequest'
      responses:
        '201':
          description: Task created successfully, returns basic task information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTaskResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/import/{id}:
    get:
      tags:
        - import
        - shared
      summary: Get import task details
      description: Gets detailed information about a specific import task by its ID
      operationId: getImportTask
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Import task ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully returns import task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTaskResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - import
        - shared
      summary: Delete import task
      description: Stops and deletes specified import task, will clean up related Kubernetes resources
      operationId: deleteImportTask
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Import task ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/organizations/{orgName}/clusters/{clusterName}/import/{id}/ops/{opsType}:
    patch:
      deprecated: true
      tags:
        - import
        - shared
      summary: Create a import task operation
      description: Performs pause or resume operation on import task based on opsType parameter
      operationId: updateImportTaskOps
      parameters:
        - name: orgName
          in: path
          description: Organization name
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: Cluster name
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Import task ID
          required: true
          schema:
            type: string
        - name: opsType
          in: path
          description: Operation type
          required: true
          schema:
            $ref: '#/components/schemas/ImportOpsType'
      responses:
        '200':
          description: Import task operation completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportTaskResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/license:
    get:
      tags:
        - license
      summary: Get license
      description: Get license
      operationId: getLicense
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /api/v1/pricing:
    get:
      operationId: getEnvironmentPricing
      summary: Get the environment pricing
      parameters:
        - description: name of the environment (if provided, returns a list with one item; if omitted, returns all environment prices)
          in: query
          name: environmentName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentPricingList'
          description: Retrieve the price of environment(s) as a list
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - pricing
    post:
      operationId: saveEnvironmentPricing
      summary: Save the environment pricing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/environmentPricing'
      responses:
        '204':
          description: Returned when information of pricing save successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - pricing
    delete:
      operationId: deleteEnvironmentPricing
      summary: Delete the environment pricing
      parameters:
        - description: name of the environment
          in: query
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when pricing deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - pricing
  /api/v1/pricing/global:
    get:
      operationId: getGlobalPricing
      summary: Get the global information of pricing
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/globalPricing'
          description: Retrieve the global information of pricing
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - pricing
    post:
      operationId: saveGlobalPricing
      summary: Save the global information of pricing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/globalPricing'
      responses:
        '204':
          description: Returned when global information of pricing save successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - pricing
  /api/v1/bills:
    get:
      operationId: listBills
      summary: List bills
      parameters:
        - description: The ID of the bill
          in: query
          name: billID
          schema:
            type: string
        - description: The ID of the cluster
          in: query
          name: clusterID
          schema:
            type: string
        - description: name of the organization
          in: query
          name: orgName
          schema:
            type: string
        - description: name of the project
          in: query
          name: projectName
          schema:
            type: string
        - description: The type of aggregation time
          in: query
          name: aggregationTime
          schema:
            $ref: '#/components/schemas/aggregationTimeType'
        - description: The type of aggregation group
          in: query
          name: aggregationGroup
          schema:
            $ref: '#/components/schemas/aggregationGroupType'
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillList'
          description: List bill details
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - billing
components:
  securitySchemes:
    BearerToken:
      type: apiKey
      description: Bearer Token authentication
      name: authorization
      in: header
  schemas:
    phoneNumber:
      description: The phonenumber for the user.
      example: '+8618912345678'
      pattern: ^\+\d{1,3}\d{11}$
      type: string
    user:
      description: Admin user info
      properties:
        id:
          description: The ID for the user
          type: string
        userName:
          description: The name of the user, is unique
          type: string
        displayName:
          description: The display name of the user
          type: string
        email:
          description: The email for the user
          type: string
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        isDefaultPassword:
          description: return true if the default admin user need to reset password
          type: boolean
      required:
        - id
        - userName
        - createdAt
        - updatedAt
    APIErrorResponse:
      description: API error response.
      properties:
        code:
          description: The HTTP status code.
          type: integer
        reason:
          description: The reason for the error.
          type: string
        message:
          description: The message for the error.
          type: string
      required:
        - code
      type: object
    userUpdate:
      description: User update
      properties:
        displayName:
          description: The display name of the user
          type: string
        email:
          description: The email for the user
          type: string
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
      type: object
    apikeyCreate:
      description: APIKeyCreate is the payload for creating an APIKey
      properties:
        description:
          description: The description of the APIKey
          type: string
        expiredAt:
          description: The expired time of the APIKey
          type: string
          format: date-time
      required:
        - description
      type: object
    apikey:
      description: APIKey is the key for API access
      properties:
        accessKey:
          description: The name of the APIKey
          type: string
        description:
          description: The description for APIKey
          type: string
        expiredAt:
          description: The expired time of APIKey, return empty without setting duration
          type: string
          format: date-time
          x-nullable: true
        createAt:
          description: The create time of APIKey
          type: string
          format: date-time
      required:
        - accessKey
        - description
        - createAt
      type: object
    pageResult:
      description: PageResult info
      properties:
        first:
          description: a link to the first page of results. This link is optional for collections that cannot be indexed directly to a given page
          type: string
        last:
          description: a link to the last page of results. This link is optional for collections that cannot be indexed directly to a given page
          type: string
        next:
          description: a link to the next page of results. A response that does not contain a next link does not have further data to fetch
          type: string
        prev:
          description: a link to the previous page of results. A response that does not contain a prev link has no previous data. This link is optional for collections that cannot be traversed backward
          type: string
        totalSize:
          description: the total count of items in the list irrespective of pagination
          format: int64
          type: integer
      type: object
    apikeyList:
      description: APIKeys is a list of APIKey objects
      properties:
        items:
          description: Items is the list of APIKey objects in the list
          items:
            $ref: '#/components/schemas/apikey'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    apikeyWithSK:
      description: APIKeyWithSK is the response for creating an APIKey
      properties:
        accessKey:
          description: The accessKey of the APIKey
          type: string
        secretKey:
          description: The secretKey of the APIKey
          type: string
        description:
          description: The description of the APIKey
          type: string
        expiredAt:
          description: The expired time of APIKey
          type: string
          format: date-time
          x-nullable: true
        createAt:
          description: The create time of APIKey
          type: string
          format: date-time
      required:
        - accessKey
        - secretKey
        - description
        - createAt
      type: object
    userOrg:
      description: UserOrg is the payload for user organization
      properties:
        orgId:
          description: The ID of the organization
          type: string
        role:
          description: The role of the user in the organization
          type: string
        displayName:
          description: The display name of the organization
          type: string
        name:
          description: The name of the organization
          type: string
        description:
          description: The description of the organization
          type: string
      required:
        - orgId
        - role
        - name
      type: object
    userOrgList:
      description: UserOrgList is a list of UserOrgs
      properties:
        items:
          description: Items is the list of UserOrg objects in the list
          items:
            $ref: '#/components/schemas/userOrg'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    orgCreate:
      description: OrgCreate is the payload for organization creation
      properties:
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the organization
          type: string
        name:
          description: The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
          type: string
      required:
        - name
      type: object
    org:
      description: Org info
      properties:
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the organization
          type: string
        id:
          type: string
          description: The ID of the organization
        name:
          description: The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        enabled:
          description: return true if the organization is enabled
          type: boolean
      required:
        - createdAt
        - name
        - updatedAt
        - enabled
      type: object
    orgUpdate:
      description: Organization update
      properties:
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the organization
          type: string
      type: object
    orgMember:
      description: Org Member info
      properties:
        displayName:
          description: The display name of User. Read-Only
          type: string
        email:
          description: The email of User. Required when create. Read-Only after create
          type: string
        role:
          description: The role of the User in the Org.
          type: string
        userId:
          description: The ID of User. Read-Only
          type: string
        freezed:
          description: Return true if the member is freezed in the organization
          type: boolean
      required:
        - email
        - role
        - userId
      type: object
    orgMemberList:
      description: OrgMemberList is org member list
      properties:
        items:
          description: Items is the list of OrgMember objects in the list
          items:
            $ref: '#/components/schemas/orgMember'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    orgMemberAdd:
      description: MemberAdd is the payload for adding organization member
      properties:
        role:
          description: The name of the role in the organization
          type: string
          x-nullable: false
        userName:
          description: The name of the user
          type: string
          x-nullable: false
      required:
        - role
        - userName
      type: object
    orgMemberUpdate:
      description: Org Member update
      properties:
        role:
          description: The role of the User in the Org. Required
          type: string
      required:
        - role
      type: object
    permission:
      description: Permission information
      type: object
      properties:
        name:
          description: The name of the permission
          type: string
        group:
          description: The group of the permission
          type: string
        description:
          description: The description of the permission
          type: string
    permissionList:
      description: PermissionList is a list of Permissions
      properties:
        items:
          description: Items is the list of Permission objects in the list
          items:
            $ref: '#/components/schemas/permission'
          type: array
      required:
        - items
      type: object
    eventFilterType:
      description: Console do not support orgName.
      type: string
      enum:
        - orgName
        - operator
        - eventName
        - resourceName
        - resourceType
    eventFilterOption:
      description: Represents a single filter result item.
      properties:
        title:
          description: The human-readable title of the filter option.
          type: string
        value:
          description: The actual value associated with the filter option.
          type: string
      required:
        - title
        - value
    eventFilterOptionList:
      description: A collection of filter results.
      properties:
        items:
          description: An array containing individual filter result items.
          type: array
          items:
            $ref: '#/components/schemas/eventFilterOption'
      required:
        - items
    eventResultStatus:
      description: result status of the operation event
      enum:
        - success
        - failed
      type: string
    eventResourceType:
      description: Type of the resource
      type: string
      enum:
        - cluster
        - role
    eventSource:
      description: event source
      enum:
        - user
        - system
      type: string
    event:
      description: event is the information of operation event
      properties:
        id:
          description: ID of the event
          type: string
        resourceId:
          description: ID of the resource
          type: string
        resourceType:
          $ref: '#/components/schemas/eventResourceType'
        resourceName:
          description: Name of the resource
          type: string
        operator:
          description: operator of the event, if source is user, operator is user name; if source is system, operator is system name
          type: string
        operatorId:
          description: The user ID of the operator
          type: string
        details:
          description: Details will include the extra event info, such as update cluster which field, OpsRequest content etc
          type: string
        hasTask:
          description: hasTask is true if the event has a task
          type: boolean
        result:
          description: result of the operation event
          type: string
        eventName:
          description: Event name is OpsRequest name or cluster operation name
          type: string
        displayName:
          description: Display name is custom operation name
          type: string
        orgName:
          description: The org of the event
          type: string
        resultStatus:
          $ref: '#/components/schemas/eventResultStatus'
        source:
          $ref: '#/components/schemas/eventSource'
        end:
          description: event end time
          format: date-time
          type: string
        start:
          description: event start time
          format: date-time
          type: string
        createdAt:
          description: event created time
          format: date-time
          type: string
      type: object
    paginationResult:
      description: Pagination information
      properties:
        page:
          description: Current page number (1-based)
          type: integer
          minimum: 1
        pageSize:
          description: Number of records per page
          type: integer
          minimum: 1
        total:
          description: Total number of records
          type: integer
          minimum: 0
      required:
        - page
        - pageSize
        - total
      type: object
    eventList:
      description: EventList is a list of operation event objects
      properties:
        items:
          description: Items is the list of operation event objects in the list
          items:
            $ref: '#/components/schemas/event'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResult'
      required:
        - items
      type: object
    orgParameter:
      description: org parameter item
      type: object
      required:
        - id
        - orgId
        - name
        - category
        - type
        - constraints
        - value
        - description
      properties:
        id:
          type: string
          description: org parameter id
        orgId:
          type: string
          description: org id
        name:
          type: string
          description: org parameter name
        category:
          type: string
          description: org parameter category
        type:
          type: string
          description: type of org parameter value
        constraints:
          type: object
          description: org parameter constraints including min, max, enum, default value
          properties:
            min:
              type: string
              description: org parameter min value
            max:
              type: string
              description: org parameter max value
            enum:
              type: array
              items:
                type: string
              description: org parameter enum constraints
            default:
              type: string
              description: org parameter default value
        description:
          type: string
          description: org parameter description
        value:
          type: string
          description: org parameter value
    orgParameterList:
      description: org parameter list
      type: array
      items:
        $ref: '#/components/schemas/orgParameter'
    orgResourceQuota:
      description: org resource quota
      type: object
      required:
        - cpu
        - memory
        - storage
        - clusters
      properties:
        cpu:
          type: number
          description: Maximum available vCPU. if set to 0, no limit
          x-nullable: false
        memory:
          type: number
          description: Maximum available memory in GB. if set to 0, no limit
          x-nullable: false
        storage:
          type: number
          description: Maximum available storage in GB. if set to 0, no limit
          x-nullable: false
        clusters:
          type: object
          description: Number of the clusters. key is engine type, values is the maximum number of engine
          additionalProperties:
            type: integer
            description: Maximum number of clusters for the engine type
    orgResourceQuotaAndUsage:
      description: org resource quota
      type: object
      required:
        - cpu
        - memory
        - storage
        - clusters
        - usage
      properties:
        cpu:
          type: number
          description: Maximum available vCPU. if set to 0, no limit
          x-nullable: false
        memory:
          type: number
          description: Maximum available memory in GB. if set to 0, no limit
          x-nullable: false
        storage:
          type: number
          description: Maximum available storage in GB. if set to 0, no limit
          x-nullable: false
        clusters:
          type: object
          description: Number of the clusters. key is engine type, values is the maximum number of engine
          x-nullable: false
          additionalProperties:
            type: integer
            description: Maximum number of clusters for the engine type
        usage:
          $ref: '#/components/schemas/orgResourceQuota'
    networkMode:
      enum:
        - HostNetwork
        - NodePort
        - FixedPodIP
        - HeadlessService
        - LoadBalancer
      type: string
    networkConfig:
      type: object
      title: NetworkConfig
      description: Configuration of networking for this environment
      properties:
        nodePortEnabled:
          description: Enable node port service for this environment
          type: boolean
          default: true
        lbEnabled:
          description: Enable load balancer service for this environment
          type: boolean
          default: true
        internetLBEnabled:
          description: Enable the Internet load balancer service for this environment
          type: boolean
          default: true
        networkModes:
          type: array
          items:
            $ref: '#/components/schemas/networkMode'
          description: Network modes of the environment
    environmentState:
      type: string
      description: Output only. State of the Environment resource
      enum:
        - PENDING
        - REGISTERED
        - PROVISIONING
        - NOTREADY
        - READY
        - WARNING
        - UNREACHABLE
        - DELETING
        - OUTOFSTOCK
        - UPDATING
    environmentType:
      type: string
      description: Type of this environment
      enum:
        - public
        - private
    clusterValidationPolicy:
      type: string
      description: Cluster operation validation policy, such as create, hscale, vscale, etc.
      enum:
        - Disabled
        - ValidateOnly
        - ForbiddenExecute
      default: ValidateOnly
    environment:
      description: Environment info
      properties:
        provider:
          description: Provider
          title: Provider
          type: string
        region:
          description: Region
          title: Region
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          minItems: 1
          type: array
        networkConfig:
          $ref: '#/components/schemas/networkConfig'
        createdAt:
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the context
          type: string
        id:
          format: uuid
          type: string
          description: environment id
        name:
          description: The full, unique name of this Object in the format contexts/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
          type: string
        orgName:
          description: Organization Name
          title: Organization Name
          type: string
        state:
          $ref: '#/components/schemas/environmentState'
        type:
          $ref: '#/components/schemas/environmentType'
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        imageRegistry:
          type: string
          description: Image registry used by the environment
        extraInfo:
          type: string
          description: extra info for environment
        kbVersion:
          type: string
          description: KubeBlocks version of the environment
        namespaces:
          items:
            type: string
          default:
            - kubeblocks-cloud-ns
          type: array
          description: namespace info for environment
        podAntiAffinityEnabled:
          title: PodAntiAffinityEnabled
          description: Enable pod antiaffinity for cluster
          type: boolean
          default: true
        defaultStorageClass:
          type: string
          description: the default storageClass for the environment
        clusterValidationPolicy:
          $ref: '#/components/schemas/clusterValidationPolicy'
      required:
        - provider
        - region
        - availabilityZones
        - createdAt
        - id
        - name
        - type
        - orgName
        - state
        - updatedAt
        - defaultStorageClass
      type: object
    environmentList:
      description: EnvironmentList is a list of Environments
      properties:
        items:
          description: Items is the list of Environment objects in the list
          items:
            $ref: '#/components/schemas/environment'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    stringList:
      description: Represents a list of strings.
      items:
        type: string
      type: array
    storageClassInfo:
      description: StorageClassInfo provides detailed information about a specific storage class.
      properties:
        name:
          type: string
          description: the name of the storage class
        creationTimestamp:
          type: string
          description: the creation time of the storage class
        provisioner:
          type: string
          description: the provisioner of the storage class
        parameters:
          type: object
          additionalProperties:
            type: string
          description: the parameters of the storage class
        labels:
          type: object
          additionalProperties:
            type: string
          description: the labels of the storage class
        annotations:
          type: object
          description: the annotations of the storage class
          additionalProperties:
            type: string
        reclaimPolicy:
          type: string
          description: the reclaim policy of the storage class
        allowVolumeExpansion:
          type: boolean
          description: whether allow volume expansion
        volumeBindingMode:
          type: string
          description: the volume binding mode of the storage class
        pvcCount:
          type: string
          description: the number of PVCs
        allowClone:
          type: boolean
          description: whether allow clone
        allowSnapshot:
          type: boolean
          description: whether allow snapshot
        isDefaultClass:
          type: boolean
          description: whether is default class
        type:
          type: string
          description: the type of the storage class
        hostPath:
          description: the host path when using local storage provisioner
          type: string
        mountOptions:
          type: array
          items:
            type: string
          description: the mount options of the storage class
        createdAt:
          nullable: true
          type: string
          format: date-time
          description: the creation time of the storage class
        description:
          type: string
          description: the description of the storage class
        displayName:
          type: string
          description: the display name of the storage class
        enabled:
          type: boolean
          description: whether the storage class is enabled
        id:
          type: string
          description: the id of the storage class
        updatedAt:
          nullable: true
          type: string
          format: date-time
          description: the update time of the storage class
      required:
        - name
        - creationTimestamp
        - provisioner
        - reclaimPolicy
        - allowVolumeExpansion
        - volumeBindingMode
        - pvcCount
        - allowClone
        - allowSnapshot
        - isDefaultClass
        - type
        - description
        - displayName
        - enabled
        - id
      type: object
    storageClassList:
      description: StorageClassList stands for stats for storage classes.
      properties:
        items:
          description: the list of storage classes
          type: array
          items:
            $ref: '#/components/schemas/storageClassInfo'
      type: object
    loadBalancerAvailableType:
      description: Whether the loadbalancer is available in the environment.
      type: string
      enum:
        - Available
        - Unavailable
        - Checking
        - Unknown
    loadBalancer:
      description: The load balancer info
      properties:
        available:
          $ref: '#/components/schemas/loadBalancerAvailableType'
      required:
        - available
      type: object
    vipPool:
      description: VIP Pool
      properties:
        addresses:
          description: IP Addresses
          title: IP Addresses
          type: string
        id:
          description: ID of VIP Pool
          title: ID
          type: object
        total:
          description: Total number of IP addresses
          format: int64
          type: integer
        used:
          description: Used number of IP addresses
          format: int64
          type: integer
        usedIPs:
          description: Used IP addresses
          type: array
          items:
            type: string
        availableIPs:
          description: Used IP addresses
          type: array
          items:
            type: string
      required:
        - addresses
        - total
        - used
      type: object
    vipPoolList:
      description: vipPoolList is a list of vip pools
      properties:
        items:
          description: Items is the list of vip pool objects in the list
          items:
            $ref: '#/components/schemas/vipPool'
          type: array
      required:
        - items
      type: object
    nodeGroup:
      required:
        - name
        - nodes
      type: object
      description: NodeGroup creation info
      properties:
        name:
          type: string
          description: The full, unique name of this Object, name part must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc'
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
          format: string
        description:
          type: string
          description: the description of the node group
        nodes:
          items:
            type: string
            description: Node name (e.g. 'MyName',  or 'my.name',  or '123-abc')
            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
            format: string
          type: array
          description: the nodes of the node group
    resourceStats:
      description: ResourceStats holds the requests, limits, and available stats for a resource.
      properties:
        allocatable:
          description: The amount of CPU or Memory resources that are available on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        limits:
          description: The maximum number of CPU or Memory resources pods are allowed to use on the node.  Unit is GiB for memory and Cores for CPU
          format: double
          type: number
        requests:
          description: The number of CPU or Memory resources requested by pods running on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        usage:
          description: The amount of CPU or Memory resources that are already used on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        capacity:
          description: The total amount of physical resources available on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
      required:
        - usage
      type: object
    nodeResourceStats:
      description: ResourceStats holds the requests, limits, and available stats for a resource.
      properties:
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        filesystemStats:
          $ref: '#/components/schemas/resourceStats'
        name:
          description: Name of the node.
          type: string
      required:
        - cpuStats
        - memoryStats
        - name
      type: object
    nodeResourceStatsList:
      description: NodeResourceStatsList is a list of NodeResourceStats
      properties:
        items:
          description: Items is the list of NodeResourceStats objects in the list
          items:
            $ref: '#/components/schemas/nodeResourceStats'
          type: array
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - items
        - updatedAt
      type: object
    environmentModuleStatus:
      type: string
      description: Status of environment module
      enum:
        - Running
        - Updating
        - Error
        - Disabled
        - Enabled
    hostingStatus:
      type: string
      description: Hosting status (Hostable, Non-hostable, Hosted). When hosting_status is Hosted, cluster_info will be returned
      enum:
        - Hostable
        - Non-hostable
        - Hosted
    clusterInfo:
      type: object
      description: Cluster information
      properties:
        clusterName:
          type: string
          description: The name of the cluster
        clusterDefinition:
          type: string
          description: The definition of the cluster
        orgName:
          type: string
          description: The organization name
    localizedDescription:
      type: object
      properties:
        zh-CN:
          type: string
          x-nullable: true
        en-US:
          type: string
          x-nullable: true
    environmentModule:
      type: object
      description: Single environment module information
      properties:
        name:
          type: string
          description: Environment module name
        version:
          type: string
          description: Environment module version
        status:
          $ref: '#/components/schemas/environmentModuleStatus'
        hostingStatus:
          $ref: '#/components/schemas/hostingStatus'
        replicas:
          type: integer
          description: Number of replicas
        location:
          type: string
          description: Deployment location
        clusterInfo:
          $ref: '#/components/schemas/clusterInfo'
          description: Cluster information, only returned when hosting_status is Hosted
        description:
          $ref: '#/components/schemas/localizedDescription'
        optional:
          type: boolean
          description: indicate module is optional
      required:
        - name
        - status
    environmentModuleInfo:
      type: object
      description: Environment module information in an environment
      properties:
        environmentId:
          type: string
          description: Environment ID
        lastUpdated:
          type: string
          format: date-time
          description: Last update time of the data
        environmentModules:
          type: array
          items:
            $ref: '#/components/schemas/environmentModule'
    benchmarkType:
      type: string
      description: Type of benchmark
      enum:
        - pgbench
        - sysbench
        - tpcc
        - tpch
        - ycsb
    benchmarkStatus:
      type: string
      description: the status of benchmark
      enum:
        - Pending
        - Running
        - Completed
        - Failed
    benchmark:
      description: Benchmark is the benchmark object
      type: object
      properties:
        id:
          type: string
          description: ID of benchmark
        name:
          type: string
          description: Name of benchmark
        type:
          $ref: '#/components/schemas/benchmarkType'
        config:
          type: string
          description: Config of benchmark
        prepareLog:
          type: string
          description: the log of benchmark in prepare stage
        runLog:
          type: string
          description: the log of benchmark in run stage
        cleanupLog:
          type: string
          description: the log of benchmark in cleanup stage
        result:
          type: string
          description: the result of benchmark, only available when benchmark is complete
        message:
          type: string
          description: the message of benchmark, only available when benchmark is failed
        cluster:
          type: string
          description: the cluster name
        clusterID:
          type: string
          description: the cluster id
        command:
          type: string
          description: the actual command executed during the benchmark run stage
        database:
          type: string
          description: the database name
        completionTimestamp:
          format: date-time
          type: string
          description: the completion timestamp of benchmark
        createdAt:
          format: date-time
          type: string
          description: the create timestamp of benchmark
        status:
          $ref: '#/components/schemas/benchmarkStatus'
    benchmarkList:
      description: BenchmarkList is a list of benchmarks
      type: array
      items:
        $ref: '#/components/schemas/benchmark'
    deleteBenchOption:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    pgbenchStep:
      type: string
      description: Step of pgbench
      default: all
      enum:
        - prepare
        - run
        - cleanup
        - all
    pgbench:
      description: pgbench is the pgbench benchmark object
      required:
        - address
        - cluster
        - database
        - password
        - username
      type: object
      properties:
        step:
          $ref: '#/components/schemas/pgbenchStep'
        limitCpu:
          type: string
          description: the cpu limit for test container
          default: '1'
        limitMemory:
          type: string
          description: the memory limit for test container
          default: 2Gi
        requestCpu:
          type: string
          description: the cpu request for test container
          default: '0.25'
        requestMemory:
          type: string
          description: the memory request for test container
          default: 0.5Gi
        name:
          type: string
          description: the name of benchmark
        cluster:
          type: string
          description: the cluster name
        database:
          type: string
          description: the database name
        username:
          type: string
          description: Username for database
        password:
          type: string
          description: Password for database
        address:
          type: string
          description: Address for database
        scale:
          type: integer
          description: Scale of pgbench
        clients:
          type: integer
          description: Number of clients to run
        threads:
          type: integer
          description: Number of threads to use
        duration:
          type: integer
          description: the seconds of test duration
        selectOnly:
          type: boolean
          description: Run select only test
          default: false
        extraArgs:
          type: string
          description: Extra arguments for pgbench
    sysbenchStep:
      type: string
      description: Step of sysbench
      default: all
      enum:
        - prepare
        - run
        - cleanup
        - all
    sysbenchTestType:
      type: string
      description: Test type for sysbench
      default: oltp_read_write
      enum:
        - oltp_delete
        - oltp_insert
        - oltp_point_select
        - oltp_read_only
        - oltp_read_write
        - oltp_update_index
        - oltp_update_non_index
        - oltp_write_only
        - select_random_points
        - select_random_ranges
        - bulk_insert
        - oltp_read_write_pct
    sysbench:
      description: sysbench is the sysbench benchmark object
      required:
        - address
        - cluster
        - database
        - password
        - username
      type: object
      properties:
        step:
          $ref: '#/components/schemas/sysbenchStep'
        limitCpu:
          type: string
          description: the cpu limit for test container
          default: '1'
        limitMemory:
          type: string
          description: the memory limit for test container
          default: 2Gi
        requestCpu:
          type: string
          description: the cpu request for test container
          default: '0.25'
        requestMemory:
          type: string
          description: the memory request for test container
          default: 0.5Gi
        name:
          type: string
          description: the name of benchmark
        cluster:
          type: string
          description: the cluster name
        database:
          type: string
          description: the database name
        threads:
          type: integer
          description: Number of threads to use
          nullable: true
        duration:
          type: integer
          description: the seconds of test duration
          nullable: true
        tableSize:
          type: integer
          description: Number of rows per table
          nullable: true
        tableNum:
          type: integer
          description: Number of tables
          nullable: true
        testType:
          $ref: '#/components/schemas/sysbenchTestType'
        readPercent:
          type: integer
          description: Percentage of reads, only used for oltp_read_write_pct
          nullable: true
        writePercent:
          type: integer
          description: Percentage of writes, only used for oltp_read_write_pct
          nullable: true
        username:
          type: string
          description: Username for database
        password:
          type: string
          description: Password for database
        address:
          type: string
          description: Address for database
        extraArgs:
          type: string
          description: Extra arguments for sysbench
    tpccStep:
      type: string
      description: Step of sysbench
      default: all
      enum:
        - prepare
        - run
        - cleanup
        - all
    tpcc:
      description: tpcc is the tpcc benchmark object
      required:
        - address
        - cluster
        - database
        - password
        - username
      type: object
      properties:
        step:
          $ref: '#/components/schemas/tpccStep'
        limitCpu:
          type: string
          description: the cpu limit for test container
          default: '1'
        limitMemory:
          type: string
          description: the memory limit for test container
          default: 2Gi
        requestCpu:
          type: string
          description: the cpu request for test container
          default: '0.25'
        requestMemory:
          type: string
          description: the memory request for test container
          default: 0.5Gi
        name:
          type: string
          description: the name of benchmark
        cluster:
          type: string
          description: the cluster name
        database:
          type: string
          description: the database name
        username:
          type: string
          description: Username for database
        password:
          type: string
          description: Password for database
        address:
          type: string
          description: Address for database
        threads:
          type: integer
          description: Number of threads to use
          nullable: true
        warehouses:
          type: integer
          description: Number of warehouses
          nullable: true
        duration:
          type: integer
          description: the minutes of test duration
          nullable: true
        limitTxPerMin:
          type: integer
          description: limit the number of transactions per minute, 0 means no limit
        newOrderWeight:
          type: integer
          description: Percentage of new order transactions
          nullable: true
        paymentWeight:
          type: integer
          description: Percentage of payment transactions
          nullable: true
        orderStatusWeight:
          type: integer
          description: Percentage of order status transactions
          nullable: true
        deliveryWeight:
          type: integer
          description: Percentage of delivery transactions
          nullable: true
        stockLevelWeight:
          type: integer
          description: Percentage of stock level transactions
          nullable: true
        loadWorkers:
          type: integer
          description: number of parallel threads used to create initial content
          default: 4
        runTxnsPerTerminal:
          type: integer
          description: number of transactions to run per thread
          nullable: true
        extraArgs:
          type: string
          description: Extra arguments for tpcc
    ycsbStep:
      type: string
      description: Step of benchmark
      default: all
      enum:
        - prepare
        - run
        - cleanup
        - all
    ycsbRedisMode:
      type: string
      description: Redis mode
      enum:
        - single
        - sentinel
        - cluster
    ycsb:
      description: ycsb is the ycsb benchmark object
      required:
        - address
        - cluster
        - password
        - username
      type: object
      properties:
        step:
          $ref: '#/components/schemas/ycsbStep'
        limitCpu:
          type: string
          description: the cpu limit for test container
          default: '1'
        limitMemory:
          type: string
          description: the memory limit for test container
          default: 2Gi
        requestCpu:
          type: string
          description: the cpu request for test container
          default: '0.25'
        requestMemory:
          type: string
          description: the memory request for test container
          default: 0.5Gi
        name:
          type: string
          description: the name of benchmark
        database:
          type: string
          description: the database name
          default: test
        cluster:
          type: string
          description: the cluster name
        username:
          type: string
          description: Username for database
        password:
          type: string
          description: Password for database
        address:
          type: string
          description: Address for database
        recordCount:
          type: integer
          description: Number of records to load into database
          nullable: true
        operationCount:
          type: integer
          description: Number of operations to perform
          nullable: true
        readProportion:
          type: integer
          description: Percentage of read operations
          nullable: true
        updateProportion:
          type: integer
          description: Percentage of update operations
          nullable: true
        insertProportion:
          type: integer
          description: Percentage of insert operations
        readModifyWriteProportion:
          type: integer
          description: Percentage of read-modify-write operations
        scanProportion:
          type: integer
          description: Percentage of scan operations
        threads:
          type: integer
          description: Number of client threads to run
          nullable: true
        extraArgs:
          type: string
          description: Extra arguments for ycsb
        redisMode:
          $ref: '#/components/schemas/ycsbRedisMode'
        redisSentinelMaster:
          type: string
          description: Redis sentinel master
        redisSentinelUsername:
          type: string
          description: Redis sentinel username
        redisSentinelPassword:
          type: string
          description: Redis sentinel password
    clusterType:
      title: ClusterType
      type: string
      nullable: true
      description: Describes the type of cluster, [Normal] normal cluster; [DisasterRecovery] disaster recovery cluster
      default: Normal
      enum:
        - Normal
        - DisasterRecovery
    clusterListItem:
      description: KubeBlocks cluster information
      properties:
        cloudProvider:
          description: Cloud Provider
          type: string
        cloudRegion:
          description: Cloud Provider
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        createdAt:
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        displayName:
          description: Display name of cluster.
          type: string
        engine:
          description: Cluster Application Engine
          type: string
        mode:
          description: Cluster topology mode
          type: string
        environmentName:
          description: Environment Name
          type: string
        environmentDisplayName:
          description: Environment Display Name
          type: string
        id:
          description: ID of cluster
          type: string
        name:
          description: Name of cluster. Name must be unique within an Org
          type: string
        parentId:
          title: ParentId
          type: string
          nullable: true
          description: When two clusters have a relationship, parentId records the parent cluster id.Can be empty when there is no relationship
        parentName:
          title: ParentName
          type: string
          nullable: true
          description: the name of parent cluster
        parentDisplayName:
          title: ParentDisplayName
          type: string
          nullable: true
          description: the display name of parent cluster
        clusterType:
          $ref: '#/components/schemas/clusterType'
        delay:
          title: Delay
          type: number
          format: double
          nullable: true
        status:
          description: Cluster Status
          type: string
        terminationPolicy:
          description: Cluster termination policy
          type: string
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        version:
          description: Cluster Application Version
          type: string
        classCode:
          description: Cluster main component classCode
          type: string
        storage:
          description: Cluster main component storage
          type: string
        codeShort:
          description: Cluster main component codeShort
          type: string
        orgName:
          description: Org Name
          type: string
      required:
        - cloudProvider
        - createdAt
        - engine
        - environmentName
        - id
        - name
        - status
        - terminationPolicy
        - updatedAt
        - version
      type: object
    clusterList:
      description: ClusterList is a list of KubeBlocks clusters
      properties:
        items:
          description: Items is the list of KubeBlocks cluster objects in the list
          items:
            $ref: '#/components/schemas/clusterListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    clusterLicense:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        expiredAt:
          type: string
          format: date-time
        key:
          type: string
          format: binary
    parameterTemplatePartition:
      enum:
        - default
        - custom
      type: string
    paramTplsItem:
      description: the item of the parameter template
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        paramTplName:
          title: Parameter Template Name
          type: string
          description: name of assigned parameter template
        paramTplID:
          type: string
          description: id of parameter template
        paramTplPartition:
          $ref: '#/components/schemas/parameterTemplatePartition'
    paramTpls:
      type: array
      description: Items is the list of parameter template in the list
      items:
        $ref: '#/components/schemas/paramTplsItem'
    clusterTerminationPolicy:
      title: Termination Policy
      type: string
      description: The termination policy of cluster.
      default: Delete
      enum:
        - DoNotTerminate
        - Halt
        - Delete
        - WipeOut
    ioQuantity:
      description: IO Quantity describes IOPS and BPS of a volume
      properties:
        readIOPS:
          type: integer
          nullable: true
          format: int64
        writeIOPS:
          type: integer
          format: int64
          nullable: true
        readBPS:
          type: integer
          nullable: true
          format: int64
        writeBPS:
          type: integer
          nullable: true
          format: int64
      type: object
    componentVolumeItem:
      description: ComponentVolumeItem is the information of a component volume
      type: object
      properties:
        name:
          type: string
          description: volume name
        storage:
          title: Storage(Gi)
          minimum: 1
          type: number
          description: Storage size, the unit is Gi.
          format: double
        ioLimits:
          $ref: '#/components/schemas/ioQuantity'
        ioReserves:
          $ref: '#/components/schemas/ioQuantity'
    componentItemCreate:
      type: object
      description: ComponentItem is the information of a component
      required:
        - component
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        compNum:
          title: CompNum
          type: integer
          description: The number of components, if often used as shards number
        replicas:
          title: Replicas
          type: integer
          description: The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.
        classCode:
          type: string
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
          minimum: 0
          exclusiveMinimum: true
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
          minimum: 0
          exclusiveMinimum: true
        storageClass:
          title: StorageClass
          type: string
          description: StorageClass name
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/componentVolumeItem'
        systemAccountSecretName:
          description: The name of the secret that contains the system account credentials
          type: string
    componentsCreate:
      type: array
      description: Components is the list of components
      items:
        $ref: '#/components/schemas/componentItemCreate'
    initOptionItem:
      description: InitOptionItem is the information of init option
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix'
        initParams:
          type: object
          additionalProperties:
            type: string
        specName:
          type: string
          description: config spec name
    initOptions:
      type: array
      description: InitOptions is the list of init option
      items:
        $ref: '#/components/schemas/initOptionItem'
    backupRetentionPolicy:
      type: string
      description: backup retention policy when cluster is deleted
      enum:
        - All
        - LastOne
        - WipeOut
    clusterBackup:
      description: clusterBackup is the payload for cluster backup
      properties:
        pitrEnabled:
          default: false
          description: PITREnabled or not
          type: boolean
        continuousBackupMethod:
          description: continuous backup method for pitr
          type: string
        autoBackup:
          default: false
          description: autoBackup or not
          type: boolean
        autoBackupMethod:
          description: name of the backup method
          type: string
        backupRepo:
          description: backupRepoName is the name of backupRepo and it is used to store the backup data
          type: string
        cronExpression:
          description: cronExpression specifies the cron expression
          type: string
        retentionPeriod:
          description: retentionPeriod specifies the retention period
          type: string
        retentionPolicy:
          $ref: '#/components/schemas/backupRetentionPolicy'
        snapshotVolumes:
          description: snapshotVolumes specifies whether to take snapshots of persistent volumes to back up
          type: boolean
          nullable: true
        incrementalBackupEnabled:
          description: specify whether to enable incremental backup
          default: false
          type: boolean
        incrementalCronExpression:
          description: the crop expression for incremental backup schedule
          type: string
      type: object
    serviceDescriptor:
      type: object
      description: serviceDescriptor that will be used in serviceRef. The field definition is in line with kubeblocks.
      properties:
        host:
          type: string
        port:
          type: string
        endpoint:
          type: string
        username:
          type: string
        password:
          type: string
    serviceRef:
      type: object
      description: |
        defines a serviceRef that references service provided by other cluster or external service.
        Only one of cluster or serviceDescriptor field should be set.
      required:
        - name
      properties:
        name:
          type: string
          description: refers to the serviceRef name defined in engineoption
        cluster:
          type: string
          description: |
            the cluster name that will be used in serviceRef. The referenced cluster should 
            be at the same organization as the current cluster.
        serviceDescriptor:
          $ref: '#/components/schemas/serviceDescriptor'
    clusterObjectStorageConfig:
      type: object
      description: Specify the object storage config for cluster like starrocks
      required:
        - serviceRef
        - bucket
      properties:
        serviceRef:
          $ref: '#/components/schemas/serviceRef'
        bucket:
          type: string
          description: the bucket name for the object storage
        usePathStyle:
          type: boolean
          description: whether the object storage is using path-style. If false, virtual host style will be used.
        region:
          type: string
          description: region to use. If using a s3-compatible service that does not require a region (like minio), leave it blank.
    clusterCreate:
      required:
        - engine
        - environmentName
        - name
      type: object
      properties:
        parentId:
          title: ParentId
          type: string
          nullable: true
          description: When two clusters have a relationship, parentId records the parent cluster id.Can be empty when there is no relationship
        clusterType:
          $ref: '#/components/schemas/clusterType'
        orgName:
          title: Org Name
          type: string
          description: Org Name
        environmentName:
          title: Environment Name
          type: string
          description: Environment Name
        project:
          title: Project
          type: string
          default: kubeblocks-cloud-ns
          description: Name of project, it is the alias of environment namespace
        name:
          title: Name
          type: string
          description: Name of cluster. Name must be unique within an Org
        engine:
          title: Engine
          type: string
          description: Cluster Application Engine
        license:
          $ref: '#/components/schemas/clusterLicense'
        paramTpls:
          $ref: '#/components/schemas/paramTpls'
        version:
          title: Version
          type: string
          description: Cluster Application Version
        terminationPolicy:
          $ref: '#/components/schemas/clusterTerminationPolicy'
        mode:
          title: Mode
          type: string
          description: Cluster topology mode
        components:
          $ref: '#/components/schemas/componentsCreate'
        extra:
          title: Extra
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Extra configuration for cluster. This will be added to helm values to render the cluster chart.
        initOptions:
          $ref: '#/components/schemas/initOptions'
        singleZone:
          title: Single availability zones
          description: Use single availability zones
          type: boolean
          default: false
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        backup:
          description: Set cluster backup
          $ref: '#/components/schemas/clusterBackup'
        nodeGroup:
          title: NodeGroup
          description: Specify a NodeGroup for the cluster
          type: string
          nullable: true
        displayName:
          description: Display name of cluster.
          type: string
        static:
          description: if cluster is static cluster
          type: boolean
        networkMode:
          description: Specify the network mode for intra-cluster communication
          $ref: '#/components/schemas/networkMode'
        serviceRefs:
          type: array
          items:
            $ref: '#/components/schemas/serviceRef'
        objectStorageConfig:
          $ref: '#/components/schemas/clusterObjectStorageConfig'
      description: KubeBlocks cluster information
    componentItem:
      type: object
      description: ComponentItem is the information of a component
      properties:
        name:
          type: string
          description: component name
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        compNum:
          title: CompNum
          type: integer
          description: number of components
        replicas:
          title: Replicas
          type: integer
          description: The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.
        classCode:
          type: string
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
        storageClass:
          title: StorageClass
          type: string
          description: StorageClass name
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/componentVolumeItem'
        codeShort:
          description: Cluster main component codeShort
          type: string
        systemAccountSecretName:
          description: The name of the secret that contains the system account credentials
          type: string
    components:
      type: array
      description: Components is the list of components
      items:
        $ref: '#/components/schemas/componentItem'
    cluster:
      required:
        - engine
        - environmentName
        - name
      type: object
      properties:
        id:
          title: ID
          type: string
          description: Cluster ID
        parentId:
          title: ParentId
          type: string
          nullable: true
          description: When two clusters have a relationship, parentId records the parent cluster id.Can be empty when there is no relationship
        parentName:
          title: ParentName
          type: string
          nullable: true
          description: the name of parent cluster
        parentDisplayName:
          title: ParentDisplayName
          type: string
          nullable: true
          description: the display name of parent cluster
        clusterType:
          $ref: '#/components/schemas/clusterType'
        delay:
          title: Delay
          type: number
          format: double
          nullable: true
        orgName:
          title: Org Name
          type: string
          description: Org Name
        cloudProvider:
          title: Cloud Provider
          type: string
          description: Cloud Provider
        environmentId:
          title: Environment ID
          type: string
          description: ID of the environment
        environmentName:
          title: Environment Name
          type: string
          description: Environment Name
        environmentType:
          title: Environment Type
          type: string
          description: Environment Types
        cloudRegion:
          title: Cloud Region
          type: string
          description: Cloud Region
        project:
          title: Project
          type: string
          default: kubeblocks-cloud-ns
          description: Name of project, it is the alias of environment namespace
        name:
          title: Name
          type: string
          description: Name of cluster. Name must be unique within an Org
        hash:
          title: Hash
          type: string
          description: Hash of cluster. Name must be unique within an Org
        engine:
          title: Engine
          type: string
          description: Cluster Application Engine
        license:
          $ref: '#/components/schemas/clusterLicense'
        paramTpls:
          $ref: '#/components/schemas/paramTpls'
        version:
          title: Version
          type: string
          description: Cluster Application Version
        terminationPolicy:
          $ref: '#/components/schemas/clusterTerminationPolicy'
        tlsEnabled:
          title: TLS Enabled
          type: boolean
          description: Enable the cluster to provide TLS connection or not.
          default: false
        nodePortEnabled:
          title: NodePort service enabled
          type: boolean
          description: Enable the cluster to provide NodePort service or not.
          default: false
        status:
          title: Status
          type: string
          description: Cluster Status
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
        updatedAt:
          title: UpdatedAt
          type: string
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
        mode:
          title: Mode
          type: string
          description: Cluster topology mode
        proxyEnabled:
          title: ProxyEnabled
          type: boolean
          description: Proxy Enabled
          default: false
        components:
          $ref: '#/components/schemas/components'
        extra:
          title: Extra
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Extra configuration for cluster
        initOptions:
          $ref: '#/components/schemas/initOptions'
        singleZone:
          title: Single availability zones
          description: Use single availability zones
          type: boolean
          default: false
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        podAntiAffinityEnabled:
          title: PodAntiAffinityEnabled
          description: Enable pod antiaffinity for cluster
          type: boolean
          default: true
        backup:
          description: Set cluster backup
          $ref: '#/components/schemas/clusterBackup'
        nodeGroup:
          title: NodeGroup
          description: Specify a NodeGroup for the cluster
          type: string
          nullable: true
        codeShort:
          description: Cluster main component codeShort
          type: string
        displayName:
          description: Display name of cluster.
          type: string
        static:
          description: if cluster is static cluster
          type: boolean
        networkMode:
          description: Specify the network mode for intra-cluster communication
          $ref: '#/components/schemas/networkMode'
        serviceRefs:
          description: serviceRefs used by this cluster
          type: array
          items:
            $ref: '#/components/schemas/serviceRef'
        referencedBy:
          description: this list of objects (currently, object is a cluster) that uses this cluster as a serviceRef
          type: array
          items:
            $ref: '#/components/schemas/serviceRef'
        objectStorageConfig:
          $ref: '#/components/schemas/clusterObjectStorageConfig'
      description: KubeBlocks cluster details
    clusterUpdate:
      type: object
      properties:
        terminationPolicy:
          $ref: '#/components/schemas/clusterTerminationPolicy'
        displayName:
          description: Display name of cluster.
          type: string
          nullable: true
      description: ClusterUpdate is the payload to update a KubeBlocks cluster
    instanceStorageItem:
      description: Instance storage information
      properties:
        name:
          description: Specify the name of storage, which must be unique.
          title: name
          type: string
        size:
          description: Specify the size of storage, the unit is Gi.
          title: size
          type: string
        storageClass:
          description: The name of StorageClass in use
          type: string
        ioReserves:
          $ref: '#/components/schemas/ioQuantity'
        ioLimits:
          $ref: '#/components/schemas/ioQuantity'
      required:
        - name
        - size
      type: object
    instance:
      description: Instance is the information of KubeBlocks cluster instances
      properties:
        accessMode:
          description: Access mode for instance
          type: string
        orgName:
          description: Org name
          type: string
        cloud:
          description: Cloud for instance
          type: string
        cluster:
          description: Cluster name
          type: string
        componentName:
          description: Component name
          type: string
        componentDef:
          description: ComponentDefinition name
          type: string
        component:
          description: component type, refer to componentDef and support NamePrefix
          type: string
        cpu:
          description: cpu with uint cores.
          type: string
        createdAt:
          description: created at
          type: string
        memory:
          description: Memory with uint Gi.
          type: string
        name:
          description: Instance name
          type: string
        node:
          description: node name
          type: string
        region:
          description: Region for instance
          type: string
        role:
          description: Role for instance
          type: string
        status:
          required:
            - phase
          type: object
          properties:
            phase:
              type: string
              description: The current phase of the cluster
            reason:
              type: string
              description: A brief reason for the cluster's current phase
            message:
              type: string
              description: A human-readable message indicating details about the cluster's current phase
          description: Status for instance
        storage:
          description: storage sets the storage size value mapping key
          type: array
          items:
            $ref: '#/components/schemas/instanceStorageItem'
        zone:
          description: Available zone for instance
          type: string
      required:
        - accessMode
        - cloud
        - cluster
        - component
        - cpu
        - createdAt
        - memory
        - name
        - node
        - region
        - role
        - status
        - zone
      type: object
    instanceList:
      description: ClusterList is a list of KubeBlocks clusters
      properties:
        items:
          description: Items is the list of KubeBlocks cluster objects in the list
          items:
            $ref: '#/components/schemas/instance'
          type: array
      required:
        - items
      type: object
    instanceEventItem:
      description: Instance event
      properties:
        clusterName:
          description: Cluster name of the event
          type: string
        instanceName:
          description: Instance name of the event
          type: string
        name:
          description: Name of the event
          type: string
        reason:
          description: Reason of the event
          type: string
        message:
          description: Message of the event
          type: string
        type:
          description: Type of the event
          type: string
        source:
          description: Source of the event
          type: string
        count:
          description: Count of the event
          type: integer
          format: int32
        eventTime:
          description: Last timestamp of the event
          type: string
          format: date-time
      required:
        - clusterName
        - instanceName
        - name
        - reason
        - message
        - type
        - count
        - eventTime
      type: object
    instanceEventList:
      description: Instance event list
      properties:
        items:
          description: Items is the list of instance event objects in the list
          items:
            $ref: '#/components/schemas/instanceEventItem'
          type: array
      required:
        - items
      type: object
    haHistoryResponse:
      description: hahistory is the payload to get ha history of a KubeBlocks cluster
      properties:
        componentName:
          type: string
        records:
          items:
            properties:
              StartAt:
                type: integer
              EndAt:
                type: integer
              OldPrimary:
                type: string
              NewPrimary:
                type: string
              Reason:
                type: string
              UserID:
                type: string
              UserName:
                type: string
            required:
              - StartAt
          type: array
      type: object
    sortType:
      description: Represents the type of sorting.
      enum:
        - asc
        - desc
      type: string
    accountListRoleType:
      description: The user role name, should be one of [ROOT, SUPERUSER, BASICUSER].
      enum:
        - SUPERUSER
        - BASICUSER
        - ROOT
      type: string
    privilegeType:
      title: privilegeType
      description: The type of privilege.
      type: string
      enum:
        - DBADMIN
        - READWRITE
        - READONLY
        - DDLONLY
        - DMLONLY
    privilegeListItem:
      type: object
      description: Database and its assigned privileges.
      properties:
        databaseName:
          title: databaseName
          type: string
          description: The name of the database.
        privileges:
          $ref: '#/components/schemas/privilegeType'
      required:
        - privileges
    privilegeList:
      type: array
      items:
        $ref: '#/components/schemas/privilegeListItem'
      description: A list of privileges and their databases.
    accountListItem:
      description: Cluster account information.
      properties:
        component:
          description: Component type.
          type: string
        name:
          description: The name of user.
          type: string
        password:
          description: The password of user.
          type: string
        role:
          $ref: '#/components/schemas/accountListRoleType'
        privilegesList:
          description: privileges of databases of cluster
          title: privilegesList
          $ref: '#/components/schemas/privilegeList'
        extra:
          description: extra information of account
          type: object
          additionalProperties: {}
      required:
        - name
      type: object
    accountList:
      items:
        $ref: '#/components/schemas/accountListItem'
      type: array
    accountRoleType:
      default: SUPERUSER
      description: Role name should be one of [BASICUSER, SUPERUSER, ROOT].
      enum:
        - SUPERUSER
        - BASICUSER
        - ROOT
      title: role
      type: string
    account:
      description: Cluster account information
      properties:
        privilegesList:
          description: privileges of databases of cluster
          title: privilegesList
          $ref: '#/components/schemas/privilegeList'
        component:
          description: Specify the name of component to be connected. If not specified, pick the first one.
          title: component
          type: string
        instance:
          description: Specify the name of instance to be connected.
          title: instance
          type: string
        name:
          description: Specify the name of user, which must be unique.
          title: name
          type: string
        password:
          description: Specify the password of user. The default value is empty, which means a random password will be generated.
          title: password
          type: string
        role:
          $ref: '#/components/schemas/accountRoleType'
        extra:
          description: extra information of account
          type: object
          additionalProperties: {}
      required:
        - name
        - role
      type: object
    databaseItem:
      description: Cluster database information
      properties:
        name:
          description: Specify the name of database, which must be unique.
          title: name
          type: string
        options:
          description: Specify the options of database.
          title: options
          type: object
          additionalProperties: {}
      required:
        - name
      type: object
    databaseList:
      description: DatabaesList is a list of Databaes
      properties:
        items:
          description: Items is the list of Databases objects in the list
          items:
            $ref: '#/components/schemas/databaseItem'
          type: array
      required:
        - items
      type: object
    database:
      description: Cluster database information
      properties:
        component:
          description: component type
          title: component
          type: string
        name:
          description: Specify the name of database, which must be unique.
          title: name
          type: string
        description:
          description: Description of the database.
          title: description
          type: string
        options:
          description: Specify the options of database.
          title: options
          type: object
          additionalProperties:
            type: string
      required:
        - name
      type: object
    reconfigureCreate:
      description: ReconfigureCreate is the payload to reconfigure a KubeBlocks cluster
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        configFileName:
          description: config file name
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Specify parameters list to be updated
          type: object
        rawContent:
          description: The raw content of the configuration file
          type: string
      required:
        - component
      type: object
    opsRequestName:
      description: OpsRequestName is the name of a KubeBlocks OpsRequest
      properties:
        opsRequestName:
          type: string
        dependentOpsName:
          type: string
        clusterTaskId:
          type: string
        dependentClusterTaskId:
          type: string
      required:
        - opsRequestName
      type: object
    opsRestart:
      description: OpsRestart is the payload to restart a KubeBlocks cluster
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        preConditionDeadlineSeconds:
          description: Specifies the maximum time in seconds that the OpsRequest will wait for its pre-conditions to be met before it aborts the operation
          type: integer
          nullable: true
          minimum: 0
      type: object
    opsRebuildInstanceInstanceParam:
      description: instance params for RebuildInstance ops
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Pod name of the instance
        targetNodeName:
          type: string
          description: The instance will rebuild on the specified node. If not set, it will rebuild on a random node.
    opsRebuildInstance:
      description: rebuild the instances of the cluster.
      properties:
        ignoreRoleCheck:
          type: boolean
          description: will ignore role check during rebuilding instance.
        requests:
          items:
            properties:
              backupName:
                type: string
              instances:
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/opsRebuildInstanceInstanceParam'
            required:
              - instances
          type: array
      type: object
    nodeStatus:
      type: string
      description: Status of the node
      enum:
        - Ready
        - Warning
        - UnderMaintenance
        - Unschedulable
    node:
      description: node info
      properties:
        cpu:
          description: CPU cores of the node
          format: int64
          type: integer
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        hostName:
          description: Host name of the node
          type: string
        instanceType:
          description: Instance type of the node
          type: string
        ip:
          description: IP address of the node
          type: string
        memory:
          description: Memory of the node, unit is GiB
          format: int64
          type: integer
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        zone:
          description: Zone of the node
          type: string
        region:
          description: Region of the node
          type: string
        nodeGroup:
          description: Node Group of the node
          type: string
        controlPlane:
          description: node is in control plane
          type: boolean
        dataPlane:
          description: node is in data plane
          type: boolean
        status:
          $ref: '#/components/schemas/nodeStatus'
          description: Node status
      required:
        - createdAt
        - hostName
        - ip
        - status
      type: object
    nodeList:
      description: nodeList is a list of nodes
      properties:
        items:
          description: Items is the list of Org objects in the list
          items:
            $ref: '#/components/schemas/node'
          type: array
      required:
        - items
      type: object
    opsUpgrade:
      description: OpsUpgrade is the payload to upgrade a KubeBlocks cluster
      properties:
        version:
          type: string
          minLength: 1
        component:
          type: string
      required:
        - version
        - component
      type: object
    engineServiceVersions:
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        upgradeableVersions:
          type: array
          items:
            type: string
        currentVersion:
          type: string
        versions:
          type: array
          items:
            type: object
            properties:
              default:
                type: boolean
              defaultMinorVersion:
                type: string
              majorVersion:
                type: string
              minorVersions:
                type: array
                items:
                  type: string
    opsVolumeExpand:
      description: OpsVolumeExpand is the payload to expand volume for a KubeBlocks cluster
      properties:
        component:
          type: string
          minLength: 1
        volumes:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              name:
                type: string
                description: volume name
              storage:
                type: string
                description: Storage size, the unit is Gi.
            required:
              - name
              - storage
      required:
        - volumes
        - component
      type: object
    opsVScale:
      description: OpsVScale is the payload to vertically scale a KubeBlocks cluster
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        cpu:
          description: number of cpu
          type: string
        memory:
          description: memory size
          type: string
        classCode:
          description: class code of the cluster
          type: string
      type: object
    opsHScale:
      description: OpsHScale is the payload to horizontally scale a KubeBlocks cluster. It requires specifying either the number of replicas or the number of shards.
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        backupName:
          description: name of the backup to restore from
          type: string
          nullable: true
        replicas:
          description: number of replicas
          type: integer
          nullable: true
        shards:
          description: number of shards, mutually exclusive with replicas.
          type: integer
          nullable: true
        preConditionDeadlineSeconds:
          description: Specifies the maximum time in seconds that the OpsRequest will wait for its pre-conditions to be met before it aborts the operation
          type: integer
          nullable: true
          minimum: 0
      type: object
    opsPromote:
      description: OpsPromote is the payload to promote a KubeBlocks cluster
      required:
        - componentName
        - instanceName
      properties:
        componentName:
          type: string
          minLength: 1
        instanceName:
          type: string
          x-nullable: false
      type: object
    opsExposeType:
      type: string
      description: Specifies the type of exposure for the KubeBlocks cluster.
      enum:
        - vpc
        - internet
    opsExposeVPCServiceType:
      description: Specifies the type of service for the KubeBlocks cluster.
      enum:
        - LoadBalancer
        - NodePort
      type: string
      default: LoadBalancer
    opsExpose:
      description: OpsExpose is the payload to expose a KubeBlocks cluster
      properties:
        component:
          type: string
          minLength: 1
        enable:
          type: boolean
        readonly:
          type: boolean
        type:
          $ref: '#/components/schemas/opsExposeType'
        vpcServiceType:
          $ref: '#/components/schemas/opsExposeVPCServiceType'
        portsMapping:
          type: array
          items:
            type: object
            properties:
              old:
                type: integer
              new:
                type: integer
        loadBalancerIP:
          type: string
          description: The IP address of the LoadBalancer service. If not set, the IP address will be assigned by the system. Only available when vpcServiceType is LoadBalancer.
          nullable: true
        loadBalancerIPPoolID:
          type: string
          description: The IP pool ID of the LoadBalancer service. If not set, the IP pool will be assigned by the system. Only available when vpcServiceType is LoadBalancer.
          nullable: true
      required:
        - enable
        - type
        - component
      type: object
    opsLicense:
      description: OpsLicense is the payload to update a KubeBlocks cluster license
      required:
        - component
        - licenseId
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        licenseId:
          description: license ID
          type: string
          minLength: 1
      type: object
    opsParameter:
      description: custom ops parameter
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    opsCustom:
      description: OpsCustom is the payload to create a custom KubeBlocks OpsRequest
      required:
        - opsType
        - compName
      properties:
        compName:
          description: component name
          type: string
          minLength: 1
        opsType:
          description: ops definition name.
          type: string
          minLength: 1
        dependentOnOps:
          description: ops definition name.
          items:
            type: string
          type: array
        params:
          description: custom ops parameters
          type: array
          items:
            type: object
            $ref: '#/components/schemas/opsParameter'
      type: object
    customOpsTask:
      description: customOpsTask is the information of custom ops task
      properties:
        objectKey:
          description: the pod name
          type: string
        namespace:
          description: namespace of the task
          type: string
        status:
          description: status of the task
          type: string
        targetPodName:
          description: target pod name of the task
          type: string
        retries:
          description: retries of the task
          type: integer
          format: int32
      type: object
    customOpsTasks:
      description: customOpsTasks is a list of custom ops task. This field is provided when ops is `custom`.
      properties:
        items:
          description: The list of custom ops task.
          items:
            $ref: '#/components/schemas/customOpsTask'
          type: array
      type: object
    clusterTaskProgress:
      description: clusterTaskProgress is the information of the task progress
      properties:
        name:
          description: conponent name
          type: string
        group:
          description: group name
          type: string
        objectKey:
          description: the instance name
          type: string
          nullable: true
        message:
          description: message of the task progress
          type: string
        status:
          description: status of the task progress
          type: string
        startTime:
          description: start time of the task progress
          format: date-time
          type: string
          nullable: true
        endTime:
          description: end time of the task progress
          format: date-time
          type: string
          nullable: true
        customOpsName:
          description: Indicates the name of an OpsAction, Either `objectKey` or `customOpsName` must be provided. This field is provided when ops is `custom`.
          type: string
          nullable: true
        customOpsTasks:
          $ref: '#/components/schemas/customOpsTasks'
      type: object
    clusterTaskProgresses:
      description: clusterTaskProgresses is a list of task progress detail
      properties:
        items:
          description: Items is the list of task progress detail in the list
          items:
            $ref: '#/components/schemas/clusterTaskProgress'
          type: array
      type: object
    clusterTaskDetail:
      type: object
      description: taskCondition is the information of the task condition
      properties:
        reason:
          description: reason of the task condition
          type: string
        type:
          description: type of the task condition
          type: string
        status:
          description: status of the task condition
          type: string
        message:
          description: message of the task condition
          type: string
        lastTransitionTime:
          description: last transition time of the task condition
          format: date-time
          type: string
    clusterTaskDetails:
      description: taskConditions is a list of task condition
      properties:
        items:
          description: Items is the list of task condition in the list
          items:
            $ref: '#/components/schemas/clusterTaskDetail'
          type: array
      type: object
    clusterTask:
      type: object
      description: task is the information of the operation
      required:
        - name
        - namespace
        - status
        - taskType
        - progress
      properties:
        id:
          description: ID of the task
          type: string
        name:
          description: Name of the task
          type: string
        namespace:
          description: Namespace of the task
          type: string
        orgName:
          description: OrgName of the task
          type: string
        clusterName:
          description: ClusterName of the task
          type: string
        status:
          description: status of the task
          type: string
        taskType:
          description: task type
          type: string
        progress:
          description: progress of the task
          type: string
        taskProgresses:
          $ref: '#/components/schemas/clusterTaskProgresses'
        taskDetails:
          $ref: '#/components/schemas/clusterTaskDetails'
        opsLog:
          description: pod log of the custom task
          type: string
        description:
          description: description of the custom task
          type: string
        startTime:
          type: string
          format: date-time
          description: Time when the task started
        completionTime:
          type: string
          format: date-time
          description: Time when the task completed or failed
          nullable: true
    opsIoQuotas:
      description: IO Quotas describes IOPS and BPS for volumes of a KubeBlocks cluster
      properties:
        component:
          type: string
          minLength: 1
        volumes:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              name:
                type: string
                description: volume name
              ioReserves:
                $ref: '#/components/schemas/ioQuantity'
              ioLimits:
                $ref: '#/components/schemas/ioQuantity'
            required:
              - name
      required:
        - volumes
        - component
      type: object
    opsStatus:
      enum:
        - Pending
        - Creating
        - Running
        - Cancelling
        - Succeed
        - Cancelled
        - Failed
        - Aborted
      type: string
    opsType:
      enum:
        - VerticalScaling
        - HorizontalScaling
        - VolumeExpansion
        - Upgrade
        - Reconfiguring
        - Switchover
        - Restart
        - Stop
        - Start
        - Expose
        - Backup
        - Restore
        - RebuildInstance
        - Custom
      type: string
    clusterTaskList:
      description: TaskList is a list of operation task objects
      properties:
        items:
          description: Items is the list of operation task objects in the list
          items:
            $ref: '#/components/schemas/clusterTask'
          type: array
      type: object
    autohealingList:
      description: An Autohealing object in k8s
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          componentName:
            description: component to be rebuilt
            type: string
          podName:
            description: pod to be rebuilt
            type: string
          startTime:
            description: rebuild start time
            type: string
            format: date-time
          phase:
            description: current phase of rebuild job
            type: string
          started:
            description: whether the job is started
            type: boolean
          startMessage:
            type: string
          finished:
            description: whether the job is finished
            type: boolean
          finishMessage:
            type: string
          backupName:
            type: string
          rebuildInstanceOpsRequestName:
            type: string
    tag:
      description: tag info
      properties:
        id:
          description: The id of the tag
          format: int64
          type: string
        key:
          description: the key of the tag
          type: string
        value:
          description: The value corresponding to the key
          type: string
      required:
        - id
      type: object
    clusterTags:
      properties:
        clusterId:
          description: The cluster id corresponding to the tag
          type: string
        tags:
          items:
            $ref: '#/components/schemas/tag'
          type: array
      type: object
    tagUpdate:
      description: Tag update
      properties:
        key:
          description: The key of the tag
          type: string
        value:
          description: the value corresponding th the key
          type: string
        id:
          description: the id of the tag
          type: integer
          format: int64
      required:
        - key
        - value
        - id
      type: object
    orgTagsList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/tag'
          type: array
      required:
        - items
      type: object
    tagCreate:
      description: Tag create
      properties:
        clusterId:
          description: The cluster id corresponding to the tag
          type: string
        items:
          description: The key value pair of the tag needed to create
          items:
            properties:
              id:
                type: string
              key:
                type: string
                x-nullable: false
              value:
                type: string
                x-nullable: false
            required:
              - key
              - value
            type: object
          type: array
      required:
        - clusterId
        - items
      type: object
    endpointType:
      description: Type of endpoint
      type: string
      enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - PodIP
        - HostNetwork
        - PodFQDN
    endpointNetworkType:
      description: Network type of endpoint
      type: string
      enum:
        - Internet
        - Intranet
    endpoint:
      description: Endpoint is the information of cluster endpoints
      properties:
        title:
          description: title of the endpoint
          type: string
        component:
          description: Component type name
          type: string
        hosts:
          description: Endpoint hosts
          type: array
          items:
            type: string
        port:
          description: Endpoint port
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/endpointType'
        networkType:
          $ref: '#/components/schemas/endpointNetworkType'
        serviceName:
          description: Service name of endpoint
          type: string
        podService:
          description: Pod service name of endpoint
          type: boolean
        portName:
          description: Port name of endpoint
          type: string
        instances:
          description: Endpoint backend instances
          type: array
          items:
            type: string
        mutable:
          description: Whether the endpoint is mutable
          type: boolean
      required:
        - title
        - component
        - hosts
        - port
        - type
        - networkType
        - serviceName
        - portName
        - mutable
      type: object
    endpointList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of endpoint objects in the list
          items:
            $ref: '#/components/schemas/endpoint'
    metricsQueryType:
      type: string
      enum:
        - instant
        - range
    clusterMetrics:
      type: object
      description: Cluster metrics
      properties:
        value:
          type: array
          items: {}
          nullable: true
        values:
          type: array
          items:
            type: array
            items: {}
            nullable: true
    instanceDiskUsageItem:
      description: disk usage with volume name.
      properties:
        volumeName:
          description: volume name
          type: string
        diskUsage:
          description: disk usage with unit Gi
          type: string
      required:
        - volumeName
        - diskUsage
      type: object
    instanceMetrics:
      description: instance metrics
      properties:
        instanceName:
          description: the name of the instance
          type: string
        cpuUsage:
          description: cpu with uint cores.
          type: string
          nullable: true
        memoryUsage:
          description: memory with uint Gi.
          type: string
          nullable: true
        diskUsageItems:
          description: disk usage items
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/instanceDiskUsageItem'
      required:
        - instanceName
      type: object
    instanceMetricsList:
      description: instance metrics list
      properties:
        items:
          description: instanceMetrics list
          type: array
          items:
            $ref: '#/components/schemas/instanceMetrics'
      required:
        - items
      type: object
    tlsName:
      type: string
      description: Name of the TLS certificates
      enum:
        - ca
        - certificate
        - privateKey
        - keystore
        - truststore
    tlsType:
      description: TLS type
      type: string
      enum:
        - StandardTLS
        - JavaKeystore
      default: StandardTLS
    certificate:
      description: certificates and it's config
      type: object
      required:
        - type
        - name
        - content
      properties:
        name:
          description: Name of the TLS certificates
          $ref: '#/components/schemas/tlsName'
        type:
          $ref: '#/components/schemas/tlsType'
        content:
          description: Content of the TLS certificates
          type: string
        expirationDays:
          description: Expiration days for this certificate
          type: integer
          x-omitempty: true
          format: int32
        DNS:
          description: DNS name in the certificate SAN
          type: array
          x-omitempty: true
          items:
            type: string
        ipAddress:
          description: IP address in the certificate SAN
          type: array
          x-omitempty: true
          items:
            type: string
    tlsCert:
      properties:
        certificates:
          description: TLS certificates
          type: array
          items:
            $ref: '#/components/schemas/certificate'
        componentName:
          description: Component these certs belong to
          type: string
      type: object
    tlsCertList:
      items:
        $ref: '#/components/schemas/tlsCert'
      type: array
    certificateIssuer:
      description: certificate issuer
      type: string
      default: Apecloud
      enum:
        - Apecloud
        - UserSelf
    tlsOption:
      description: TLS options
      type: object
      required:
        - issuer
      properties:
        issuer:
          description: Issuer of the TLS certificates
          $ref: '#/components/schemas/certificateIssuer'
        serviceName:
          description: the service name that will be set in certificate SAN
          type: array
          items:
            type: string
          x-omitempty: true
        caContent:
          description: CA certificate content
          type: string
          x-omitempty: true
        certificateContent:
          description: Certificate content
          type: string
          x-omitempty: true
        privateKeyContent:
          description: Private key content
          type: string
          x-omitempty: true
    tlsRequest:
      type: object
      required:
        - enable
      properties:
        enable:
          description: Enable TLS or not
          type: boolean
        options:
          description: TLS options
          $ref: '#/components/schemas/tlsOption'
    clusterBackupMethod:
      description: the backup method for cluster
      properties:
        full:
          description: full backup method
          type: string
        incremental:
          description: incremental backup method
          type: string
        continuous:
          description: continuous backup method
          type: string
      type: object
    backupType:
      enum:
        - Full
        - Incremental
        - Differential
        - Continuous
      type: string
      description: the type of backup
    backupCreate:
      description: BackupCreate is the payload to create a KubeBlocks cluster backup
      properties:
        name:
          description: name of the backup, if not specified, a name will be generated automatically
          type: string
        backupType:
          $ref: '#/components/schemas/backupType'
        backupMethod:
          description: specified the backup method
          type: string
      type: object
      required:
        - backupMethod
    backupStatus:
      description: The current status. Valid values are New, InProgress, Completed, Failed.
      enum:
        - New
        - InProgress
        - Running
        - Completed
        - Failed
        - Deleting
      type: string
    backup:
      description: backup is the payload for KubeBlocks cluster backup
      properties:
        autoBackup:
          description: autoBackup or not
          type: boolean
        backupMethod:
          description: Backup Method.
          type: string
        backupPolicyName:
          description: Which backupPolicy is applied to perform this backup
          pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
          type: string
        backupRepo:
          description: backupRepo is the name of backupRepo and it is used to store the backup data
          type: string
        backupType:
          $ref: '#/components/schemas/backupType'
        completionTimestamp:
          description: Date/time when the backup finished being processed.
          format: date-time
          type: string
          nullable: true
        creationTimestamp:
          description: Date/time when the backup was created.
          format: date-time
          type: string
        duration:
          description: The duration time of backup execution. When converted to a string, the form is "1h2m0.5s".
          type: string
        name:
          description: name of the backup
          type: string
        orgName:
          description: orgName records the organization name for this backup.
          type: string
        snapshotVolumes:
          description: snapshotVolumes specifies whether to take snapshots of persistent volumes to back up
          type: boolean
        sourceCluster:
          description: sourceCluster records the source cluster information for this backup.
          type: string
        startTimestamp:
          description: Date/time when the backup started being processed.
          format: date-time
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/backupStatus'
        timeRangeEnd:
          description: timeRangeEnd records the end time of the backup.
          format: date-time
          type: string
          nullable: true
        timeRangeStart:
          description: timeRangeStart records the start time of the backup.
          format: date-time
          type: string
          nullable: true
        totalSize:
          description: Backup total size. A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        failureReason:
          type: string
        extras:
          type: string
        targetPods:
          type: array
          description: backup target pods
          items:
            type: string
        path:
          description: the path of backup files
          type: string
        retentionPeriod:
          description: determines a duration up to which the backup should be kept
          type: string
        expiration:
          description: indicates when this backup becomes eligible for garbage collection
          type: string
          format: date-time
          nullable: true
        id:
          description: the backup id
          type: string
        clusterId:
          description: the id of cluster that backup belong to
          type: string
        cloudProvider:
          description: the cloud provider
          type: string
        cloudRegion:
          description: the cloud region
          type: string
        environmentName:
          description: the environment name
          type: string
        engine:
          description: the cluster engine
          type: string
        parentBackupName:
          description: the parent backup name
          type: string
        baseBackupName:
          description: the base backup name
          type: string
        encryptionMasterKey:
          description: the master key for encryption
          type: string
        encryptionDataKey:
          description: the data key for encryption
          type: string
      required:
        - autoBackup
        - backupMethod
        - backupPolicyName
        - backupType
        - cloudProvider
        - cloudRegion
        - creationTimestamp
        - engine
        - environmentName
        - name
        - orgName
        - retentionPeriod
        - snapshotVolumes
        - sourceCluster
        - status
        - totalSize
      type: object
    encryptionConfig:
      description: encryption config for cluster
      properties:
        enabled:
          type: boolean
          description: whether enable enc
        masterKey:
          type: string
          description: the master key for encryption
        dataKey:
          type: string
          description: the data key for encryption
      type: object
    backupPolicy:
      description: BackupPolicy is the payload for KubeBlocks cluster backup policy
      properties:
        autoBackup:
          default: false
          description: specify whether to use auto backup
          type: boolean
        autoBackupMethod:
          description: the auto full backup method
          type: string
        pitrEnabled:
          description: specify whether to enable point-in-time recovery
          default: false
          type: boolean
        continuousBackupMethod:
          description: continuous backup method for pitr
          type: string
        cronExpression:
          description: the crop expression for schedule
          type: string
        incrementalBackupEnabled:
          description: specify whether to enable incremental backup
          default: false
          type: boolean
        incrementalCronExpression:
          description: the crop expression for incremental backup schedule
          type: string
        retentionPeriod:
          description: specify the retention period
          type: string
        backupRepo:
          description: the backup repo name, which is used to store backup data
          type: string
        retentionPolicy:
          $ref: '#/components/schemas/backupRetentionPolicy'
        nextBackupTime:
          description: the time to do next backup
          format: date-time
          type: string
          nullable: true
        encryptionConfig:
          $ref: '#/components/schemas/encryptionConfig'
      type: object
    backupList:
      description: BackupList is a list of backups
      properties:
        items:
          description: Items is the list of backup policy objects in the list
          items:
            $ref: '#/components/schemas/backup'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    backupStatsStatus:
      description: Number of backups for the status
      properties:
        status:
          description: Backup status
          type: string
        num:
          description: Number of backups for each status
          format: int64
          type: integer
      type: object
    backupStatsEngine:
      description: Totalsize and number of backups for the engine
      properties:
        engine:
          description: Engine name
          type: string
        size:
          description: totalsize of backups for each engine, A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        num:
          description: The number of backups for each engine
          format: int64
          type: integer
      type: object
    backupStatsType:
      description: Totalsize and number of backups for the backup type
      properties:
        type:
          description: backup type
          type: string
        size:
          description: totalsize of backups for each engine, A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        num:
          description: The number of backups for each engine
          format: int64
          type: integer
      type: object
    backupStats:
      description: Backup statistic info
      properties:
        backupStatsStatus:
          description: Number of backups for each different status
          items:
            $ref: '#/components/schemas/backupStatsStatus'
          type: array
        backupStatsEngine:
          description: TotalSize and number of backups for each engine
          items:
            $ref: '#/components/schemas/backupStatsEngine'
          type: array
        backupStatsType:
          description: TotalSize and number of backups for each type
          items:
            $ref: '#/components/schemas/backupStatsType'
          type: array
        latestBackupTime:
          description: create time of the latest backup
          type: string
          format: date-time
          nullable: true
        latestBackupStatus:
          description: backup status of the latest backup
          type: string
          nullable: true
      type: object
    backupLogByPod:
      description: info of backup workload log
      properties:
        log:
          description: logs of the backup workload
          type: string
        podName:
          description: pod name
          type: string
        creationTimestamp:
          description: Date/time when the backup pod was created.
          format: date-time
          type: string
      type: object
    backupLog:
      description: backup workload logs
      properties:
        items:
          description: items is the list of backupLogByPod objects
          items:
            $ref: '#/components/schemas/backupLogByPod'
          type: array
        backupId:
          description: backup id
          type: string
      type: object
    backupView:
      properties:
        filepaths:
          description: the paths of file to view
          type: array
          items:
            type: string
    fileEntry:
      description: the entry of files
      properties:
        IsDir:
          description: description the entry type
          type: boolean
        fullPath:
          description: the full path of file
          type: string
        filename:
          description: the filename
          type: string
        size:
          description: the size of entry
          format: int64
          type: integer
    fileEntryList:
      description: BackupEntryList is a list of entry
      properties:
        items:
          description: Items is the list of backup entry
          items:
            $ref: '#/components/schemas/fileEntry'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      type: object
    backupDownload:
      properties:
        filepaths:
          description: the paths of file to download
          type: array
          items:
            type: string
    restore:
      description: create a KubeBlocks restore API
      properties:
        id:
          description: ID of the restore
          type: string
        orgName:
          description: organization name
          type: string
        backupName:
          description: backup name
          type: string
        clusterName:
          description: kubeBlocks cluster name
          type: string
        componentName:
          description: component name of cluster
          type: string
        targetPodName:
          description: target pod name
          type: string
        createdAt:
          format: date-time
          type: string
        name:
          description: kubeBlocks restore name
          type: string
        parameters:
          description: restore parameters to inject env of the restore CR.
          additionalProperties:
            type: string
          type: object
        restoreTime:
          description: restore time
          type: string
        status:
          description: restore status
          properties:
            actions:
              items:
                properties:
                  message:
                    type: string
                  name:
                    description: action name
                    type: string
                  status:
                    description: 'action status, enum values: [Processing, Completed, Failed]'
                    type: string
                  backupName:
                    type: string
                  objectKey:
                    type: string
                  startTime:
                    type: string
                    format: date-time
                  endTime:
                    type: string
                    format: date-time
                type: object
              type: array
            completionTimestamp:
              description: completion time
              type: string
              format: date-time
            conditions:
              items:
                properties:
                  message:
                    type: string
                  reason:
                    type: string
                  type:
                    description: conditionType
                    type: string
                  observedGeneration:
                    type: integer
                    format: int64
                  lastTransitionTime:
                    type: string
                    format: date-time
                  status:
                    type: string
                type: object
              type: array
            phase:
              description: restore phase
              type: string
            startTimestamp:
              description: start time
              type: string
              format: date-time
          type: object
      required:
        - backupName
        - clusterName
        - componentName
      type: object
    restoreList:
      description: restoreList is a list of restore object
      properties:
        items:
          description: Items is the list of restore objects in the list
          items:
            $ref: '#/components/schemas/restore'
          type: array
      required:
        - items
      type: object
    restoreLogByPod:
      description: info of restore workload log
      properties:
        log:
          description: restore pod log
          type: string
        ownerObjectKey:
          description: pod ownerReference objectkey
          type: string
        podName:
          description: pod name
          type: string
        creationTimestamp:
          description: Date/time when the restore pod was created.
          format: date-time
          type: string
      type: object
    restoreLog:
      description: restore workload logs
      properties:
        items:
          description: items is the list of restoreLogByPod objects
          items:
            $ref: '#/components/schemas/restoreLogByPod'
          type: array
        restoreId:
          description: restore id
          type: string
      type: object
    volumeRestorePolicy:
      default: Serial
      description: 'the volume claim restore policy, support values: [Serial, Parallel]'
      enum:
        - Serial
        - Parallel
      type: string
    restoreCreate:
      description: RestoreCreate is the payload to restore a KubeBlocks cluster
      properties:
        environmentName:
          description: the env name of the target environment to restore
          type: string
        backupId:
          description: the id of backup to restore
          type: string
        cluster:
          $ref: '#/components/schemas/clusterCreate'
        restoreTimeStr:
          description: restoreTime point to restore
          type: string
        doReadyRestoreAfterClusterRunning:
          description: the recovery process in the PostReady phase will be performed after the cluster is running successfully.
          type: boolean
        volumeRestorePolicy:
          $ref: '#/components/schemas/volumeRestorePolicy'
      required:
        - environmentName
        - backupId
        - cluster
      type: object
    backupRepoAccessMethod:
      description: the access method for backup repo
      default: Tool
      enum:
        - Mount
        - Tool
      type: string
    backupRepo:
      description: backupRepo is the payload for KubeBlocks cluster backup repo
      properties:
        accessMethod:
          $ref: '#/components/schemas/backupRepoAccessMethod'
        id:
          description: the id of backup repo
          type: string
        backupNums:
          description: backupNums specifies the number of backups in the backupRepo
          type: integer
        config:
          additionalProperties:
            type: string
          description: config specifies the configuration of the backupRepo
          type: object
        createdAt:
          description: createdAt specifies the creation time of the backupRepo
          format: date-time
          type: string
        default:
          description: default specifies whether the backupRepo is the default backupRepo
          type: boolean
        environmentId:
          description: environmentId of the backupRepo
          format: uuid
          type: string
        environmentName:
          description: environmentName of the backupRepo
          type: string
        name:
          description: name of the backupRepo
          type: string
        status:
          description: status specifies the status of the backupRepo
          type: string
        storageName:
          description: the name of storage used by backup repo
          type: string
        storageID:
          description: the id of storage used by backup repo
          type: string
        storageProvider:
          description: storageProvider specifies the storage provider of the backupRepo
          type: string
        totalSize:
          description: totalSize specifies the total size of backups in the backupRepo
          type: string
        failedReason:
          type: string
          description: failedReason specifies the reason of the backupRepo failure
        failedMessage:
          type: string
          description: failedMessage specifies the message of the backupRepo failure
      required:
        - config
        - createdAt
        - default
        - environmentId
        - environmentName
        - name
        - storageProvider
      type: object
    backupRepoList:
      description: BackupRepoList is a list of backupRepo
      properties:
        items:
          description: Items is the list of backupRepo objects in the list
          items:
            $ref: '#/components/schemas/backupRepo'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    parameterHistory:
      description: The history of a parameter
      type: object
      required:
        - parameterName
        - oldValue
        - newValue
        - updatedAt
      properties:
        parameterName:
          description: The name of the parameter
          type: string
        oldValue:
          description: The old value of the parameter
          type: string
        newValue:
          description: The new value of the parameter
          type: string
        updatedAt:
          description: The date and time the parameter was last updated
          format: date-time
          type: string
        source:
          $ref: '#/components/schemas/eventSource'
        operator:
          description: operator of the event, if source is user, operator is user name; if source is system, operator is system name
          type: string
        operatorId:
          description: The user ID of the operator
          type: string
        fileName:
          description: The name of the configuration file
          type: string
    parameterHistoryList:
      description: A list of parameter history
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/parameterHistory'
    parameterProp:
      type: object
      required:
        - name
        - type
        - needRestart
        - immutable
      properties:
        name:
          description: The name of the parameter
          type: string
        description:
          description: The description of the parameter
          type: string
        type:
          description: The type of the parameter value
          type: string
        value:
          description: The value of the parameter, if parameter is not set in tpl, it's value equal to cue default value.
          type: object
        default:
          description: The value of the parameter, if parameter is not set in tpl, it's value equal to cue default value.
          type: object
        needRestart:
          description: Whether the parameter requires a restart to take effect
          type: boolean
        immutable:
          description: Whether the parameter is an immutable parameter, immutable parameters cannot be modified
          type: boolean
        maximum:
          description: The maximum value of the parameter
          type: string
        minimum:
          description: The minimum value of the parameter
          type: string
        enum:
          description: The value options of the parameter
          type: array
          items: {}
    parameterItem:
      type: object
      description: With the list of parameter properties and the configuration file name
      properties:
        props:
          type: array
          description: The list of parameters properties
          items:
            $ref: '#/components/schemas/parameterProp'
        additionalProps:
          type: array
          description: The additional properties of the parameter
          items:
            $ref: '#/components/schemas/parameterProp'
        fileName:
          description: The name of the configuration file
          type: string
        specName:
          description: The name of the config spec
          type: string
        rawContent:
          description: The raw content of the configuration file, return only when raw is true in the query.
          type: string
    parameterList:
      description: A list of cluster parameter
      required:
        - majorVersion
        - engine
        - component
      properties:
        majorVersion:
          description: 'Major version of database engine, eg: 8.0'
          type: string
        engine:
          description: Name of database engine
          type: string
        component:
          description: Name of component
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/parameterItem'
    paramTplListItem:
      description: parameter template information
      properties:
        orgName:
          description: Name of the organization
          type: string
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        description:
          description: Description of parameter template
          type: string
        majorVersion:
          description: 'Major version of database engine, eg: 8.0'
          type: string
        engine:
          description: Name of database engine
          type: string
        component:
          description: Name of component
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          type: string
        partition:
          description: the template partition in listParamTpl request
          type: string
        paramTplID:
          type: string
          description: id of parameter template
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - description
        - paramTplID
        - majorVersion
        - engine
        - component
        - name
        - partition
      type: object
    paramTplList:
      description: paramTplList is a list of parameter templates
      properties:
        items:
          description: Items is the list of parameter templates objects in the list
          items:
            $ref: '#/components/schemas/paramTplListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    paramTplCreate:
      description: parameter template create
      properties:
        description:
          description: Description of parameter template
          maxLength: 128
          minLength: 3
          type: string
        majorVersion:
          description: 'Major version of database engine, eg: 8.0'
          type: string
        engine:
          description: Name of database engine
          type: string
        component:
          description: Name of component
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          maxLength: 64
          minLength: 3
          pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
          type: string
        customName:
          description: Name of custom parameter template. When set customName, will create a copy of this custom parameter template.
          type: string
        oriPartition:
          $ref: '#/components/schemas/parameterTemplatePartition'
        isPrivate:
          description: Determines whether the user can see this parameter template
          type: boolean
      required:
        - description
        - majorVersion
        - engine
        - component
        - name
      type: object
    paramTplUpdate:
      description: paramTplUpdate is the payload to update a parameter template
      properties:
        specName:
          description: Specify parameters belongs to which spec. Currently, only one configuration file corresponds to a specName, so the configuration file name is omitted.
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Specify parameters list to be updated
          type: object
        newParamTplName:
          description: Specify the new name of the parameter template
          type: string
        rawContent:
          description: The raw content of the configuration file
          type: string
      type: object
    paramTplApplyToClusterListItem:
      description: parameter template applicable to the cluster information
      properties:
        count:
          description: The number of parameters in the parameter template
          type: integer
        name:
          description: Name of parameter template. Name must be unique within an Org
          type: string
        id:
          description: id of parameter template
          type: string
        needRestart:
          description: 'whether to restart after applying this parameter template or not '
          type: boolean
        partition:
          description: the template partition
          type: string
      required:
        - count
        - needRestart
        - name
        - partition
      type: object
    paramTplApplyToClusterList:
      description: paramTplAPPLToClusterList is a list of parameter templates applicable to the cluster
      properties:
        items:
          description: Items is the list of parameter templates applicable to the cluster objects in the list
          items:
            $ref: '#/components/schemas/paramTplApplyToClusterListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    paramTplCreateFromCluster:
      description: parameter template create
      properties:
        description:
          description: Description of parameter template
          maxLength: 128
          minLength: 3
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          maxLength: 64
          minLength: 3
          pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
          type: string
        component:
          description: component type.
          type: string
        engineVersion:
          description: database engine Version
          type: string
      required:
        - description
        - name
      type: object
    alertReceiverCategory:
      type: string
      enum:
        - feishu
        - wechat
        - dingtalk
        - receiver-group
        - webhook
    webhookConfig:
      description: Webhook config of alert receiver
      properties:
        url:
          type: string
      required:
        - url
      type: object
    alertReceiver:
      description: Alert receiver information
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        category:
          $ref: '#/components/schemas/alertReceiverCategory'
        updatedAt:
          format: date-time
          type: string
        userGroup:
          properties:
            emailEnabled:
              type: boolean
            ids:
              items:
                type: string
              type: array
            smsEnabled:
              type: boolean
          type: object
        webhookConfig:
          $ref: '#/components/schemas/webhookConfig'
        orgName:
          type: string
      type: object
    alertReceiverList:
      description: AlertReceiverList is a list of alert receivers
      properties:
        items:
          description: Items is the list of alert receiver objects in the list
          items:
            $ref: '#/components/schemas/alertReceiver'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    URLCheck:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          example: https://example.com
        isConnectable:
          type: boolean
          example: true
          default: false
        timeout:
          type: integer
          minimum: 1
          maximum: 30
          default: 5
          example: 5
        error:
          type: string
          example: null
    alertStatistic:
      type: object
      properties:
        total:
          type: integer
        critical:
          type: integer
        warning:
          type: integer
        info:
          type: integer
    alterRuleRef:
      type: object
      properties:
        groupName:
          type: string
        alertName:
          type: string
    alertStrategy:
      required:
        - receiverIds
      type: object
      properties:
        id:
          type: integer
        orgName:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        receiverIds:
          type: array
          items:
            type: integer
        receivers:
          type: array
          items:
            $ref: '#/components/schemas/alertReceiver'
        envs:
          type: array
          items:
            type: string
        severities:
          type: array
          items:
            type: string
        rules:
          type: array
          items:
            type: string
        ruleObjs:
          type: array
          items:
            $ref: '#/components/schemas/alterRuleRef'
        engines:
          type: array
          items:
            type: string
        clusters:
          type: array
          items:
            type: string
        disabled:
          type: boolean
          default: false
        repeatInterval:
          type: string
        muteTimeInterval:
          type: object
          properties:
            weekdays:
              type: array
              items:
                type: integer
                description: Days should be between [0, 6] where 0 = Sunday.
            times:
              type: object
              properties:
                startTime:
                  type: string
                  description: Mute start time, e.g. '17:00', should be in UTC time.
                endTime:
                  type: string
                  description: Mute end time, e.g. '24:00', should be in UTC time.
            onceMinutes:
              type: integer
              description: Only mute once for `onceMinutes` minutes
      description: Alert strategy information
    alertStrategyList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert strategy objects in the list
          items:
            $ref: '#/components/schemas/alertStrategy'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertStrategyList is a list of alert strategies
    alertSeverity:
      enum:
        - critical
        - warning
        - info
      type: string
    alertMetric:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        threshold:
          type: integer
        notation:
          type: string
        category:
          type: string
      description: Alert metric information
    alertRule:
      required:
        - alertName
        - for
        - groupName
        - severity
      type: object
      properties:
        description:
          type: string
        summary:
          type: string
        alertName:
          type: string
        expr:
          type: string
          description: Expression. Required if metric is not provided.
        for:
          type: string
        groupName:
          type: string
        disabled:
          type: boolean
          default: false
        severity:
          $ref: '#/components/schemas/alertSeverity'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metric:
          $ref: '#/components/schemas/alertMetric'
          description: Metric configuration. If provided, expr will be ignored.
        orgName:
          type: string
      description: Alert rule information. Either provide 'expr' for custom expressions, or 'metric' for predefined metrics.
    alertRuleGroup:
      type: object
      properties:
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/alertRule'
    alertRuleList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert rule objects in the list
          items:
            $ref: '#/components/schemas/alertRuleGroup'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertRuleList is a list of alert rules
    alertMetricList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert metric objects in the list
          items:
            $ref: '#/components/schemas/alertMetric'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertMetricList is a list of alert metric
    alertStatus:
      enum:
        - resolved
        - firing
      type: string
    alertObject:
      type: object
      properties:
        id:
          type: integer
        alertName:
          type: string
        groupName:
          type: string
        expr:
          type: string
        clusterName:
          type: string
        objectName:
          type: string
        engine:
          type: string
        namespace:
          type: string
        pod:
          type: string
        severity:
          $ref: '#/components/schemas/alertSeverity'
        description:
          type: string
        fingerprint:
          type: string
        startsAt:
          format: date-time
          type: string
        endsAt:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/alertStatus'
        count:
          type: integer
        orgName:
          type: string
        page:
          type: integer
        pageSize:
          type: integer
        env:
          type: string
      description: Alert object information
    alertObjectList:
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert objects in the list
          items:
            $ref: '#/components/schemas/alertObject'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertObjectList is a list of alert object
    alertCluster:
      required:
        - disabled
      type: object
      properties:
        disabled:
          type: boolean
    alertConfig:
      required:
        - timeZoneOffset
      type: object
      properties:
        timeZoneOffset:
          type: integer
          description: Time zone offset in seconds, e.g. offset of UTC+08:00 is +8 * 60 * 60
    alertInhibit:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        orgName:
          type: string
        envs:
          type: array
          items:
            type: string
        sourceMatch:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        targetMatch:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        equal:
          type: array
          items:
            type: string
      description: Alert object information
    alertInhibitList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert inhibits in the list
          items:
            $ref: '#/components/schemas/alertInhibit'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertInhibitList is a list of alert inhibit
    alertRuleConfig:
      type: object
      properties:
        content:
          type: string
          format: binary
          description: YAML file content containing the new alert rule configuration
    engineType:
      type: string
      description: engine type
      enum:
        - RDBMS
        - search-engine
        - key-value
        - time-series
        - streaming
        - LLM
        - vector
        - document
        - graph
        - other
    engineStatus:
      type: string
      description: engine addon status in K8s
      enum:
        - Disabled
        - Enabled
        - Failed
        - Enabling
        - Disabling
    engine:
      type: object
      properties:
        id:
          title: ID
          type: string
          description: engine ID
        description:
          title: description
          type: string
          description: the engine description
        name:
          title: Name
          type: string
          description: engine Name
        version:
          title: Version
          type: string
          description: engine version
        kbVersionConstraint:
          title: kbVersionConstraint
          type: string
          description: KubeBlocks version constrain
        type:
          title: Type
          $ref: '#/components/schemas/engineType'
        installed:
          type: boolean
          description: whether the engine is installed
        provider:
          title: provider
          type: string
          description: engine addon provider
        status:
          $ref: '#/components/schemas/engineStatus'
        availableVersion:
          title: availableVersion
          type: array
          description: engine available versions
          items:
            type: string
        upgradeHistory:
          title: upgradeHistory
          type: string
          description: engine upgrade history
        errMsg:
          title: errMsg
          description: engine error messages when the engine status is failed
          type: string
        clusterVersions:
          title: clusterVersions
          type: array
          description: clusterversion in the engines
          items:
            type: string
        maturityLevel:
          title: maturityLevel
          type: string
          description: engine maturity level
    engineList:
      items:
        $ref: '#/components/schemas/engine'
      type: array
    integerOption:
      type: object
      required:
        - min
        - max
        - default
        - step
      properties:
        min:
          type: integer
        max:
          type: integer
        default:
          type: integer
        step:
          type: integer
        excludes:
          type: array
          items:
            type: integer
    storageOption:
      type: object
      required:
        - name
        - title
      properties:
        title:
          $ref: '#/components/schemas/localizedDescription'
        name:
          type: string
        min:
          type: integer
        max:
          type: integer
        default:
          type: integer
        step:
          type: integer
    resourceConstraint:
      type: object
      required:
        - id
        - engine
        - mode
        - component
      properties:
        id:
          type: string
          description: resource constraint id
        engine:
          type: string
          description: engine name
        mode:
          type: string
          description: engine mode
        component:
          type: string
          description: engine component
        replicas:
          $ref: '#/components/schemas/integerOption'
        shards:
          $ref: '#/components/schemas/integerOption'
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/storageOption'
    resourceConstraintList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/resourceConstraint'
    engineOptionStatus:
      type: string
      default: Release
      enum:
        - Release
        - Uncommitted
    componentOption:
      type: object
      required:
        - name
        - title
        - order
      properties:
        name:
          type: string
          description: component type
        matchRegex:
          type: string
          description: |
            Determine whether the componentDef of kb-cluster belongs to this component type through this matching regularization.
            if not set, componentDef must be equal to component type.
        title:
          $ref: '#/components/schemas/localizedDescription'
        order:
          type: integer
        roleOrder:
          type: array
          items:
            type: string
        version:
          type: object
          required:
            - majorVersion
            - componentVersionName
          properties:
            componentVersionName:
              type: string
              description: component version name
            minorVersion:
              type: object
              properties:
                default:
                  type: string
                  description: default version.
                rollback:
                  type: boolean
                  description: determine whether minor version can be rolled back.
                disableRollbackPreRelease:
                  type: boolean
                  description: disable roll back the preRelease minor version.
            majorVersion:
              type: object
              required:
                - rule
              properties:
                default:
                  type: string
                  description: default major version.
                rule:
                  type: string
                  description: |
                    ServiceVersion uses semver syntax(X Y.Z), such MySQL 5.7.4 and PG 14.8.0.
                    Currently supports [X, X.Y, X.Y.Z] formats to determine major versions of the engine from the serviceVersion
                versionMapping:
                  type: array
                  items:
                    type: object
                    description: Configure the mapping relationship with the main component's major versions.
                    properties:
                      mainComponentMajorVersion:
                        type: string
                        description: major version of the main component
                      versions:
                        type: array
                        description: major versions of the current component
                        items:
                          type: string
        main:
          description: Main component flag
          type: boolean
          x-nullable: false
        customSecret:
          type: boolean
          description: whether the component supports custom secret
          x-nullable: false
    modeCompatibleKubeblocksVersion:
      type: string
      description: |
        specify the compatible kubeblocks version. If empty, it means all versions are supported.
      enum:
        - '0.9'
        - '1.0'
    modeComponent:
      type: object
      required:
        - component
        - hideEnpoints
        - hideOnCreate
      properties:
        component:
          type: string
        hideEnpoints:
          type: boolean
        hideOnCreate:
          type: boolean
    serviceDescriptorAddressStyle:
      type: string
      description: |
        specify the style that will be used in servicedescriptor. 
        "hostport" will ask user to provide both host and port.
        "endpoint" will ask user to provide an endpoint.
        When using a serviceSelector, this option will not be effective.
      enum:
        - hostport
        - endpoint
    serviceSelector:
      type: object
      required:
        - mode
        - component
        - service
        - port
      description: |
        This definition of component/service/port is in line with kubeblocks api 
        appsv1.ServiceRefServiceSelector. Read kubeblocks documentation for more information.
      properties:
        mode:
          type: string
          description: referenced cluster's mode
        component:
          type: string
        service:
          type: string
        port:
          type: string
        credentialComponent:
          type: string
        credentialName:
          type: string
    modeServiceRef:
      type: object
      description: |
        Defines a ServiceRef for a cluster, enabling access to both external services and
        Services provided by other Clusters. The defined serviceRef must be provided when creating cluster.
      required:
        - helmValuePath
        - name
        - engineName
        - addressStyle
      properties:
        name:
          type: string
          description: |
            The name will be referenced in clusterCreate request. The name should also be defined in `.components`
            so that frontend can use it to get proper localized title.
        engineName:
          type: string
          description: The engine to be used in serviceRef. This field is used to filter clusters.
        addressStyle:
          $ref: '#/components/schemas/serviceDescriptorAddressStyle'
        helmValuePath:
          type: object
          description: The path to be used in values. Separated with commas. ClusterCreate API will use these path to override values in the cluster chart.
          required:
            - namespace
            - cluster
            - serviceDescriptor
          properties:
            namespace:
              type: string
              description: the namespace of the referenced Cluster or the namespace of the referenced ServiceDescriptor object.
            cluster:
              type: string
              description: the name of the referenced Cluster
            component:
              type: string
              description: see serviceSelectors
            service:
              type: string
              description: see serviceSelectors
            port:
              type: string
              description: see serviceSelectors
            credentialComponent:
              type: string
              description: see serviceSelectors
            credentialName:
              type: string
              description: see serviceSelectors
            serviceDescriptor:
              type: string
              description: the name of the referenced serviceDescriptor
        serviceSelectors:
          type: array
          description: |
            ServiceSelectors will map cluster's mode to a serviceSelector. The serviceSelector
            will be used to provide the corresponding helm values.
            If no serviceSelector is matched, the corresponding helm value will not be set.
          items:
            $ref: '#/components/schemas/serviceSelector'
    modeObjectStorage:
      type: object
      description: |
        object storage related configs
      properties:
        enabled:
          type: boolean
          description: if object storage is enabled for this mode
        serviceRef:
          $ref: '#/components/schemas/modeServiceRef'
        additionalHelmValuePath:
          type: object
          description: The path in helm values that some object storage config will use. If empty, the values will not be set.
          required:
            - bucket
          properties:
            bucket:
              type: string
              description: the bucket name for the object storage
            path:
              type: string
              description: |
                root path where cluster stores data in the bucket. This field is not user-provided.
                It is always set to cluster id. If not set, it means the engine does not support specify a path.
            usePathStyle:
              type: string
              description: |
                whether the object storage is using path style or virtual host style.
                If not set, it means the engine does not need this option.
            region:
              type: string
              description: |
                Region to use. If not set, it means the engine does not need this option.
    modeOption:
      type: object
      required:
        - name
        - title
        - description
        - components
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/localizedDescription'
        description:
          $ref: '#/components/schemas/localizedDescription'
        schedulingPolicy:
          type: object
          properties:
            componentAntiAffinity:
              type: array
              minItems: 1
              description: |
                when component names are specified in componentAntiAffinity, those components will be scheduled with anti-affinity rules 
                applied to ensure they are spread across different nodes, especially when resource dispersion is enabled.
              items:
                type: string
        compatibleKubeblocksVersion:
          $ref: '#/components/schemas/modeCompatibleKubeblocksVersion'
        components:
          type: array
          items:
            $ref: '#/components/schemas/modeComponent'
        proxy:
          required:
            - enabled
          type: object
          properties:
            enabled:
              type: boolean
        versions:
          type: array
          items:
            type: string
        extra:
          type: object
          additionalProperties: true
        serviceRefs:
          type: array
          items:
            $ref: '#/components/schemas/modeServiceRef'
        objectStorage:
          $ref: '#/components/schemas/modeObjectStorage'
        valuesMappings:
          type: object
          properties:
            compatibleKBVersions:
              type: array
              items:
                type: string
            mappings:
              type: array
              items:
                type: object
                required:
                  - sourceKey
                  - targetKey
                properties:
                  component:
                    type: string
                  sourceKey:
                    type: string
                  sourceValue:
                    description: Can be any type (string, number, boolean, object, etc.)
                  targetKey:
                    type: string
                  targetValue:
                    description: Can be any type (string, number, boolean, object, etc.)
    accountOption:
      type: object
      required:
        - enabled
        - accountNamePattern
        - create
        - resetPassword
        - delete
      properties:
        maxSuperUserAccount:
          type: integer
          format: int32
          minimum: 0
          default: 2
          description: |
            number of super user accounts cloud create.
            If not set, use default value.
            If set to 0, it means not allowed to create super user account.
          nullable: true
        enabled:
          type: boolean
        privileges:
          type: array
          items:
            type: string
        accountNamePattern:
          type: string
        create:
          type: boolean
        resetPassword:
          type: boolean
        delete:
          type: boolean
        displayRootAccount:
          type: boolean
          x-omitempty: false
        resetRootPassword:
          type: boolean
          x-omitempty: false
    databaseOption:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
          x-omitempty: false
        update:
          type: boolean
          x-omitempty: false
        databaseNamePattern:
          type: string
        listOption:
          type: array
          description: |
            The database option information that will be displayed when listing databases
          items:
            type: string
        availableOptions:
          type: array
          description: |
            The database option cloud be set when creating databases
          items:
            type: string
        availbaleUpdateOptions:
          type: array
          description: |
            The database option name and type cloud be updated when updating databases
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              description:
                $ref: '#/components/schemas/localizedDescription'
    dmsOption:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        protocol:
          type: string
        feature:
          type: object
          additionalProperties: {}
        defaultAccount:
          type: string
          x-nullable: true
        tableMetadata:
          type: array
          items:
            type: object
    backupMethodOption:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        compatibleMethod:
          description: The compatible full backup method for incremental backup method
          type: string
        realBackupPath:
          type: string
          description: The actual path where the backup data is stored. If not set, use the backup.status.path.
        restoreOption:
          type: object
          properties:
            restoreOnComponents:
              type: array
              description: |
                If this backup needs to be restored on multiple components, the names of those components must be specified. 
                If the restore is only required on the backed-up component itself, then no configuration is needed.
              items:
                type: string
            deferPostReadyUntilClusterRunning:
              type: boolean
              description: |
                If set to true, the restore will be ready after the cluster is running.
                If set to false, the restore will be ready after the cluster is created.
        description:
          $ref: '#/components/schemas/localizedDescription'
    backupOption:
      description: If present, it must be set defaultMethod and fullMethod
      type: object
      required:
        - defaultMethod
        - fullMethod
      properties:
        defaultMethod:
          type: string
        restoreOption:
          type: object
          properties:
            crossModeRecovery:
              type: array
              description: cross mode recovery options
              items:
                type: string
        fullMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
        incrementalMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
        continuousMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
    benchOption:
      type: object
      required:
        - pgbench
        - sysbench
        - tpcc
        - ycsb
      properties:
        pgbench:
          type: boolean
        sysbench:
          type: boolean
        tpcc:
          type: boolean
        ycsb:
          type: boolean
    engineOptionsServicePattern:
      type: string
      description: service name pattern, e.g. ClusterName-ComponentName or .ClusterName`
      default: cluster-component
      enum:
        - cluster-component
        - cluster
        - cluster-component-service
    endpointOption:
      type: object
      required:
        - title
        - component
        - portName
        - type
        - port
      properties:
        title:
          $ref: '#/components/schemas/localizedDescription'
        component:
          type: string
        portName:
          type: string
        type:
          type: array
          items:
            type: string
        port:
          type: integer
          format: int32
        supportsSystemUse:
          type: boolean
          description: whether the endpoint supports system use, such as health check, dms, databases & accounts management etc.
        supportsReadonly:
          type: boolean
          description: whether the engine supports readonly endpoint
        servicePattern:
          $ref: '#/components/schemas/engineOptionsServicePattern'
        serviceNameRegex:
          type: string
          description: ServiceName regular expression
        serviceName:
          type: string
          description: service suffix, defined in ComponentDefinition
        selector:
          type: object
          additionalProperties:
            type: string
          description: selector of k8s service
        followNetworkMode:
          type: boolean
          default: false
          description: whether the endpoint follows the network mode of the component
    networkModeOption:
      type: array
      items:
        type: object
        required:
          - supported
        properties:
          supported:
            type: array
            items:
              $ref: '#/components/schemas/networkMode'
          notSupportedVersions:
            type: object
            description: not supported versions, key is the networkMode, value is an array of versions which support major version or mirror version.
            additionalProperties:
              type: array
              items:
                type: string
          modes:
            type: array
            items:
              type: string
            nullable: true
    componentOpsOption:
      type: object
      required:
        - component
      properties:
        modes:
          type: array
          items:
            type: string
          description: List of modes that this component supports. if not set, support all modes.
        component:
          type: string
        disableHA:
          type: boolean
          default: false
        inPlace:
          type: boolean
          description: parameter for rebuild instance ops
          default: false
        needBackupWhenInPlace:
          type: boolean
          description: indicate whether backup is required when Inplace is true
          default: false
        backupRequired:
          type: boolean
          description: indicate whether backup is required for this ops
          default: false
        backupMethod:
          type: object
          description: indicate the backup method when inplace is true
          properties:
            full:
              type: array
              items:
                type: string
              description: full backup methods
            incremental:
              type: array
              description: incremental backup methods
              items:
                type: string
        restoreEnv:
          type: array
          nullable: true
          items:
            type: object
            required:
              - name
              - value
            properties:
              name:
                type: string
                description: env name
              value:
                type: string
                description: env value
        dependentCustomOps:
          type: object
          properties:
            opsDefName:
              type: string
              description: opsDefinition name
            component:
              type: string
              description: component type name
            when:
              type: string
              description: |
                go template conditional judgment expression, such as $.root.inPlace == true
                available built-in objects that can be referenced in the expression include:
                - cluster: cluster record
                - params: ops input parameters
                - component: current component
                - root: current object
            params:
              description: custom ops parameters
              items:
                properties:
                  name:
                    type: string
                    description: parameter name.
                  value:
                    type: string
                    description: |
                      parameter value, you can define a go template expression to refer the variable of the current ops.
                      available built-in objects that can be referenced in the expression include:
                      - cluster: cluster record
                      - params: ops input parameters
                      - component: current component
                      - root: current object
                type: object
              type: array
    licenseOption:
      type: object
      required:
        - component
        - opsDefName
      properties:
        component:
          type: string
        opsDefName:
          type: string
    engineOptionsMetricsQueryType:
      type: string
      description: |
        Specifies the type of metrics query to be performed.
        'instant' for a single point in time, 'range' for a time range.
      enum:
        - instant
        - range
    metricsOptionQuery:
      type: object
      properties:
        queryPattern:
          type: string
          x-nullable: false
        queryType:
          $ref: '#/components/schemas/engineOptionsMetricsQueryType'
    metricsOption:
      type: object
      properties:
        replicationLag:
          $ref: '#/components/schemas/metricsOptionQuery'
    dashboardOption:
      type: object
      required:
        - component
        - dashboardUid
        - variables
      properties:
        component:
          type: string
        dashboardUid:
          type: string
        variables:
          type: object
          additionalProperties:
            type: string
        instancePanels:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              panels:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    id:
                      type: string
    logOption:
      type: object
      required:
        - component
        - error
        - slow
        - audit
        - running
      properties:
        component:
          type: string
        error:
          type: boolean
        slow:
          type: boolean
        audit:
          type: boolean
        running:
          type: boolean
    parameterConfig:
      required:
        - configSpecName
        - templateRef
        - configFileName
        - format
      type: object
      properties:
        configSpecName:
          type: string
          description: name of config spec, included in configSpecs
        templateRef:
          type: string
          description: name of the referenced configuration template file name, all files in parameter template fold under stores
        configFileName:
          type: string
          description: name of the configuration file, such as my.cnf, postgresql.conf
        format:
          type: string
          description: format of the configuration file, such as ini, yaml, conf
        section:
          type: string
          description: section of the configuration file, such as mysqld
    parameterTemplate:
      type: object
      required:
        - name
        - description
        - majorVersion
        - configs
        - defaultUse
      properties:
        name:
          type: string
          description: name of default parameter template
        description:
          $ref: '#/components/schemas/localizedDescription'
        majorVersion:
          type: string
          description: match the major version set in the component
        configs:
          type: array
          description: parameterConfig contains specific configuration templates for each configuration file, primarily consisting of parameter templates and parameter constraints, mainly used by initializing the default template from addon.
          items:
            $ref: '#/components/schemas/parameterConfig'
        defaultUse:
          type: boolean
          description: whether the default parameter template is used by default, set in componentDefinition.configs, only one default parameter template can be set in certain family.
    parameterOption:
      type: object
      required:
        - component
        - exportTpl
        - enableTemplate
        - configSpecs
      properties:
        component:
          type: string
          description: component type
        exportTpl:
          description: If set to true, the current parameters of the component can be exported and saved as a parameter template.
          type: boolean
        enableTemplate:
          description: If set to true, the parameter templates of the component can be used. Mainly used by frontend.
          type: boolean
        enableRawContent:
          type: boolean
          description: If set to true, the component can display the raw content of the parameter configuration file.
        configSpecs:
          type: array
          description: all parameter configuration specs of this component
          items:
            type: string
        disableHA:
          type: boolean
          default: false
        templates:
          type: array
          description: parameter templates, including default parameter templates for different major versions or default parameter templates for different purposes.
          items:
            $ref: '#/components/schemas/parameterTemplate'
        initOptions:
          type: object
          description: Parameters to be initialized when cluster is created
          additionalProperties:
            type: object
            properties: {}
    engineOptionsDisasterRecoverySource:
      type: object
      properties:
        metricSource:
          $ref: '#/components/schemas/metricsOptionQuery'
    engineOptionsDisasterRecoveryStatus:
      type: object
      properties:
        delay:
          $ref: '#/components/schemas/engineOptionsDisasterRecoverySource'
        replicationPoint:
          $ref: '#/components/schemas/engineOptionsDisasterRecoverySource'
    disasterRecoveryOption:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        instanceLimit:
          type: integer
          default: 8
        status:
          $ref: '#/components/schemas/engineOptionsDisasterRecoveryStatus'
    cdcClusterConfig:
      type: object
      properties:
        component:
          type: string
        configName:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    cdcClusterAccount:
      type: object
      properties:
        component:
          type: string
        defaultAccountName:
          type: array
          items:
            type: string
    cdcNetworkType:
      type: string
      enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - FixedPodIP
    cdcClusterEndpoint:
      type: object
      properties:
        role:
          type: string
        component:
          type: string
        portName:
          type: string
        port:
          type: integer
          format: int32
        authDatabase:
          type: string
          nullable: true
        networkType:
          $ref: '#/components/schemas/cdcNetworkType'
    cdcSqlExecutor:
      type: object
      properties:
        sql:
          type: array
          items:
            type: string
        result:
          type: array
          items:
            type: string
        authDatabase:
          type: string
          nullable: true
    cdcLifecycleAction:
      type: object
      properties:
        name:
          type: string
        sqlExecutor:
          $ref: '#/components/schemas/cdcSqlExecutor'
    cdcLifecycle:
      type: object
      properties:
        preStart:
          $ref: '#/components/schemas/cdcLifecycleAction'
        postStart:
          $ref: '#/components/schemas/cdcLifecycleAction'
        preStop:
          $ref: '#/components/schemas/cdcLifecycleAction'
        postStop:
          $ref: '#/components/schemas/cdcLifecycleAction'
    cdcSettings:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/cdcClusterConfig'
        account:
          $ref: '#/components/schemas/cdcClusterAccount'
        endpoint:
          $ref: '#/components/schemas/cdcClusterEndpoint'
        lifecycle:
          $ref: '#/components/schemas/cdcLifecycle'
    cdcConfigResourceType:
      type: string
      enum:
        - ConfigMap
        - Secret
    cdcConfigFormatType:
      type: string
      enum:
        - Ini
        - Toml
        - Properties
    cdcToolTemplate:
      type: object
      properties:
        image:
          type: string
        command:
          type: array
          items:
            type: string
        args:
          type: array
          items:
            type: string
        replicas:
          type: integer
          format: int32
          nullable: true
        configFileName:
          type: string
        configFilePath:
          type: string
        configResourceType:
          $ref: '#/components/schemas/cdcConfigResourceType'
        configFormat:
          $ref: '#/components/schemas/cdcConfigFormatType'
        localRecoveryEnabled:
          description: whether to enable local recovery feature
          type: boolean
        localRecoveryStorageClass:
          type: string
          nullable: true
        localRecoveryStorageSize:
          description: size of local recovery storage, the unit is MiB
          type: integer
          nullable: true
        localRecoveryPath:
          type: string
        LogPath:
          type: string
        startupTimeoutMinutes:
          type: integer
          format: int32
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
    cdcWorkerTemplate:
      type: object
      properties:
        usingTool:
          $ref: '#/components/schemas/cdcToolTemplate'
    cdcOption:
      type: object
      properties:
        versions:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/cdcSettings'
        sink:
          $ref: '#/components/schemas/cdcSettings'
        worker:
          $ref: '#/components/schemas/cdcWorkerTemplate'
    internationalDesc:
      type: object
      properties:
        zh-CN:
          type: string
        en-US:
          type: string
    moduleDefinitionValues:
      type: object
      properties:
        moduleValue:
          type: string
        order:
          type: integer
        weight:
          type: number
          format: double
          nullable: true
    moduleDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/internationalDesc'
        values:
          type: array
          items:
            $ref: '#/components/schemas/moduleDefinitionValues'
    engineDefinitionVersionQuery:
      type: object
      properties:
        sql:
          type: string
          description: the query to get the version, if not provided, will use inherited query from engine definition
          nullable: true
        column:
          type: string
          nullable: true
        regex:
          type: string
          nullable: true
        min:
          type: number
          nullable: true
        max:
          type: number
          nullable: true
    engineDefinitionVersion:
      type: object
      properties:
        version:
          type: string
          nullable: true
        query:
          $ref: '#/components/schemas/engineDefinitionVersionQuery'
    configType:
      enum:
        - string
        - integer
        - float
      type: string
      description: the type of config
    connectionCfgType:
      enum:
        - database
      type: string
    extraConfig:
      type: object
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/internationalDesc'
        type:
          $ref: '#/components/schemas/configType'
        isRequired:
          type: boolean
        connectionCfgType:
          $ref: '#/components/schemas/connectionCfgType'
    engineDefinitionDetail:
      type: object
      properties:
        definitionName:
          type: string
        availableModes:
          type: array
          description: definition supported available modes, empty means all modes are supported
          items:
            type: string
        availableVersions:
          type: array
          description: definition supported available versions, empty means all versions are supported
          items:
            $ref: '#/components/schemas/engineDefinitionVersion'
        extraCfgs:
          type: array
          items:
            $ref: '#/components/schemas/extraConfig'
    engineDefinition:
      type: object
      properties:
        name:
          type: string
        engineName:
          type: string
        escapes:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/engineDefinitionDetail'
        target:
          $ref: '#/components/schemas/engineDefinitionDetail'
    eventType:
      enum:
        - dml
        - ddl
        - dcl
      type: string
    eventObject:
      type: object
      properties:
        eventType:
          $ref: '#/components/schemas/eventType'
        eventValue:
          type: string
    replicationMetadataObject:
      type: object
      properties:
        metadataType:
          type: string
        children:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/replicationMetadataObject'
    mappingDescription:
      type: object
      properties:
        objectExpressionTips:
          $ref: '#/components/schemas/internationalDesc'
          nullable: true
    engineMapping:
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        modules:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/eventObject'
            description: the events of the engine mapping, the first one is the default event
        replicationMetadata:
          $ref: '#/components/schemas/replicationMetadataObject'
        descriptions:
          $ref: '#/components/schemas/mappingDescription'
        preCheckers:
          type: array
          items:
            type: string
    standardResource:
      type: object
      properties:
        limit:
          type: number
          format: double
          nullable: true
        request:
          type: number
          format: double
          nullable: true
    standardDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/internationalDesc'
        description:
          $ref: '#/components/schemas/internationalDesc'
          nullable: true
        isDefault:
          type: boolean
          nullable: true
        cpu:
          $ref: '#/components/schemas/standardResource'
          description: cpu resource, the unit is vCPU
        memory:
          $ref: '#/components/schemas/standardResource'
          description: memory resource, the unit is Gi
    dataReplicationOption:
      type: object
      properties:
        moduleDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/moduleDefinition'
        engineDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/engineDefinition'
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/engineMapping'
        standards:
          type: array
          items:
            $ref: '#/components/schemas/standardDefinition'
    ImportSourceCategory:
      type: string
      description: Data source category
      enum:
        - engine
    ImportCapabilityType:
      type: string
      description: Import capability type
      enum:
        - structure
        - snapshot
        - cdc
    ImportBaseField:
      type: object
      properties:
        name:
          type: string
          description: Field's programmatic name (e.g., 'db_host')
        label:
          type: string
          description: User-facing label for UI (e.g., 'Database Host')
        required:
          type: boolean
          description: Whether the field is required
          default: false
        sensitive:
          type: boolean
          description: Whether it contains sensitive information (e.g., password)
          default: false
        description:
          type: string
          description: Detailed usage instructions for the field
        placeholder:
          type: string
          description: Placeholder text for the input
      required:
        - name
        - label
    ImportFieldType:
      type: string
      description: Import field type
      enum:
        - string
        - integer
        - number
        - boolean
        - enum
    ImportStringValidation:
      description: Validation rules for string field type
      type: object
      properties:
        minLength:
          type: integer
          description: Minimum length
        maxLength:
          type: integer
          description: Maximum length
        pattern:
          type: string
          description: Regex pattern
    ImportStringField:
      description: Configuration for a string-type field.
      allOf:
        - $ref: '#/components/schemas/ImportBaseField'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ImportFieldType'
            default:
              type: string
              nullable: true
            validation:
              $ref: '#/components/schemas/ImportStringValidation'
          required:
            - type
    ImportNumericValidation:
      description: Validation rules for numeric field type
      type: object
      properties:
        min:
          type: number
          description: Minimum value
        max:
          type: number
          description: Maximum value
    ImportIntegerField:
      description: Configuration for an integer-type field.
      allOf:
        - $ref: '#/components/schemas/ImportBaseField'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ImportFieldType'
            default:
              type: integer
              nullable: true
            validation:
              $ref: '#/components/schemas/ImportNumericValidation'
          required:
            - type
    ImportNumberField:
      description: Configuration for a number-type field.
      allOf:
        - $ref: '#/components/schemas/ImportBaseField'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ImportFieldType'
            default:
              type: number
              nullable: true
            validation:
              $ref: '#/components/schemas/ImportNumericValidation'
          required:
            - type
    ImportBooleanField:
      description: Configuration for a boolean-type field.
      allOf:
        - $ref: '#/components/schemas/ImportBaseField'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ImportFieldType'
            default:
              type: boolean
              nullable: true
          required:
            - type
    ImportEnumField:
      description: Configuration for an enum-type field.
      allOf:
        - $ref: '#/components/schemas/ImportBaseField'
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/ImportFieldType'
            options:
              type: array
              items:
                type: string
              description: List of available options for the enum.
              minItems: 1
            default:
              type: string
              nullable: true
          required:
            - type
            - options
    ImportConnectionField:
      description: Connection field configuration. Use `oneOf` to enforce strict type-specific properties.
      oneOf:
        - $ref: '#/components/schemas/ImportStringField'
        - $ref: '#/components/schemas/ImportIntegerField'
        - $ref: '#/components/schemas/ImportNumberField'
        - $ref: '#/components/schemas/ImportBooleanField'
        - $ref: '#/components/schemas/ImportEnumField'
    ImportSupportedSource:
      description: Supported data source information
      type: object
      properties:
        type:
          type: string
          description: Data source type
        category:
          $ref: '#/components/schemas/ImportSourceCategory'
        name:
          type: string
          description: Display name
        description:
          type: string
          description: Description
        guide:
          type: string
          description: Usage guide
        supported:
          type: boolean
          description: Whether supported
          default: true
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/ImportCapabilityType'
          description: List of supported capabilities
        requirements:
          type: array
          items:
            type: string
          description: List of usage requirements
        connectionFields:
          type: array
          items:
            $ref: '#/components/schemas/ImportConnectionField'
          description: Connection field configuration
        supportedVersions:
          type: array
          items:
            type: string
          description: List of supported versions
      required:
        - type
        - category
        - name
        - supported
    importOption:
      type: object
      properties:
        supportedSources:
          type: array
          items:
            $ref: '#/components/schemas/ImportSupportedSource'
          description: List of supported data sources for import
        sinkEngineName:
          type: string
          description: Engine name for sink/target database
    engineOption:
      type: object
      required:
        - engineName
        - title
        - description
        - versions
        - components
        - modes
        - dms
        - endpoints
        - promote
        - stop
        - start
        - restart
        - hscale
        - vscale
        - dashboards
        - logs
        - parameters
      properties:
        engineName:
          type: string
        maturityLevel:
          type: string
          description: engine maturity level
        title:
          type: string
        status:
          $ref: '#/components/schemas/engineOptionStatus'
        description:
          $ref: '#/components/schemas/localizedDescription'
        versions:
          type: array
          items:
            type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/componentOption'
        modes:
          type: array
          items:
            $ref: '#/components/schemas/modeOption'
        account:
          $ref: '#/components/schemas/accountOption'
        database:
          $ref: '#/components/schemas/databaseOption'
        dms:
          $ref: '#/components/schemas/dmsOption'
        backup:
          description: If this field is null, backup is not supported.
          $ref: '#/components/schemas/backupOption'
        bench:
          $ref: '#/components/schemas/benchOption'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/endpointOption'
        networkModes:
          $ref: '#/components/schemas/networkModeOption'
        promote:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        stop:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        start:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        restart:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        hscale:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        vscale:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        license:
          type: object
          required:
            - secretName
            - fileName
          properties:
            required:
              type: boolean
              description: Indicate whether the current cluster requires users to input the license
            secretName:
              type: string
              description: support to refer the cluster name with variable ${clusterName}
            fileName:
              type: string
              description: the license file name
            components:
              type: array
              items:
                $ref: '#/components/schemas/licenseOption'
        storageExpansion:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        rebuildInstance:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        upgrade:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        metrics:
          $ref: '#/components/schemas/metricsOption'
        dashboards:
          type: array
          items:
            $ref: '#/components/schemas/dashboardOption'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/logOption'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameterOption'
        disasterRecovery:
          $ref: '#/components/schemas/disasterRecoveryOption'
        cdc:
          type: array
          items:
            $ref: '#/components/schemas/cdcOption'
        dataReplication:
          $ref: '#/components/schemas/dataReplicationOption'
          nullable: true
        import:
          $ref: '#/components/schemas/importOption'
          nullable: true
    engineOptionList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of engineOption objects in the list
          items:
            $ref: '#/components/schemas/engineOption'
    engineLicense:
      type: object
      required:
        - engineName
        - name
      properties:
        engineName:
          type: string
        name:
          type: string
        key:
          type: string
          x-nullable: false
        description:
          type: string
        expiredAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        id:
          type: string
          x-nullable: false
        idString:
          type: string
    engineLicenseList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of engineLicense objects in the list
          items:
            $ref: '#/components/schemas/engineLicense'
    datasource:
      required:
        - type
      type: object
      properties:
        id:
          type: string
          description: the id of datasource
        name:
          type: string
          description: the name of datasource
        type:
          type: string
          description: the database type
        options:
          additionalProperties:
            type: object
          type: object
    datasourceList:
      items:
        $ref: '#/components/schemas/datasource'
      type: array
    DmsQueryBaseRequest:
      type: object
      properties:
        database:
          type: string
          description: the database of the table or view
          default: ''
        query:
          type: string
          description: the sql string
        limit:
          type: integer
          description: return limited number of data
          default: 200
    DmsQueryRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/DmsQueryBaseRequest'
        - type: object
          properties:
            noRecord:
              type: boolean
              description: if noRecord is true, the query(s) will not be added to query history
              nullable: true
    DmsPagination:
      type: object
      properties:
        rows_count:
          type: integer
        page:
          type: integer
        pages_count:
          type: integer
        per_page:
          type: integer
    DmsRow:
      type: array
      items:
        type: object
    DmsResultStats:
      type: object
      properties:
        columns_count:
          type: integer
        rows_count:
          type: integer
        rows_affected:
          type: integer
        query_start_time:
          type: string
          format: date-time
        query_finish_time:
          type: string
          format: date-time
    DmsResult:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/DmsPagination'
        columns:
          type: array
          items:
            type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/DmsRow'
        stats:
          $ref: '#/components/schemas/DmsResultStats'
    DmsQueryResponse:
      type: object
      properties:
        data:
          type: array
          description: result set of query
          items:
            $ref: '#/components/schemas/DmsResult'
        errMessage:
          type: array
          description: error message set of query
          items:
            type: string
          nullable: true
    DmsExportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/DmsQueryBaseRequest'
        - type: object
          properties:
            format:
              type: string
              description: the file format for export data
    DmsImportRequest:
      description: the data of the import task
      type: object
      required:
        - fileType
        - tableName
        - database
      properties:
        firstLineColumn:
          type: boolean
          description: whether the first line of the file is column name
          default: true
        fieldsTerminalBy:
          type: string
          description: the delimiter of fields
          default: ','
        fieldNames:
          type: array
          description: the field names
          items:
            type: string
          nullable: true
        ignoreForeignKey:
          type: boolean
          description: whether ignore foreign key when import data or not
          default: false
        fileType:
          type: string
        file:
          type: string
          format: binary
          description: the data file, csv or other format
        tableName:
          type: string
          description: the target table name
        database:
          type: string
          description: the database of the specific table, required for the engine which don't need to specify database when create database, such as mysql
        skipNull:
          type: boolean
          description: whether skip the row which has null value when import data
          default: true
    DmsImportFormData:
      description: the data of the import task
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: the data file, csv or other format
    DmsTaskInfo:
      type: object
      properties:
        id:
          type: string
          description: task id
        datasource:
          type: string
          description: datasource id
        message:
          type: string
          description: if task failed, this will show why
          nullable: true
        status:
          type: string
          description: task status
        type:
          type: string
          description: task type
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    DmsTaskList:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/DmsTaskInfo'
    DmsSchemaList:
      type: array
      items:
        type: string
    DmsObject:
      type: object
      x-nullable: true
      properties:
        type:
          type: string
          description: Type is the type of db object, like 'Table', 'Views', 'Functions'
        count:
          type: integer
          format: int64
          description: Count is the number of each object
    DmsObjectList:
      type: array
      items:
        $ref: '#/components/schemas/DmsObject'
    DmsObjectNameList:
      type: array
      items:
        type: string
    DmsObjectResponse:
      type: object
      properties:
        data:
          type: object
          description: The data of the Object
          additionalProperties: true
        type:
          type: string
          description: The type of the Object
    DmsQueryHistory:
      type: object
      properties:
        sql:
          title: SQL
          type: string
          x-nullable: true
          description: executed sql statements
        errMassage:
          title: errMassage
          type: string
          x-nullable: true
          description: sql executed massage
        createdAt:
          title: time
          type: string
          format: date-time
          x-go-type: time.Time
          description: sql executed time
        duration:
          title: duration
          type: integer
          format: int64
          x-nullable: true
          description: sql executed duration
    DmsQueryHistoryList:
      type: array
      items:
        $ref: '#/components/schemas/DmsQueryHistory'
    DmsExplainRequest:
      type: object
      properties:
        query:
          type: string
          description: the sql string
        database:
          type: string
          description: the database for explaining the SQL
          default: ''
    DmsGenerateDdlOperationType:
      type: string
      description: operation type
      enum:
        - table
        - view
    DmsTableColumn:
      type: object
      properties:
        name:
          type: string
          description: The name of the column
        type:
          type: string
          description: The data type of the column
        length:
          type: integer
          description: The length of the column if applicable
          nullable: true
        scale:
          type: integer
          description: The number of decimal places for numeric columns
          nullable: true
        notNull:
          type: boolean
          description: Whether the column can be null
        default:
          type: string
          description: The default value for the column
          nullable: true
        comment:
          type: string
          description: A comment describing the column
          nullable: true
        autoIncrement:
          type: boolean
          description: Whether the column is auto-incremented
        seed:
          type: integer
          description: used for autoIncrement
          nullable: true
        increment:
          type: integer
          description: used for autoIncrement
          nullable: true
        unsigned:
          type: boolean
          description: Whether the column is unsigned
        onUpdateCurrentTimestamp:
          type: boolean
          description: Whether the column updates to the current timestamp on update
        hidden:
          type: boolean
          description: Whether the column is hidden
        generated:
          type: object
          description: Generated column information
          nullable: true
          properties:
            type:
              type: string
              description: The type of generation (e.g., VIRTUAL or STORED)
            expression:
              type: string
              description: The expression used to generate the column's value
    DmsTableIndex:
      type: object
      properties:
        name:
          type: string
          description: The name of the index
        type:
          type: string
          description: The type of the index (e.g., UNIQUE, FULLTEXT)
        columns:
          type: array
          items:
            type: string
          description: List of columns included in the index
        comment:
          type: string
          description: A comment describing the index
          nullable: true
        hidden:
          type: boolean
          description: Whether the index is hidden
        otherOptions:
          type: array
          items:
            type: string
          description: Other options for the index
          nullable: true
    DmsPrimaryKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the primary key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the primary key
    DmsForeignKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the foreign key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the foreign key
        reference:
          type: object
          description: The reference details of the foreign key
          properties:
            database:
              type: string
              description: The referenced database
            schema:
              type: string
              description: The referenced schema
            table:
              type: string
              description: The referenced table
            columns:
              type: array
              items:
                type: string
              description: The referenced columns
            matchType:
              type: string
              description: The match type for the foreign key (e.g., SIMPLE, FULL)
              nullable: true
        onUpdate:
          type: string
          description: The action on update (e.g., CASCADE, NO ACTION)
        onDelete:
          type: string
          description: The action on delete (e.g., CASCADE, NO ACTION)
    DmsUniqueKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the unique key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the unique key
        include:
          type: array
          items:
            type: string
          description: Additional columns included in the unique key
          nullable: true
    DmsCheckConstraint:
      type: object
      properties:
        name:
          type: string
          description: The name of the check constraint
        expression:
          type: string
          description: The expression for the check constraint
        enforced:
          type: boolean
          description: Whether the check constraint is enforced
    DmsExcludeConstraint:
      type: object
      properties:
        name:
          type: string
          description: The name of the exclude constraint
          nullable: true
        indexMethod:
          type: string
          description: The index method (e.g., GIST, BTREE)
        exclude:
          type: array
          items:
            type: object
            properties:
              columns:
                type: string
                description: The column(s) involved in the exclusion
              operator:
                type: string
                description: The operator used in the exclusion
    DmsTablePartitioning:
      type: object
      properties:
        statement:
          type: string
          description: The partitioning statement for the table
    DmsTableOptions:
      type: object
      properties:
        engine:
          type: string
          description: The storage engine for the table
        charset:
          type: string
          description: The character set for the table
        collation:
          type: string
          description: The collation for the table
        type:
          type: string
          description: The type of the table
        otherOptions:
          type: array
          items:
            type: string
          description: Other options for the table
          nullable: true
    DmsTableMetadata:
      type: object
      properties:
        name:
          type: string
          description: The name of the table
        schema:
          type: string
          description: The schema of the table
          nullable: true
        database:
          type: string
          description: The database where the table resides
          nullable: true
        comment:
          type: string
          description: A comment describing the table
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DmsTableColumn'
          description: List of columns in the table
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/DmsTableIndex'
          description: List of indexes on the table
          nullable: true
        primaryKey:
          type: object
          description: The primary key of the table
          nullable: true
          $ref: '#/components/schemas/DmsPrimaryKey'
        foreignKeys:
          type: array
          items:
            $ref: '#/components/schemas/DmsForeignKey'
          description: List of foreign keys on the table
          nullable: true
        uniqueKeys:
          type: array
          items:
            $ref: '#/components/schemas/DmsUniqueKey'
          description: List of unique keys on the table
          nullable: true
        checkConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DmsCheckConstraint'
          description: List of check constraints on the table
          nullable: true
        excludeConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DmsExcludeConstraint'
          description: List of exclude constraints on the table
          nullable: true
        partitioning:
          type: object
          $ref: '#/components/schemas/DmsTablePartitioning'
          description: The partitioning of the table
          nullable: true
        options:
          type: object
          $ref: '#/components/schemas/DmsTableOptions'
          description: The options for the table
          nullable: true
    DmsViewMetadata:
      type: object
      properties:
        viewName:
          type: string
          description: The name of the view
        database:
          type: string
          description: The database in which the view will be created
        replace:
          type: boolean
          description: Whether to replace the existing view if it exists
          nullable: true
        definer:
          type: string
          description: The definer of the view
          nullable: true
        sqlSecurity:
          type: string
          description: The SQL security context of the view (e.g., DEFINER or INVOKER)
          nullable: true
        checkOption:
          type: string
          description: The WITH CHECK OPTION clause (e.g., CASCADED or LOCAL)
          nullable: true
        algorithm:
          type: string
          description: The algorithm used for the view (e.g., UNDEFINED, MERGE, TEMPTABLE)
          nullable: true
        definition:
          type: string
          description: The SQL statement defining the view
          nullable: true
    DmsGenerateDDLRequest:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/DmsGenerateDdlOperationType'
        tableMetadata:
          $ref: '#/components/schemas/DmsTableMetadata'
        viewMetadata:
          $ref: '#/components/schemas/DmsViewMetadata'
    ShowDataRequest:
      type: object
      properties:
        database:
          type: string
          description: the database of the table or view
          default: ''
        table:
          type: string
          description: the target table or view name
        limit:
          type: integer
          description: return limited number of data
          nullable: true
    DmsSession:
      type: object
      required:
        - id
        - user
        - host
      properties:
        id:
          type: integer
          description: session ID
          format: int64
        user:
          type: string
          description: user name
        tenant:
          type: string
          description: tenant name
          nullable: true
        host:
          type: string
          description: client host information
        db:
          type: string
          description: database name
          nullable: true
        command:
          type: string
          description: current command
          nullable: true
        time:
          type: integer
          description: session duration time
          format: int64
          nullable: true
        state:
          type: string
          description: session state
          nullable: true
        info:
          type: string
          description: additional session information
          nullable: true
        ip:
          type: string
          description: server ip
          nullable: true
        port:
          type: integer
          description: server port
          format: int64
          nullable: true
        protected:
          type: boolean
          description: whether the session is protected and don't allow to be killed
          x-omitempty: false
    DmsSessionList:
      type: array
      items:
        $ref: '#/components/schemas/DmsSession'
    ipWhitelist:
      description: whitelist
      properties:
        id:
          description: ID of the whitelist
          title: ID
          type: string
        name:
          description: Name of the whitelist
          title: Name
          type: string
        description:
          description: Description
          title: Description
          type: string
        addresses:
          items:
            type: string
          description: Whitelist IP Addresses
          title: Addresses
          type: array
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - id
        - name
        - addresses
      type: object
    ipWhitelistList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          x-nullable: false
          description: Items is the list of whitelist objects in the Cluster
          items:
            $ref: '#/components/schemas/ipWhitelist'
    role:
      description: Role information
      type: object
      properties:
        name:
          description: The name of the role
          type: string
        type:
          description: The type of the role
          type: string
        description:
          description: The description of the role
          type: string
        createdAt:
          description: The time when the role was created. Read-Only
          format: date-time
          type: string
        updatedAt:
          description: The time when the role was updated. Read-Only
          format: date-time
          type: string
    roleList:
      description: RoleList is a list of Roles
      properties:
        items:
          description: Items is the list of Role objects in the list
          items:
            $ref: '#/components/schemas/role'
          type: array
      required:
        - items
      type: object
    roleCreate:
      description: Role create
      type: object
      properties:
        name:
          description: The name of the role
          type: string
        description:
          description: The description of the role
          type: string
      required:
        - name
    roleUpdate:
      description: Role update
      type: object
      properties:
        description:
          description: The description of the role
          type: string
    class:
      type: object
      required:
        - engine
        - mode
        - classType
      properties:
        engine:
          type: string
        code:
          type: string
        codeShort:
          type: string
        mode:
          type: string
        cpu:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        cpuRequest:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        cpuLimit:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        memory:
          type: number
          multipleOf: 0.1
          description: memory, unit is Gi
          minimum: 0.05
          format: double
        memoryRequest:
          type: number
          multipleOf: 0.1
          description: memory request, unit is Gi
          minimum: 0.05
          format: double
        memoryLimit:
          type: number
          multipleOf: 0.1
          description: memory limit, unit is Gi
          minimum: 0.05
          format: double
        component:
          type: string
        classType:
          type: string
    classType:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the class type.
        name:
          type: string
          pattern: ^[a-z0-9]{1,8}$
          description: Consists of lowercase English letters and numbers, 1-8 characters long. Used to add to the class type name.
        description:
          $ref: '#/components/schemas/localizedDescription'
        displayName:
          $ref: '#/components/schemas/localizedDescription'
        createdAt:
          type: string
          format: date-time
          description: Creation time.
    featurePreReleaseType:
      type: string
      description: Indicates the maturity level of a feature
      enum:
        - ALPHA
        - BETA
        - ''
        - DEPRECATED
    feature:
      properties:
        name:
          description: Name of a feature
          type: string
        enabled:
          description: The enablement state for the feature
          type: boolean
        preRelease:
          $ref: '#/components/schemas/featurePreReleaseType'
      required:
        - name
        - enabled
        - preRelease
      type: object
    featureList:
      description: A list of feature
      properties:
        items:
          description: The list of feature
          items:
            $ref: '#/components/schemas/feature'
          type: array
      required:
        - items
      type: object
    CPU:
      type: object
      properties:
        cpu_capacity:
          type: string
        cpu_capacity_max:
          type: string
        cpu_assigned:
          type: string
        cpu_assigned_max:
          type: string
    Memory:
      type: object
      properties:
        mem_capacity:
          type: string
        memory_limit:
          type: string
        mem_assigned:
          type: string
    LogDisk:
      type: object
      properties:
        log_disk_capacity:
          type: string
        log_disk_assigned:
          type: string
        log_disk_in_use:
          type: string
    DataDisk:
      type: object
      properties:
        data_disk_capacity:
          type: string
        data_disk_allocated:
          type: string
        data_disk_in_use:
          type: string
        data_disk_health_status:
          type: string
        data_disk_abnormal_time:
          type: string
    Tenant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        mode:
          type: string
        create_at:
          type: string
        role:
          type: string
        primary_zone:
          type: string
        status:
          type: string
        primary_zone_proxy:
          type: string
        chart_set:
          type: string
        resource:
          type: string
        cpu:
          $ref: '#/components/schemas/CPU'
        memory:
          $ref: '#/components/schemas/Memory'
        log_disk:
          $ref: '#/components/schemas/LogDisk'
        data_disk:
          $ref: '#/components/schemas/DataDisk'
    TenantList:
      type: array
      description: result set of Tenant
      items:
        $ref: '#/components/schemas/Tenant'
    DmsObParameter:
      type: object
      required:
        - name
        - value
        - description
      properties:
        name:
          description: The name of the parameter
          type: string
        value:
          description: The value of the parameter
          type: string
        dataType:
          description: The type of the parameter value
          type: string
          x-omitempty: false
        description:
          description: The description of the parameter
          type: string
        enum:
          description: The value options of the parameter
          type: array
          x-omitempty: false
          items: {}
        maximum:
          description: The maximum value of the parameter
          type: string
        minimum:
          description: The minimum value of the parameter
          type: string
        immutable:
          description: Whether the parameter is an immutable parameter, immutable parameters cannot be modified
          type: boolean
        isVariable:
          description: Whether the parameter is variable or a parameter
          type: boolean
        editLevel:
          description: EditLevel represents the way the configuration item is modified.
          type: string
        readOnly:
          description: Whether the parameter is read-only
          type: boolean
          x-omitempty: false
    DmsParameterList:
      type: array
      items:
        $ref: '#/components/schemas/DmsObParameter'
    DmsObAlterParameter:
      type: object
      required:
        - parameter
        - isVariable
        - tenantName
        - mode
        - newValue
      properties:
        parameter:
          type: string
          description: parameter to alter
        newValue:
          type: string
          description: new value of parameter
        mode:
          type: string
          description: tenant mode
        tenantName:
          type: string
          description: tenant name
        isVariable:
          type: boolean
          description: whether the param is tenant variable or param
    recycleBinClusterListItem:
      description: information of kubeblocks cluster in recycle bin
      required:
        - cloudProvider
        - engine
        - environmentName
        - id
        - name
        - state
        - version
        - stoppedAt
      type: object
      properties:
        cloudProvider:
          description: Cloud Provider
          type: string
        cloudRegion:
          description: Cloud Provider
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        displayName:
          description: Display name of cluster.
          type: string
        engine:
          description: Cluster Application Engine
          type: string
        mode:
          description: Cluster topology mode
          type: string
        environmentName:
          description: Environment Name
          type: string
        id:
          description: Cluster Recycle Bin ID
          type: string
        clusterId:
          description: Cluster ID
          type: string
        name:
          description: Name of cluster. Name must be unique within an Org
          type: string
        version:
          description: Cluster Application Version
          type: string
        classCode:
          description: Cluster main component classCode
          type: string
        storage:
          description: Cluster main component storage
          type: string
        orgName:
          description: Name of the Org
          type: string
        state:
          description: state represents whether the cluster has been deleted by a stop opsRequest,  and therefore, whether it is in the recycle bin. It is differnt from the Status.Phase of the cluster in k8s.
          type: string
        stoppedAt:
          title: StoppedAt
          type: string
          description: 'StoppedAt is a timestamp representing the server time when this object was stopped and moved to the recycle bin. '
          format: date-time
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created.
          format: date-time
        expiredAt:
          title: ExpiredAt
          type: string
          description: ExpiredAt is a timestamp representing the server time when this object will be expired, and deleted automatically.
          format: date-time
    recycleBinClusterList:
      description: recycleBinClusterList is a list of KubeBlocks clusters in the recycle bin
      properties:
        items:
          description: Items is the KubeBlocks cluster objects in the recycleBinClusterList
          items:
            $ref: '#/components/schemas/recycleBinClusterListItem'
          type: array
      required:
        - items
      type: object
    recycleBinCluster:
      required:
        - engine
        - environmentName
        - name
      type: object
      properties:
        id:
          title: ID
          type: string
          description: Cluster Recycle Bin ID
        clusterId:
          title: Cluster ID
          type: string
          description: Cluster ID
        orgName:
          title: Org Name
          type: string
          description: Org Name
        cloudProvider:
          title: Cloud Provider
          type: string
          description: Cloud Provider
        environmentId:
          title: Environment ID
          type: string
          description: ID of the environment
        environmentName:
          title: Environment Name
          type: string
          description: Environment Name
        environmentType:
          title: Environment Type
          type: string
          description: Environment Types
        cloudRegion:
          title: Cloud Region
          type: string
          description: Cloud Region
        namespace:
          title: Environment Namespace
          type: string
          default: kubeblocks-cloud-ns
          description: Environment Namespace
        name:
          title: Name
          type: string
          description: Name of cluster. Name must be unique within an Org
        hash:
          title: Hash
          type: string
          description: Hash of cluster. Name must be unique within an Org
        engine:
          title: Engine
          type: string
          description: Cluster Application Engine
        values:
          type: object
          additionalProperties: true
          description: Values
        version:
          title: Version
          type: string
          description: Cluster Application Version
        replicas:
          title: Replicas
          type: integer
          description: The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
        storage:
          title: Storage(Gi)
          minimum: 1
          type: number
          description: Storage size, the unit is Gi.
          format: double
        status:
          title: Status
          type: string
          description: status represents the actual status of the cluster in k8s,  it is different from the state of the cluster in recycle bin,  which means whether the cluster has been deleted by a stop opsRequest.
        state:
          title: state
          type: string
          description: state represents whether the cluster has been deleted by a stop opsRequest,  and therefore, whether it is in the recycle bin. It is differnt from the Status of the cluster undeleted.
        mode:
          title: Mode
          type: string
          description: Cluster topology mode
        components:
          $ref: '#/components/schemas/components'
        singleZone:
          title: Single availability zones
          description: Use single availability zones
          type: boolean
          default: false
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        backup:
          description: Set cluster backup
          $ref: '#/components/schemas/clusterBackup'
        stoppedAt:
          title: StoppedAt
          type: string
          description: 'StoppedAt is a timestamp representing the server time when this object was stopped and moved to the recycle bin. '
          format: date-time
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created.
          format: date-time
        expiredAt:
          title: ExpiredAt
          type: string
          description: ExpiredAt is a timestamp representing the server time when this object will be expired, and deleted automatically.
          format: date-time
      description: KubeBlocks cluster(in recycle bin) information
    projectItem:
      description: Project item.
      type: object
      required:
        - name
        - createdAt
        - clusterTotal
        - status
      properties:
        name:
          type: string
          description: The name of the project.
        clusterTotal:
          type: integer
          description: The total number of clusters in the project.
        createdAt:
          type: string
          format: date-time
          description: The time the project was created.
        status:
          type: string
          description: The status of project.
    projectList:
      description: Project list.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/projectItem'
          description: The list of projects.
    disasterRecoveryTask:
      description: Task information of disasterRecovery job
      properties:
        logicalInstanceID:
          description: Logical instance ID
          type: string
          nullable: true
        taskId:
          description: Task ID
          type: string
          nullable: true
        clusterTaskId:
          description: Cluster task ID
          type: string
          nullable: true
      required:
        - taskId
      type: object
    taskType:
      type: string
      enum:
        - ScaleOut
        - ScaleIn
        - DeleteDisasterRecoveryCluster
        - CreateDisasterRecoveryCluster
        - PromoteDisasterRecoveryCluster
      description: Type of task operation
    taskSummary:
      type: object
      properties:
        taskType:
          $ref: '#/components/schemas/taskType'
        progress:
          type: integer
          description: Progress percentage of the task
          minimum: 0
          maximum: 100
        message:
          type: string
          description: Detailed message about the task status
          x-nullable: true
    disasterRecoveryClusterItem:
      description: DisasterRecovery cluster information
      properties:
        logicalInstanceID:
          description: Logical instance ID
          type: string
        cluster:
          $ref: '#/components/schemas/clusterListItem'
        taskSummary:
          $ref: '#/components/schemas/taskSummary'
      type: object
    disasterRecoveryClusterList:
      description: disasterRecoveryClusterList is a list of disaster recovery clusters
      properties:
        items:
          description: Items is the list of disaster recovery cluster objects in the list
          items:
            $ref: '#/components/schemas/disasterRecoveryClusterItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    disasterRecoveryCreate:
      description: DisasterRecoveryCreate is the description to create a DisasterRecovery cluster
      properties:
        cluster:
          $ref: '#/components/schemas/clusterCreate'
      required:
        - cluster
      type: object
    disasterRecoveryPromote:
      description: the Promote object for disasterRecovery instance
      properties:
        reason:
          description: the reason for promoting
          type: string
      type: object
    disasterRecoveryEventType:
      description: 'the event type of disasterRecovery history, support values: [CreateInstance, DeleteInstance, Promote]'
      enum:
        - CreateInstance
        - DeleteInstance
        - Promote
      type: string
      nullable: true
    disasterRecoveryStatus:
      default: Unknown
      description: 'the status of promote event, support values: [Succeed, Failed, Running, Unknown]'
      enum:
        - Succeed
        - Failed
        - Running
        - Unknown
      type: string
      nullable: true
    disasterRecoveryHistoryItem:
      description: DisasterRecovery history detail for Cluster
      properties:
        taskID:
          description: the ID of disaster recovery task in TaskFlow
          type: string
          nullable: true
        parentClusterID:
          description: the ID of parent cluster
          type: string
          nullable: true
        parentClusterName:
          description: the Name of parent cluster
          type: string
          nullable: true
        parentEnvName:
          description: parent env name
          type: string
          nullable: true
        clusterID:
          description: the ID of promote cluster
          type: string
          nullable: true
        clusterName:
          description: the Name of promote cluster
          type: string
          nullable: true
        envName:
          description: env name
          type: string
          nullable: true
        eventType:
          $ref: '#/components/schemas/disasterRecoveryEventType'
        reason:
          description: the reason of promote
          type: string
          nullable: true
        operator:
          description: the operator name
          type: string
        operatorId:
          description: the user ID of the operator
          type: string
        createdAt:
          description: the create time of promote event
          type: string
          format: date-time
        updateAt:
          description: the update time of promote event
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/disasterRecoveryStatus'
      type: object
    disasterRecoveryHistory:
      description: DisasterRecovery history for Cluster
      properties:
        items:
          description: Items is the list of DisasterRecovery logs
          items:
            $ref: '#/components/schemas/disasterRecoveryHistoryItem'
          type: array
      required:
        - items
      type: object
    disasterRecoveryStatusResponse:
      description: Status of the Disaster Recovery instance
      properties:
        clusterId:
          title: Cluster ID
          type: string
          description: Unique identifier for the cluster
        clusterName:
          title: Cluster Name
          type: string
          nullable: true
          description: Name of the cluster
        displayName:
          title: Display Name
          type: string
          nullable: true
          description: User-friendly name of the cluster
        status:
          title: Status
          type: string
          nullable: true
          description: Current operational status of the cluster
        parentId:
          title: Parent Cluster ID
          type: string
          description: ID of the parent cluster, if applicable; can be empty if there is no parent relationship
        parentName:
          title: Parent Cluster Name
          type: string
          nullable: true
          description: Name of the parent cluster
        parentDisplayName:
          title: Parent Cluster Display Name
          type: string
          nullable: true
          description: User-friendly name of the parent cluster
        parentStatus:
          title: Parent Cluster Status
          type: string
          nullable: true
          description: Current operational status of the parent cluster
        delay:
          title: Delay
          type: number
          format: double
          nullable: true
          description: Delay time in seconds
        currentReplicationPoint:
          title: Current Replication Point
          type: string
          nullable: true
          description: Current replication point for the disaster recovery instance
      required:
        - clusterId
        - parentId
      type: object
    availableClusterList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: ID of the cluster
          name:
            type: string
            description: Name of the cluster
          displayName:
            type: string
            description: Display name of the cluster
          clusterType:
            type: string
    relatedClusterListItem:
      type: object
      x-nullable: true
      description: the simplified cluster info for relation
      required:
        - id
        - name
        - clusterDefinition
        - version
        - mode
        - status
        - environmentName
        - resource
        - storage
        - createdAt
      properties:
        id:
          type: string
          description: ID of the cluster
        name:
          type: string
          description: Name of the cluster
        clusterDefinition:
          type: string
          description: Type of the cluster
        version:
          type: string
        mode:
          type: string
        status:
          type: string
        environmentName:
          type: string
          description: Name of the environment
        resource:
          type: string
          description: Resource of the cluster
        storage:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Time when the cluster was created
        proxyUrl:
          type: string
          description: Proxy URL of the cluster
    relatedClusterList:
      type: array
      items:
        $ref: '#/components/schemas/relatedClusterListItem'
    Broker:
      x-go-name: KafkaBroker
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        host:
          type: string
        port:
          type: integer
          x-omitempty: false
        leaderPartitions:
          type: array
          items:
            type: integer
        followerPartitions:
          type: array
          items:
            type: integer
    BrokerList:
      x-go-name: KafkaBrokerList
      type: array
      items:
        $ref: '#/components/schemas/Broker'
        nullable: true
    ConfigEntry:
      x-go-name: KafkaConfigEntry
      type: object
      properties:
        name:
          type: string
          x-omitempty: false
        value:
          type: string
          x-omitempty: false
        isDefault:
          type: boolean
          description: Whether the configuration is the default value
          x-omitempty: false
        readOnly:
          type: boolean
          x-omitempty: false
        sensitive:
          type: boolean
          description: Whether the configuration is sensitive
          x-omitempty: false
        description:
          type: string
          description: Configuration description
          x-omitempty: false
        validValues:
          type: array
          items:
            type: string
          description: Valid values for the configuration
          x-omitempty: true
        type:
          type: string
          description: Configuration type
          x-omitempty: true
    ConfigList:
      x-go-name: KafkaConfigList
      type: array
      items:
        $ref: '#/components/schemas/ConfigEntry'
        nullable: true
    UpdateBrokerConfigRequest:
      x-go-name: KafkaBrokerConfigUpdate
      type: object
      properties:
        configs:
          type: object
          additionalProperties:
            type: string
    Topic:
      x-go-name: KafkaTopic
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-omitempty: false
        partitionsCount:
          type: integer
          format: int32
          x-omitempty: false
        consumerGroupsCount:
          type: integer
          format: int32
          x-omitempty: false
        replicaCount:
          type: integer
          format: int32
          x-omitempty: false
        TotalLogSize:
          type: integer
          format: int64
          x-omitempty: false
        internal:
          type: boolean
          description: show if the topic is internal topic
          x-omitempty: false
    TopicsList:
      x-go-name: KafkaTopicsList
      type: array
      items:
        $ref: '#/components/schemas/Topic'
        nullable: true
    CreateTopicRequest:
      x-go-name: KafkaTopicCreation
      type: object
      properties:
        name:
          type: string
        partitions:
          type: integer
          format: int32
          minimum: 1
        replicationFactor:
          type: integer
          format: int32
          minimum: 1
      required:
        - name
        - partitions
        - replicationFactor
    PartitionInfo:
      x-go-name: KafkaPartitionInfo
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        beginningOffset:
          type: integer
          format: int64
          x-omitempty: false
        endOffset:
          type: integer
          format: int64
          x-omitempty: false
    TopicDetails:
      x-go-name: KafkaTopicDetails
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-omitempty: false
        internal:
          type: boolean
          x-omitempty: false
        replicaCount:
          type: integer
          format: int32
          x-omitempty: false
          description: the replica count of the topic
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/PartitionInfo'
            nullable: true
        totalLogSize:
          type: integer
          format: int64
          x-omitempty: false
    TopicBrokerList:
      x-go-name: KafkaTopicBrokerList
      type: array
      items:
        $ref: '#/components/schemas/Broker'
        nullable: true
    brokerNode:
      x-go-name: kafkaNode
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        host:
          type: string
          x-omitempty: false
        port:
          type: integer
          format: int32
          x-omitempty: false
        logSize:
          type: integer
          format: int64
          x-omitempty: false
    Partition:
      x-go-name: KafkaPartition
      type: object
      required:
        - id
        - leader
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        leader:
          $ref: '#/components/schemas/brokerNode'
        replicas:
          type: array
          items:
            $ref: '#/components/schemas/brokerNode'
        isr:
          type: array
          items:
            $ref: '#/components/schemas/brokerNode'
          description: In-Sync Replicas
        beginningOffset:
          type: integer
          format: int64
          x-omitempty: false
        endOffset:
          type: integer
          format: int64
          x-omitempty: false
    PartitionList:
      x-go-name: KafkaPartitionList
      type: array
      items:
        $ref: '#/components/schemas/Partition'
        nullable: true
    ExpandPartitionRequest:
      type: object
      required:
        - newPartitions
      properties:
        newPartitions:
          type: integer
          format: int32
    UpdateTopicConfigRequest:
      type: object
      properties:
        configs:
          type: object
          additionalProperties:
            type: string
    ConsumerGroup:
      x-go-name: KafkaConsumerGroup
      x-nullable: true
      type: object
      properties:
        groupId:
          type: string
          x-omitempty: false
        state:
          type: string
          x-omitempty: false
        lag:
          type: integer
          format: int64
          x-omitempty: false
        topics:
          type: array
          items:
            type: string
          x-omitempty: false
    ConsumerGroupList:
      x-go-name: KafkaConsumerGroupList
      type: array
      items:
        $ref: '#/components/schemas/ConsumerGroup'
        nullable: true
    TopicOffset:
      type: object
      x-nullable: true
      properties:
        topic:
          type: string
          description: 主题名称
        partition:
          type: integer
          format: int32
          description: 分区号
          x-omitempty: false
        consumerOffset:
          type: integer
          format: int64
          nullable: true
          description: 消费者组当前消费位置
        beginningOffset:
          type: integer
          format: int64
          nullable: true
          description: 分区最早消息的偏移量
        endOffset:
          type: integer
          format: int64
          nullable: true
          description: 分区最新消息的下一个偏移量
        groupId:
          type: string
          description: 消费者组ID
          x-omitempty: false
    TopicOffsetList:
      x-go-name: KafkaTopicOffsetList
      type: array
      items:
        $ref: '#/components/schemas/TopicOffset'
        nullable: true
    OffsetResetStrategy:
      type: string
      enum:
        - EARLIEST
        - LATEST
        - TIMESTAMP
        - ABSOLUTE
    ResetOffsetRequest:
      type: object
      properties:
        partition:
          type: integer
          format: int32
          description: the partition to reset
          x-omitempty: false
        seek:
          $ref: '#/components/schemas/OffsetResetStrategy'
          description: the seek strategy
          x-nullable: true
          x-omitempty: false
        offset:
          type: integer
          format: int64
          description: the offset to reset to
          x-omitempty: false
    TopicMessage:
      x-go-name: KafkaTopicMessage
      type: object
      properties:
        topic:
          type: string
          description: 消息所属的主题
          x-omitempty: false
        partition:
          type: integer
          format: int32
          description: 消息所在的分区号
          x-omitempty: false
        offset:
          type: integer
          format: int64
          description: 消息在分区中的偏移量
          x-omitempty: false
        timestamp:
          type: integer
          format: int64
          description: 消息的时间戳
          x-omitempty: false
        key:
          type: string
          description: 消息的key
          x-omitempty: false
        value:
          type: string
          description: 消息的内容
          x-omitempty: false
    TopicMessageList:
      x-go-name: KafkaTopicMessageList
      type: array
      items:
        $ref: '#/components/schemas/TopicMessage'
        nullable: true
    TopicMessageRequest:
      type: object
      x-go-name: KafkaTopicMessageRequest
      properties:
        partition:
          type: integer
          format: int32
          description: 指定消息将被发送到的Kafka分区
          example: 0
          x-omitempty: false
        key:
          type: string
          description: 消息的键（可选）
          x-omitempty: false
        value:
          type: string
          description: 消息的实际内容
          x-omitempty: false
    ConsumerGroupDescribe:
      x-go-name: KafkaConsumerGroupDescribe
      x-nullable: true
      type: object
      properties:
        groupId:
          type: string
          description: Consumer group ID
          x-omitempty: false
        topic:
          type: string
          description: Topic name
          x-omitempty: false
        partition:
          type: integer
          description: Partition number
          format: int32
          x-omitempty: false
        currentOffset:
          type: integer
          format: int64
          description: Current offset position of the consumer group
          x-omitempty: false
        logBeginningOffset:
          type: integer
          format: int64
          description: The earliest message offset in this partition
          x-omitempty: false
        logEndOffset:
          type: integer
          format: int64
          description: The next offset after the latest message in this partition
          x-omitempty: false
        lag:
          type: integer
          format: int64
          description: Consumer lag
          x-omitempty: false
        consumerId:
          type: string
          description: Consumer ID, unique identifier automatically generated by Kafka
          x-omitempty: false
        host:
          type: string
          description: Consumer host address
          x-omitempty: false
        clientId:
          type: string
          description: Consumer client ID
          x-omitempty: false
    ConsumerGroupDescribeResponse:
      x-go-name: KafkaConsumerGroupDescribeResponse
      type: array
      items:
        $ref: '#/components/schemas/ConsumerGroupDescribe'
        nullable: true
    redisPrivilegeType:
      description: Redis user privileges
      enum:
        - READWRITE
        - READONLY
        - UNKNOWN
      type: string
    ACLUser:
      x-go-name: RedisACLUser
      type: object
      x-nullable: true
      properties:
        role:
          $ref: '#/components/schemas/accountListRoleType'
        privileges:
          $ref: '#/components/schemas/redisPrivilegeType'
        name:
          type: string
          description: ACL user name
        enabled:
          type: boolean
          description: Whether the user is enabled
          x-omitempty: false
        nopass:
          type: boolean
          description: Whether the user requires no password
          x-omitempty: false
        passwords:
          type: array
          items:
            type: string
          description: List of plain text passwords
        password_hashes:
          type: array
          items:
            type: string
          description: List of hashed passwords
        passwords_to_remove:
          type: array
          items:
            type: string
          description: List of passwords to be removed
        password_hashes_to_remove:
          type: array
          items:
            type: string
          description: List of password hashes to be removed
      required:
        - name
        - role
    ACLUserResponse:
      x-go-name: RedisACLUserResponse
      type: object
      properties:
        mode:
          type: string
        master:
          x-omitempty: true
          type: array
          items:
            $ref: '#/components/schemas/ACLUser'
            nullable: true
        sentinel:
          x-omitempty: true
          type: array
          items:
            $ref: '#/components/schemas/ACLUser'
            nullable: true
    DmFile:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          description: the id of this file
        name:
          type: string
          description: the name of this file
        autoExtend:
          type: boolean
          description: whether this file auto extend
        allocatedSizeMB:
          type: string
          description: the size already allocated of this file, unit MB
        usedSizeMB:
          type: string
          description: the current used size of this file, unit MB
        usedRatio:
          type: string
          description: the current used ratio of this file
        extendStepMB:
          type: string
          description: the extend step of this file, unit MB
        maxSizeGB:
          type: string
          description: the max size of this file, unit GB
        usedRatioInMax:
          type: string
          description: the used ratio in the max size of this file
    tableSpaceStatus:
      type: string
      description: the status of this tablespace
      enum:
        - ONLINE
        - OFFLINE
        - CORRUPT
    DmTablespace:
      type: object
      required:
        - name
        - files
      properties:
        name:
          type: string
          description: tablespace name
        users:
          type: string
          description: damengdb users belong to this tablespace
        files:
          type: array
          items:
            $ref: '#/components/schemas/DmFile'
          description: the physical files of this tablespace
        allocatedSizeMB:
          type: string
          description: the total size already allocated of this tablespace, unit MB
        usedSizeMB:
          type: string
          description: the current used size of this tablespace, unit MB
        usedRatio:
          type: string
          description: the current used ratio of this tablespace
        autoExtend:
          type: boolean
          description: whether this tablespace auto extend
        maxSizeGB:
          type: string
          description: the max size can be allocated of this tablespace, unit GB
        usedRatioInMax:
          type: string
          description: the used ratio in the max allocated size of this tablespace
        status:
          $ref: '#/components/schemas/tableSpaceStatus'
    DmTablespaceList:
      type: array
      items:
        $ref: '#/components/schemas/DmTablespace'
      description: the list of tablespace
    consoleStatus:
      type: string
      enum:
        - deployed
        - uninstalled
        - superseded
        - failed
        - uninstalling
        - pending-install
        - pending-upgrade
        - pending-rollback
        - unknown
    console:
      type: object
      description: engine console plugin, like redisinsight, minio-console, etc.
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/consoleStatus'
        description:
          type: string
        version:
          type: string
        address:
          type: string
          x-omitempty: false
    DMSConsoleNetMode:
      type: string
      enum:
        - PRIVATE
        - PUBLIC
    DMSConsoleSvcType:
      type: string
      enum:
        - ClusterIP
        - LoadBalancer
        - NodePort
    DMSConsoleEnableOpt:
      type: object
      required:
        - networkMode
        - serviceType
      properties:
        networkMode:
          $ref: '#/components/schemas/DMSConsoleNetMode'
          description: network mode of redis insight
        serviceType:
          $ref: '#/components/schemas/DMSConsoleSvcType'
          description: service type of redis insight
    dbTDERequest:
      type: object
      properties:
        enable:
          type: array
          items:
            type: string
        disable:
          type: array
          items:
            type: string
      required:
        - enable
        - disable
    AccessLevel:
      type: string
      enum:
        - Platform
        - Organization
    llm:
      description: llm
      properties:
        id:
          description: ID of the llm
          title: ID
          type: string
        name:
          description: Name of the llm
          title: Name
          type: string
        enabled:
          description: Whether this LLM is enabled
          title: Enabled
          type: boolean
        config:
          description: Config
          title: Config
          type: object
          additionalProperties:
            type: object
        level:
          $ref: '#/components/schemas/AccessLevel'
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - name
        - config
        - enabled
      type: object
    llmList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          x-nullable: false
          description: Items is the list of llm objects
          items:
            $ref: '#/components/schemas/llm'
    checkAPIKey:
      type: object
      properties:
        success:
          type: boolean
          x-omitempty: false
        message:
          type: string
    aiConversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Conversation ID
        userId:
          type: string
          description: User ID associated with the conversation
        clusterName:
          type: string
          description: Name of the cluster associated with the conversation
        orgName:
          type: string
          description: Name of the organization associated with the conversation
        title:
          type: string
          description: Optional title for the conversation
          x-nullable: true
        type:
          type: string
          description: Type of the conversation, can be chatbi or chatops.
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the conversation was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of when the conversation was last updated
    aiConversationListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/aiConversation'
        total:
          type: integer
          format: int64
          description: Total number of conversations
    AIChatType:
      type: string
      enum:
        - chatbi
        - chatops
      description: Query type
    AIConversationRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AIChatType'
    senderType:
      type: string
      enum:
        - user
        - assistant
        - system
      description: Type of the sender (user, assistant, or system)
    metadataObject:
      type: object
      additionalProperties: true
      description: Optional metadata for AI messages (e.g., tool calls, results)
      x-nullable: true
    aiMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Message ID
        conversationId:
          type: string
          format: uuid
          description: ID of the conversation this message belongs to
        senderType:
          $ref: '#/components/schemas/senderType'
        content:
          type: string
          description: Content of the message
        isFavorited:
          type: boolean
          description: Whether the message is favorited by user
          default: false
        metadata:
          $ref: '#/components/schemas/metadataObject'
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the message was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of when the message was last updated
    aiMessageListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/aiMessage'
    chatRequest:
      type: object
      required:
        - orgName
        - clusterName
        - sessionId
        - query
        - model
      description: Chat message request
      properties:
        orgName:
          type: string
          description: Organization name
        clusterName:
          type: string
          description: Cluster name
        sessionId:
          type: string
          description: Session ID
        messageID:
          type: string
          description: Message ID
        query:
          type: string
          description: Query content
        model:
          type: string
          description: LLM model
          x-nullable: true
        datasourceName:
          type: string
          description: Datasource name
          x-nullable: true
        database:
          type: string
          description: Database involved in the chat
          x-nullable: true
        schema:
          type: string
          description: Schema involved in the chat
          x-nullable: true
        tables:
          type: array
          description: Tables involved in the chat
          items:
            type: string
            x-nullable: true
    chatResponseType:
      type: string
      enum:
        - Message
        - Graph
        - Finish
        - DataInterpretation
        - Error
        - Think
        - ToolResult
        - SessionID
        - ToolCall
      description: Message type
    chatResponse:
      type: object
      required:
        - data
        - type
        - messageID
        - parentID
        - sessionId
      description: Chat message response
      properties:
        data:
          type: object
          additionalProperties: true
          description: Arbitrary data
        type:
          $ref: '#/components/schemas/chatResponseType'
        messageID:
          type: string
          description: Message ID
        parentID:
          type: string
          description: Parent message ID
        sessionId:
          type: string
          description: Session ID
    encryptionAlgorithm:
      description: the encryption algorithm
      type: string
      enum:
        - AES-128-CFB
        - AES-192-CFB
        - AES-256-CFB
    encryptionKeyUsage:
      type: string
      enum:
        - encryption
        - decryption
        - signing
        - verification
      description: The intended usage of the key.
    key:
      description: mutiple kv pair
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the key.
        name:
          type: string
          description: The name of the key.
        algorithm:
          $ref: '#/components/schemas/encryptionAlgorithm'
        keyUsage:
          $ref: '#/components/schemas/encryptionKeyUsage'
        clusters:
          type: array
          items:
            type: string
          description: the clusters which use the key
        backups:
          type: array
          items:
            type: string
          description: the backups which use the key
        createdAt:
          type: string
          format: date-time
          description: The creation timestamp of the key.
        updatedAt:
          type: string
          format: date-time
          description: The last update timestamp of the key.
        dataKeyName:
          type: string
          description: the name of data key
        sysmetricKey:
          type: string
          description: the sysmetric key
    keyList:
      description: key list
      properties:
        items:
          description: Items is the list of key objects in the list
          items:
            $ref: '#/components/schemas/key'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    platformParameterCategory:
      enum:
        - recycle-bin
      type: string
      description: platformParameter category, representing the platformParameter group, such as 'recycle bin'
    platformParameter:
      description: platformParameter item
      type: object
      required:
        - id
        - name
        - category
        - description
        - constraints
        - type
      properties:
        id:
          type: string
          description: platformParameter ID
        name:
          type: string
          description: platformParameter name
        category:
          $ref: '#/components/schemas/platformParameterCategory'
        type:
          type: string
          description: type of platformParameter value
        constraints:
          type: object
          description: platformParameter constraints including min, max, enum, default value
          properties:
            min:
              type: string
              description: platformParameter min value
            max:
              type: string
              description: platformParameter max value
            enum:
              type: array
              items:
                type: string
              description: platformParameter enum constraints
            default:
              type: string
              description: platformParameter default value
        value:
          type: string
          description: platformParameter value
        description:
          $ref: '#/components/schemas/localizedDescription'
    storage:
      type: object
      description: Storage is a specification that provides guidance accessing remote storage.
      properties:
        id:
          type: string
          description: Unique identifier for the storage
        name:
          type: string
          description: Name of the storage
        storageProvider:
          type: string
          description: Name of the storage provider
        params:
          type: object
          description: the parameters for the storage
          additionalProperties:
            type: string
        envName:
          type: string
          description: the environment name that storage belongs to
        createdBy:
          type: string
          description: User who created the storage
          format: date-time
        clusterID:
          type: string
          description: the id of cluster that storage used
          nullable: true
        clusterMetadataAddress:
          type: string
          description: the address of cluster
          nullable: true
        updatedBy:
          type: string
          description: User who updated the storage
          format: date-time
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
        engines:
          type: array
          items:
            type: string
    storageList:
      type: array
      items:
        $ref: '#/components/schemas/storage'
    storageCreate:
      description: storageCreate is the schema for the storage create request
      type: object
      properties:
        name:
          type: string
          description: Name of the storage
        storageProvider:
          type: string
          description: Name of the storage provider
        params:
          type: object
          description: the parameters to create the storage
          additionalProperties:
            type: string
        clusterID:
          type: string
          description: the id of cluster that storage used
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
        engines:
          type: array
          items:
            type: string
    storageUpdate:
      description: storageUpdate is the schema for storage update request
      type: object
      properties:
        params:
          type: object
          description: the parameters to create the storage
          additionalProperties:
            type: string
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
        engines:
          type: array
          items:
            type: string
        storageName:
          type: string
        envName:
          type: string
    channelStatus:
      enum:
        - Pending
        - Initializing
        - Running
        - Finished
        - Failed
        - Pausing
        - Paused
        - Deleting
      type: string
    dataReplication_endpointType:
      enum:
        - custom
        - kubeblocks
      type: string
    customEndpoint:
      type: object
      properties:
        connectionString:
          type: string
        userName:
          type: string
    kubeblocksEndpoint:
      type: object
      properties:
        environmentID:
          type: string
        environmentName:
          type: string
        clusterID:
          type: string
        clusterName:
          type: string
    dataChannelListEndpoint:
      type: object
      properties:
        engineName:
          type: string
        endpointType:
          $ref: '#/components/schemas/dataReplication_endpointType'
        custom:
          $ref: '#/components/schemas/customEndpoint'
          nullable: true
        kubeblocks:
          $ref: '#/components/schemas/kubeblocksEndpoint'
          nullable: true
    dataChannelObject:
      type: object
      properties:
        includeObjects:
          type: array
          items:
            type: string
        excludeObjects:
          type: array
          items:
            type: string
          nullable: true
    dataChannelItem:
      type: object
      properties:
        channelID:
          type: string
        channelName:
          type: string
        channelStatus:
          $ref: '#/components/schemas/channelStatus'
        environmentID:
          type: string
        environmentName:
          type: string
        project:
          type: string
        standardDefinition:
          type: string
        source:
          $ref: '#/components/schemas/dataChannelListEndpoint'
        target:
          $ref: '#/components/schemas/dataChannelListEndpoint'
        replicationObjects:
          $ref: '#/components/schemas/dataChannelObject'
        modules:
          type: array
          items:
            type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/eventObject'
        createdAt:
          type: string
          format: date-time
        FinishedAt:
          type: string
          format: date-time
          nullable: true
    dataChannelList:
      type: array
      items:
        $ref: '#/components/schemas/dataChannelItem'
    authType:
      enum:
        - basic
      type: string
    basicAuthModel:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
    customEndpointCreate:
      type: object
      properties:
        connection:
          type: string
        authType:
          $ref: '#/components/schemas/authType'
        basicAuth:
          $ref: '#/components/schemas/basicAuthModel'
          nullable: true
    dataChannelEndpointCreate:
      type: object
      properties:
        engineName:
          type: string
        definitionName:
          type: string
        endpointType:
          $ref: '#/components/schemas/dataReplication_endpointType'
        custom:
          $ref: '#/components/schemas/customEndpointCreate'
          nullable: true
        kubeblocks:
          $ref: '#/components/schemas/kubeblocksEndpoint'
          nullable: true
        extraCfgs:
          type: object
          additionalProperties:
            type: string
          nullable: true
    dataReplicationCreate:
      type: object
      properties:
        channelName:
          type: string
        modules:
          type: array
          items:
            type: string
        environmentID:
          type: string
        project:
          type: string
          default: kubeblocks-cloud-ns
        standardDefinition:
          type: string
        source:
          $ref: '#/components/schemas/dataChannelEndpointCreate'
        target:
          $ref: '#/components/schemas/dataChannelEndpointCreate'
        replicationObjects:
          $ref: '#/components/schemas/dataChannelObject'
        events:
          type: array
          items:
            $ref: '#/components/schemas/eventObject'
    dataChannelResponse:
      type: object
      properties:
        channelID:
          type: string
        channelName:
          type: string
        createdAt:
          type: string
          format: date-time
    dataChannelModuleProgress:
      type: object
      properties:
        moduleName:
          type: string
        progress:
          type: number
          format: double
          nullable: true
        status:
          $ref: '#/components/schemas/channelStatus'
        message:
          type: string
          nullable: true
    dataChannelProgress:
      type: object
      properties:
        progress:
          type: number
          format: double
          nullable: true
        moduleProgress:
          type: array
          items:
            $ref: '#/components/schemas/dataChannelModuleProgress'
    dataChannelDetail:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/dataChannelItem'
        progress:
          $ref: '#/components/schemas/dataChannelProgress'
    dataReplication_opsType:
      enum:
        - pause
        - resume
      type: string
    eventItem:
      type: object
      properties:
        eventID:
          type: string
        eventName:
          type: string
        eventTime:
          type: string
          format: date-time
        eventMessage:
          type: string
        operator:
          type: string
        operatorID:
          type: string
          nullable: true
    dataReplication_eventList:
      type: array
      items:
        $ref: '#/components/schemas/eventItem'
    replicationObjectQuery:
      type: object
      properties:
        sourceEngineDefinition:
          type: string
        targetEngineDefinition:
          type: string
        endpoint:
          $ref: '#/components/schemas/dataChannelEndpointCreate'
        nodeType:
          type: string
          nullable: true
        nodeValue:
          type: string
          nullable: true
        queryNodeType:
          type: string
          nullable: true
    replicationObjectNode:
      type: object
      properties:
        nodeName:
          type: string
        nodeValue:
          type: string
    replicationObjectTree:
      type: object
      properties:
        nodeType:
          type: string
        nodeValues:
          type: array
          items:
            $ref: '#/components/schemas/replicationObjectNode'
        childrenNodeTypes:
          type: array
          nullable: true
          items:
            type: string
    preCheckCreate:
      type: object
      properties:
        modules:
          type: array
          items:
            type: string
        environmentID:
          type: string
        source:
          $ref: '#/components/schemas/dataChannelEndpointCreate'
        target:
          $ref: '#/components/schemas/dataChannelEndpointCreate'
        replicationObjects:
          $ref: '#/components/schemas/dataChannelObject'
    preCheckTaskResponse:
      type: object
      properties:
        taskId:
          type: string
    preCheckStatus:
      enum:
        - pending
        - running
        - succeed
        - failed
      type: string
    preCheckTaskItem:
      type: object
      properties:
        checkerName:
          type: string
        checkerDesc:
          type: string
        message:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/preCheckStatus'
    preCheckResult:
      type: object
      properties:
        name:
          type: string
        checkerName:
          type: string
        message:
          type: string
          nullable: true
        advice:
          type: string
          nullable: true
    preCheckTaskDetail:
      type: object
      properties:
        taskID:
          type: string
        taskStatus:
          $ref: '#/components/schemas/preCheckStatus'
        progress:
          type: integer
          format: int32
          nullable: true
        checkers:
          type: array
          items:
            $ref: '#/components/schemas/preCheckTaskItem'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/preCheckResult'
          nullable: true
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/preCheckResult'
          nullable: true
        createdAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
    logType:
      enum:
        - runlog
        - position
        - sql
        - monitor
      type: string
      description: the type of log
    ImportSupportSourcesResponse:
      description: Response for supported data sources list
      type: object
      properties:
        targetEngine:
          type: string
          description: Target engine type
        sources:
          type: array
          items:
            $ref: '#/components/schemas/ImportSupportedSource'
          description: List of supported data sources
      required:
        - targetEngine
        - sources
    ImportPreflightRequest:
      description: Data source preflight request
      type: object
      required:
        - sourceType
        - connectionConfig
      properties:
        sourceType:
          type: string
          description: Data source type
        connectionConfig:
          type: object
          description: Connection configuration parameters that vary by data source type
          example:
            host: mysql-source.example.com
            port: 3306
            username: migration_user
            password: secret123
            sslMode: disable
        objectSelection:
          $ref: '#/components/schemas/dataChannelObject'
    ImportTaskStatus:
      type: string
      description: Import task status
      enum:
        - Pending
        - Initializing
        - Finished
        - Failed
        - Deleting
    ImportTaskResponse:
      description: Import task response
      type: object
      properties:
        id:
          type: string
          description: Import task ID
        name:
          type: string
          description: Import name
        status:
          $ref: '#/components/schemas/ImportTaskStatus'
        sourceEndpoint:
          type: string
          description: Source endpoint address
        targetClusterName:
          type: string
          description: Target cluster name
        progress:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          default: 0
          description: Overall progress
        sourceType:
          type: string
          description: Data source type
        targetEngine:
          type: string
          description: Target engine type
        syncTimestamp:
          type: string
          format: date-time
          description: Sync timestamp
          nullable: true
        delaySecond:
          type: integer
          description: Delay seconds
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation time
        updatedAt:
          type: string
          format: date-time
          description: Update time
        finishedAt:
          type: string
          format: date-time
          description: Finish time
          nullable: true
        message:
          type: string
          description: Operation result message
          nullable: true
      required:
        - id
        - name
        - status
        - sourceEndpoint
        - targetClusterName
        - progress
        - sourceType
        - targetEngine
        - createdAt
        - updatedAt
        - message
    ImportTaskListResponse:
      description: Import task list response
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ImportTaskResponse'
          description: Task list
      required:
        - items
    ImportSourceType:
      type: string
      description: Import source type
      enum:
        - mysql
    ImportTaskCreateRequest:
      description: Create import task request
      type: object
      required:
        - name
        - sourceType
        - connectionConfig
      properties:
        name:
          type: string
          description: Import name
        sourceType:
          $ref: '#/components/schemas/ImportSourceType'
        connectionConfig:
          type: object
          description: Connection configuration
        objectSelection:
          $ref: '#/components/schemas/dataChannelObject'
    ImportOpsType:
      type: string
      description: Import task operation type
      enum:
        - pause
        - resume
    license:
      description: License info
      type: object
      required:
        - clusterID
        - notAfter
        - notBefore
      properties:
        clusterID:
          type: string
          description: The kubernetes cluster ID
        notAfter:
          type: string
          format: date-time
          description: The license expiration time
        notBefore:
          type: string
          format: date-time
          description: The license start time
    environmentPricing:
      type: object
      description: the information of environment pricing
      properties:
        envName:
          description: The environment name
          type: string
          nullable: true
        cpuPrice:
          description: The price of CPU, the unit is 'Core'
          type: string
          nullable: true
        memoryPrice:
          description: The price of Memory, the unit is 'GB'
          type: string
          nullable: true
        storagePrice:
          description: The price of Storage, the unit is 'GB'
          type: string
          nullable: true
    environmentPricingList:
      type: object
      description: list of information with environment pricing
      properties:
        items:
          description: Items is the list of environment pricing information
          items:
            $ref: '#/components/schemas/environmentPricing'
          type: array
      required:
        - items
    globalPricing:
      type: object
      description: the global information of pricing
      properties:
        enabled:
          description: Enable global pricing
          type: boolean
          x-omitempty: false
        currencyUnit:
          description: The currency uint for display in bill query
          type: string
          nullable: true
        billScheduleTime:
          description: Scheduled production time for daily bills, the format is 'HH:mm:ss', such as '01:00:00' meas every day at 1:00 AM
          type: string
          nullable: true
        cpuPrice:
          description: The price of CPU, the unit is 'Core'
          type: string
          nullable: true
        memoryPrice:
          description: The price of Memory, the unit is 'GB'
          type: string
          nullable: true
        storagePrice:
          description: The price of Storage, the unit is 'GB'
          type: string
          nullable: true
    aggregationTimeType:
      description: The type of aggregation time
      enum:
        - yearly
        - monthly
        - quarterly
        - daily
      type: string
      nullable: true
    aggregationGroupType:
      description: The type of aggregation group
      enum:
        - global
        - organization
        - project
        - cluster
      type: string
      nullable: true
    Bill:
      type: object
      description: Task information
      properties:
        dataTime:
          description: The timestamp of data
          type: integer
          format: int64
        price:
          description: The total price
          type: string
        clusterID:
          description: The ID of cluster
          type: string
          nullable: true
          x-omitempty: true
        clusterName:
          description: The Name of cluster
          type: string
          nullable: true
          x-omitempty: true
        clusterDisplayName:
          description: The Display Name of cluster
          type: string
          nullable: true
          x-omitempty: true
        engine:
          description: Cluster Application Engine
          type: string
          nullable: true
          x-omitempty: true
        version:
          description: Cluster Application Version
          type: string
          nullable: true
          x-omitempty: true
        mode:
          description: Cluster topology mode
          type: string
          nullable: true
          x-omitempty: true
        orgName:
          description: The Name of organization
          type: string
          nullable: true
          x-omitempty: true
        projectName:
          description: The Name of project
          type: string
          nullable: true
          x-omitempty: true
    BillList:
      type: object
      description: list price details in date range
      properties:
        items:
          description: Items of the price
          items:
            $ref: '#/components/schemas/Bill'
          type: array
      required:
        - items
  responses:
    '400':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    '401':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Unauthorized
    '403':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    '404':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    '409':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
    '429':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    '500':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Internal server error
    '501':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Implemented
  parameters:
    startTime:
      name: start
      in: query
      description: The start of the time range for the query, unit is seconds.
      schema:
        type: integer
        format: int64
      required: true
      example: 1708848695
    endTime:
      name: end
      in: query
      description: The end of the time range for the query, unit is seconds.
      schema:
        type: integer
        format: int64
      required: true
      example: 1711354295
    orderBy:
      name: orderBy
      in: query
      description: |
        A generic orderBy construct used to specify which field to sort by in the interface. (e.g., startTime or endTime).  The validity of this field is verified by the apiserver,  and it is not required in the YAML.
      required: false
      schema:
        type: string
    sortDesc:
      name: sortDesc
      in: query
      description: Specifies the sorting direction. `true` for descending, `false` for ascending.
      type: boolean
      required: false
      default: true
x-tagGroups:
  - name: User
    tags:
      - user
  - name: Organization
    tags:
      - organization
      - member
      - role
      - organizationParameter
  - name: Project
    tags:
      - project
  - name: Environment
    tags:
      - environment
  - name: Cluster
    tags:
      - cluster
      - clusterLog
      - account
      - database
      - opsrequest
      - parameter
      - tag
      - metrics
      - service
      - tls
      - whitelist
      - database
      - recycleBinCluster
      - clusterTask
  - name: Backup & Restore
    tags:
      - backup
      - restore
      - backupRepo
  - name: dms
    tags:
      - dms
  - name: Operation Events
    tags:
      - event
  - name: Alert
    tags:
      - alert
      - alertConfig
      - alertReceiver
      - alertRule
      - alertMetrics
      - alertStrategy
      - alertObject
      - clusterAlertSwitch
      - alertInhibit
  - name: Parameter Template
    tags:
      - paramTpl
  - name: Engine
    tags:
      - engine
      - engineOption
      - class
  - name: Benchmark
    tags:
      - benchmark
  - name: Feature
    tags:
      - feature
  - name: disasterRecovery
    tags:
      - disasterRecovery
  - name: import
    tags:
      - import
