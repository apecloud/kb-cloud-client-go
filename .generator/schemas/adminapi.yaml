openapi: 3.0.1
info:
  title: Admin API
  version: 1.0.0
  x-logo:
    url: https://kubeblocks.io/img/logo.png
    altText: ApeCloud logo
  description: |
    The Admin API is used to manage the ApeCloud platform.
  contact:
    email: support@apecloud.com
    name: ApeCloud Support
    url: https://www.apecloud.com
servers:
  - url: http://127.0.0.1:8080
    description: local
  - url: https://api-dev.apecloud.cn
    description: dev
  - url: https://cloudapi.apecloud.cn
    description: demo
security:
  - BearerToken: []
tags:
  - name: user
    description: User APIs
  - name: invitation
    description: Invitation APIs
  - name: role
    description: Role Management APIs
  - name: organization
    description: Organization APIs
  - name: environment
    description: Environment APIs
  - name: project
    description: Project APIs
  - name: cluster
    description: Cluster APIs
  - name: clusterTask
    description: Cluster Task APIs
  - name: instance
    description: Cluster instance APIs
  - name: imageRegistry
    description: imageRegistry APIs
  - name: vipPool
    description: VIP Pool APIs
  - name: resourceStats
    description: Resource Stats APIs
  - name: monitorDataSink
    description: External Endpoint APIs
  - name: platformParameter
    description: Platform Parameter APIs
  - name: recycleBinCluster
    description: Recycle Bin Cluster APIs
  - name: task
    description: Task APIs
  - name: engine
    description: Engine APIs
  - name: metrics
    description: Meta data metrics APIs
  - name: feature
    description: Feature APIs
  - name: license
    description: License APIs
paths:
  /admin/v1/user:
    get:
      description: Get authenticated login admin user info
      summary: Get authenticated admin user
      operationId: readAdminUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminUser'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - adminUser
    patch:
      description: Update authenticated login admin user info
      operationId: patchAdminUser
      summary: Update admin user information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminUserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminUser'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - adminUser
  /admin/v1/user/password:
    patch:
      description: Update authenticated login admin user password
      summary: Update authenticated login admin user password
      operationId: updateAdminUserPassword
      requestBody:
        content:
          application/json:
            schema:
              properties:
                newPassword:
                  description: The new password for the admin user.
                  type: string
              required:
                - newPassword
              type: object
        required: true
      responses:
        '204':
          content: {}
          description: Password updated successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - adminUser
      x-codegen-request-body-name: body
  /admin/v1/user/apikey/{keyName}:
    patch:
      description: partially update the specified apikey
      operationId: patchAPIkey
      summary: Update apikey information
      parameters:
        - description: Name of the apikey
          in: path
          name: keyName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apikeyCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikey'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
      x-codegen-request-body-name: body
    delete:
      description: delete apikey
      summary: Delete apikey
      operationId: deleteApikey
      parameters:
        - description: Name of the Apikey
          in: path
          name: keyName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when apikey is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - user
  /admin/v1/user/apikeys:
    get:
      description: Get apikeys of the authenticated user
      summary: Get apikeys of the authenticated user
      operationId: readUserApikeys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikeyList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - user
    post:
      description: Create apikey of the authenticated user
      summary: Create apikey of the authenticated user
      operationId: createUserApikey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apikeyCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apikeyWithSK'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - user
      x-codegen-request-body-name: body
  /admin/v1/users:
    post:
      description: Create a new admin user
      summary: Create a new admin user
      operationId: createAdminUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminUserCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminUser'
          description: Created
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - adminUser
    get:
      description: list admin users
      summary: list admin users
      operationId: listAdminUsers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminUserList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - adminUser
  /admin/v1/users/{userID}:
    patch:
      description: Update the information of the specified admin user
      operationId: patchAdminUsersProfile
      summary: Update the information of the specified admin user
      parameters:
        - in: path
          name: userID
          description: ID of the admin user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminUserUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminUser'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - adminUser
    delete:
      description: delete admin user
      operationId: deleteAdminUser
      summary: delete admin user
      parameters:
        - in: path
          name: userID
          description: Name of the admin user
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - adminUser
  /admin/v1/users/{userID}/password:
    patch:
      description: Update admin user password
      operationId: updateAdminUsersPassword
      summary: Update admin user password
      parameters:
        - in: path
          name: userID
          description: ID of the admin user
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminUsersPassword'
        required: true
      responses:
        '204':
          content: {}
          description: Password updated successfully.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - adminUser
      x-codegen-request-body-name: body
  /admin/v1/metrics/metaData/aggregate:
    get:
      description: Get aggregate meta data including total count and time series
      summary: Get aggregate meta data
      operationId: getAggregateMetaData
      parameters:
        - name: metaData
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/aggregateMetaDataType'
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregateMetaData'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - metrics
  /admin/v1/metrics/environment/stats:
    get:
      description: Get environment current stats
      summary: Get environment stats
      operationId: getEnvironmentStats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentStats'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - metrics
  /admin/v1/organizations:
    get:
      tags:
        - organization
      summary: Get organization list
      description: Get organization list
      operationId: listOrganizations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organizationList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /admin/v1/organizations/{orgName}:
    get:
      description: read the specified Org
      summary: Get organization
      operationId: readOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/enable:
    post:
      description: enable the organization
      summary: enable the organization
      operationId: enableOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/disable:
    post:
      description: disable the organization
      summary: disable the organization
      operationId: disableOrg
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/members:
    get:
      description: list members of the specified Org
      summary: List members
      operationId: listOrgMember
      parameters:
        - description: Name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The pagination token in the List request
          in: query
          name: pageToken
          schema:
            type: string
        - description: The pagination size in the List request.
          in: query
          name: pageSize
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMemberList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/members/{memberId}:
    get:
      description: read the specified OrgMember
      summary: Get member
      operationId: readOrgMember
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the member
          in: path
          name: memberId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgMember'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/parameters:
    get:
      operationId: listOrgParameters
      summary: List parameters of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: the category of the parameters
          in: query
          name: category
          schema:
            type: string
        - description: the name of the parameter
          in: query
          name: name
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameterList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
    post:
      operationId: batchUpdateOrgParameters
      summary: Batch update parameters of an organization
      description: Batch update parameters of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgParameterList'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameterList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
  /admin/v1/organizations/{orgName}/parameters/{parameterName}:
    get:
      operationId: getOrgParameter
      summary: Get a parameter of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The name of the parameter
          in: path
          name: parameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameter'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - organization
    patch:
      operationId: patchOrgParameter
      summary: Update a parameter of an organization
      description: Update a parameter of an organization
      parameters:
        - description: The name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: The name of the parameter
          in: path
          name: parameterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgParameter'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgParameter'
          description: OK
      tags:
        - organization
  /admin/v1/permissions:
    get:
      tags:
        - role
      summary: List all permissions
      description: List all permissions
      operationId: listPermissions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissionList'
        '401':
          $ref: '#/components/responses/401'
  /admin/v1/organizations/{orgName}/roles:
    get:
      tags:
        - role
      summary: List roles of a organization
      description: List roles of a organization
      operationId: listRoles
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/roles/{roleName}:
    get:
      tags:
        - role
      summary: Get role by name
      description: Get role by name
      operationId: getRoleByName
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/role'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/roles/{roleName}/permissions:
    get:
      tags:
        - role
      summary: List permissions of a role
      description: List permissions of a role
      operationId: listRolePermissions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: roleName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/permissionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/invitations:
    get:
      tags:
        - invitation
      description: list the Invitation of specified Org or User
      summary: List invitations
      operationId: listInvitation
      parameters:
        - name: orgName
          in: query
          description: If 'true', then the output is pretty printed
          schema:
            type: string
        - name: userId
          in: query
          description: If 'true', then the output is pretty printed
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invitationList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /admin/v1/clusters:
    get:
      tags:
        - cluster
      summary: Get cluster list
      description: Get cluster list
      operationId: listClusters
      parameters:
        - name: orgName
          in: query
          description: Organization name, if envName is provided, orgName is required
          required: false
          schema:
            type: string
        - name: envName
          in: query
          description: Environment name
          required: false
          schema:
            type: string
        - name: withStatic
          in: query
          description: Whether to include static clusters
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clusters:
    get:
      tags:
        - cluster
      operationId: listCluster
      summary: List clusters in the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterDefinition
          in: query
          description: The clusterDefinition in the List request
          schema:
            type: string
        - name: environmentName
          in: query
          description: Environment Type
          schema:
            type: string
        - name: environmentType
          in: query
          description: Environment Type
          schema:
            $ref: '#/components/schemas/environmentType'
        - name: tagKey
          in: query
          description: Tag key; this parameter is deprecated, use tagKeys instead
          schema:
            type: string
        - name: tagValue
          in: query
          description: Tag value; this parameter is deprecated, use tagValues instead
          schema:
            type: string
        - name: tagKeys
          in: query
          description: A list of tags' keys
          schema:
            type: array
            items:
              type: string
        - name: tagValues
          in: query
          description: A list of tags' values corresponding to the tagKeys
          schema:
            type: array
            items:
              type: string
        - name: licenseId
          in: query
          description: license id
          schema:
            type: integer
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      operationId: createCluster
      summary: Create new cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cluster'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}:
    get:
      operationId: getCluster
      summary: Get cluster details
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
    patch:
      description: Update the specified Cluster
      summary: Update cluster specified fields
      operationId: patchCluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clusterUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: Returned when project is updated successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - cluster
      x-codegen-request-body-name: body
    delete:
      tags:
        - cluster
      operationId: deleteCluster
      summary: Delete cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the KubeBlocks cluster
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: if it is true, the cluster will be deleted no matter what the termination policy is, and will not be moved to the recycle bin.
          schema:
            type: boolean
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clustersWithDelete/{clusterID}:
    get:
      operationId: getClusterByID
      summary: Get cluster details by ID
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the KubeBlocks cluster
          in: path
          name: clusterID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/instances:
    get:
      operationId: listInstance
      summary: List cluster instances
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/workloads/{workloadName}/log:
    get:
      description: read log of the specified cluster instance
      summary: Tail cluster instance container log
      operationId: getClusterInstanceLog
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the workload
          in: path
          name: workloadName
          required: true
          schema:
            type: string
        - description: type of the workload, supported values ["Pod", "Job"], default value is Pod.
          in: query
          name: workloadType
          schema:
            type: string
        - description: Return previous terminated container logs. Defaults to false.
          in: query
          name: previous
          schema:
            type: boolean
        - description: A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
          in: query
          name: sinceSeconds
          schema:
            type: integer
        - description: If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
          in: query
          name: tailLines
          schema:
            type: integer
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          $ref: '#/components/responses/401'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/endpoints:
    get:
      operationId: listEndpoints
      summary: List cluster endpoints
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: count of the NodePort host
          in: query
          name: nodePortHostCount
          schema:
            type: integer
            default: 3
        - description: whether to include the ClusterIP endpoint
          in: query
          name: includeClusterIP
          schema:
            type: boolean
            default: false
        - description: |
            The total number of returned endpoints,  If the total number of endpoints is less than returnLen, then return the actual available endpoints.
          in: query
          name: returnLen
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpointList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusterTags:
    get:
      tags:
        - clusterTag
      operationId: getTags
      summary: Get cluster tags
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterIds
          in: query
          description: Comma-separated list of cluster IDs
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list tags successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clusterTags'
  /admin/v1/organizations/{orgName}/tags/{tagId}:
    delete:
      tags:
        - clusterTag
      description: delete cluster tag
      summary: Delete tag
      operationId: deleteTags
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - clusterTag
      description: Update cluster tags
      operationId: updateTag
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: tagId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tagUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tag'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: tagUpdate
  /admin/v1/organizations/{orgName}/tags:
    get:
      tags:
        - clusterTag
      description: List tags by organization name.
      operationId: listOrgTags
      summary: List tags by organization name
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list tags successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgTagsList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - clusterTag
      description: create tag
      summary: Create cluster tags
      operationId: createTag
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clusterId:
                  type: string
                  description: The cluster id corresponding to the tag
                items:
                  type: array
                  description: The key value pair of the tag needed to create
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
        required: true
      responses:
        '200':
          description: create tag successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagCreate'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      deprecated: true
      description: list accounts in cluster
      summary: List cluster accounts
      operationId: listAccountsOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          schema:
            type: string
        - description: include root account
          in: query
          name: includeRoot
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
      x-codegen-request-body-name: body
    post:
      description: create an account in cluster
      deprecated: true
      summary: Create cluster account
      operationId: createAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      deprecated: true
      description: delete an account in cluster
      summary: Delete cluster account
      operationId: deleteAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
    patch:
      deprecated: true
      description: update an account in cluster
      summary: update cluster account
      operationId: updateAccountOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/accounts/privileges/{accountName}:
    patch:
      deprecated: true
      description: update privileges of account
      summary: update account privileges
      operationId: updateAccountPrivilegesOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privilegeList'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/databases:
    get:
      deprecated: true
      description: list databases in cluster
      summary: List cluster databases
      operationId: listDatabasesOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/databaseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
    post:
      deprecated: true
      description: create a database in cluster
      summary: Create cluster database
      operationId: createDatabaseOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/database'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when database is created successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/databases/{databaseName}:
    delete:
      deprecated: true
      description: delete a database in cluster
      summary: Delete cluster database
      operationId: deleteDatabaseOld
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/autohealing:
    get:
      operationId: getAutohealing
      summary: list autohealing job
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autohealingList'
      tags:
        - autohealing
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/metrics:
    get:
      description: Query cluster metrics by specified metric name and instance name, support instant and range query
      operationId: queryClusterMetrics
      summary: Query cluster metrics
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: query
          in: query
          description: The promQL query string
          required: true
          schema:
            type: string
        - name: queryType
          in: query
          description: The query type in the query, if use instant, the query will return the lastest instant value, if use range, the query will return a list of values in the time range
          required: true
          schema:
            $ref: '#/components/schemas/metricsQueryType'
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterMetrics'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/instances/metrics:
    get:
      operationId: getInstacesMetrics
      summary: Get instaces metrics in cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceMetricsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - cluster
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tls:
    get:
      operationId: getTLSCertificate
      summary: Get cluster TLS certificate
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tlsCertList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - tls
    post:
      operationId: tlsSwitcher
      summary: Enable or disable cluster TLS
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tlsRequest'
        description: Enable TLS or not
        required: true
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - tls
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/ipWhitelist:
    get:
      operationId: listIPWhitelist
      summary: List IP whitelists
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelistList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
    post:
      operationId: createIPWhitelist
      summary: Create IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: whitelist
              properties:
                name:
                  description: Name of the whitelist
                  title: Name
                  type: string
                description:
                  description: Description
                  title: Description
                  type: string
                addresses:
                  items:
                    type: string
                  description: Whitelist IP Addresses
                  title: Addresses
                  type: array
              required:
                - name
                - addresses
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelist'
          description: Returned when object is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/ipWhitelist/{ipWhitelistId}:
    patch:
      operationId: updateIPWhitelist
      summary: Update IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: ID of the IP whitelist
          in: path
          name: ipWhitelistId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: whitelist
              properties:
                name:
                  description: Name of the whitelist
                  title: Name
                  type: string
                description:
                  description: Description
                  title: Description
                  type: string
                addresses:
                  items:
                    type: string
                  description: Whitelist IP Addresses
                  title: Addresses
                  type: array
              required:
                - name
                - addresses
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ipWhitelist'
          description: Returned when object is updated successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
      x-codegen-request-body-name: body
    delete:
      operationId: deleteIPWhiteList
      summary: Delete IP whitelist
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: ID of the IP whitelist
          in: path
          name: ipWhitelistId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when object is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - ipWhitelist
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/haHistory:
    get:
      operationId: describeClusterHaHistory
      summary: describe cluster HA history
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the component
          in: query
          name: componentName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/haHistoryResponse'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - cluster
      x-codegen-request-body-name: body
  /admin/v1/events:
    get:
      description: List events
      summary: List events
      operationId: listEvents
      parameters:
        - description: Organization Name
          in: query
          name: orgName
          schema:
            type: string
        - description: resource ID
          in: query
          name: resourceId
          schema:
            type: integer
            format: int64
        - description: resource type
          in: query
          name: resourceType
          schema:
            type: string
        - description: Event Name
          in: query
          name: eventName
          schema:
            type: string
        - description: User ID of the operator
          in: query
          name: operatorId
          schema:
            type: integer
            format: int64
        - description: the pageNumber of the query
          in: query
          name: pageNumber
          schema:
            type: integer
            format: int64
        - description: the pageSize of the query
          in: query
          name: pageSize
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/startTime'
        - $ref: '#/components/parameters/endTime'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/sortDesc'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventList'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - event
  /admin/v1/events/{eventID}:
    get:
      description: Retrieves detailed information about an event based on the provided Event ID.
      summary: Query event detail by Event ID
      operationId: getEvent
      parameters:
        - description: Unique identifier for the event.
          in: path
          name: eventID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - event
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/parameterSpecs:
    get:
      deprecated: true
      description: get parameter specs, deprecated, instead use listParameterProps
      operationId: listParameterSpecs
      summary: List parameter specs of the cluster
      tags:
        - parameter
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the component definition
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterSpecList'
          description: get parameters of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/configurations:
    get:
      deprecated: true
      description: get parameter configurations, deprecated, instead use listParameterProps
      operationId: listConfigurations
      summary: List configurations of the cluster
      tags:
        - parameter
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configurationList'
          description: get configuration of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/paramTpls:
    get:
      deprecated: true
      description: list parameter templates, deprecated, instead use listParameterTemplates
      operationId: listParamTpls
      summary: List parameter templates
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
        - description: the template partition in listParamTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
        - description: Cluster Application Version
          in: query
          name: version
          schema:
            type: string
        - description: component type
          in: query
          name: component
          schema:
            type: string
        - description: engine Name
          in: query
          name: engineName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplList'
          description: list parameter templates successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
    post:
      deprecated: true
      description: create parameter template, deprecated, instead use createParameterTemplate
      operationId: createParamTpl
      summary: Create parameter template
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: create parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
      x-codegen-request-body-name: body
  /admin/v1/paramTpls/{paramTplName}:
    delete:
      deprecated: true
      description: delete parameter template, deprecated, instead use deleteParameterTemplate
      operationId: deleteParamTpl
      summary: Delete configuration template
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: paramTplName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
    get:
      deprecated: true
      description: get parameter template, deprecated, instead use getParameterTemplate
      operationId: readParamTpl
      summary: Get parameter template details
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: paramTplName
          required: true
          schema:
            type: string
        - description: the template partition in read paramTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplGet'
          description: read parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
    patch:
      deprecated: true
      description: update parameter template, deprecated, instead use patchParameterTemplate
      summary: Update configuration template
      operationId: patchParamTpl
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: paramTplName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/paramTpls:
    get:
      deprecated: true
      description: get cluster parameter template, deprecated, instead use getClusterParameterTemplate
      operationId: getClusterParamTpls
      summary: Get cluster configuration templates
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
        - description: engine name
          in: query
          name: engineName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplApplyToClusterList'
          description: get parameter template applicable to the cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
    post:
      deprecated: true
      description: export parameter template from cluster, deprecated, instead use exportParameterTemplateFromCluster
      operationId: createParamTplFromCluster
      summary: Export configuration template from cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreateFromCluster'
        required: true
      responses:
        '200':
          content: {}
          description: create parameter template from cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - paramTpl
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/parameters:
    get:
      operationId: listParameterProps
      summary: List parameter properties of the cluster
      tags:
        - parameter
      parameters:
        - description: name of the organization
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterList'
          description: get configuration of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/parameterHistories:
    get:
      operationId: listParametersHistory
      summary: List parameters history of the cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the parameter
          in: query
          name: parameterName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterHistoryList'
          description: get parameters history of the cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameter
  /admin/v1/parameterTemplates:
    get:
      operationId: listParameterTemplates
      summary: List parameter templates
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
        - description: the template partition in listParameterTemplates request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
        - description: Cluster Application Version
          in: query
          name: version
          schema:
            type: string
        - description: component type
          in: query
          name: component
          schema:
            type: string
        - description: engine Name
          in: query
          name: engineName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplList'
          description: list parameter templates successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    post:
      operationId: createParameterTemplate
      summary: Create parameter template
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: create parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
      x-codegen-request-body-name: body
  /admin/v1/parameterTemplate/{parameterTemplateName}:
    get:
      operationId: readParameterTemplate
      summary: Get parameter template details
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
        - description: the template partition in read paramTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterList'
          description: read parameter template successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    delete:
      operationId: deleteParameterTemplate
      summary: Delete parameter template
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    patch:
      summary: Update parameter template
      operationId: patchParameterTemplate
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplListItem'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/parameterTemplate:
    get:
      operationId: getClusterParameterTemplate
      summary: Get cluster parameter template
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: false
          schema:
            type: string
        - description: engine name
          in: query
          name: engineName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/paramTplApplyToClusterList'
          description: get parameter template applicable to the cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
    post:
      operationId: exportParameterTemplateFromCluster
      summary: Export parameter template from cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/paramTplCreateFromCluster'
        required: true
      responses:
        '200':
          content: {}
          description: export parameter template from cluster successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - parameterTemplate
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}:
    get:
      tags:
        - dms
      operationId: getDataSourceV2
      summary: get the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
    delete:
      tags:
        - dms
      operationId: deleteDataSourceV2
      summary: delete the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when datasource is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource:
    get:
      tags:
        - dms
      operationId: listDataSourceV2
      summary: list the datasource of a cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasourceList'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/testDS:
    post:
      tags:
        - dms
      operationId: testDataSourceV2
      summary: test the datasource
      parameters:
        - name: orgName
          description: name of the Org
          required: true
          in: path
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: boolean
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/createDS:
    post:
      tags:
        - dms
      operationId: createDataSourceV2
      summary: create the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/updateDS:
    post:
      tags:
        - dms
      operationId: updateDataSourceV2
      summary: update the datasource
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasource'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasource'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/query:
    post:
      tags:
        - dms
      operationId: query
      summary: create a SQL query
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsQueryRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryResponse'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/export:
    post:
      tags:
        - dms
      summary: Data Export
      operationId: DataExport
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsExportRequest'
      responses:
        '200':
          description: data in format
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/import:
    post:
      tags:
        - dms
      summary: Data Import
      operationId: DataImport
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsImportRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DmsImportFormData'
      responses:
        '200':
          description: create import task success, wait for task complete...
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: string
                    description: the task id
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/task:
    get:
      tags:
        - dms
      summary: Get the task progress
      operationId: GetTaskProgress
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: taskId
          in: query
          description: the task id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get the task success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsTaskInfo'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/tasks:
    get:
      tags:
        - dms
      summary: Get the task list
      operationId: GetTaskList
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get the task list success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsTaskList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/schemas:
    get:
      tags:
        - dms
      operationId: getSchemaList
      summary: list all databases or schema of the cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSchemaList'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}:
    get:
      tags:
        - dms
      operationId: ListObjectTypesInSchema
      summary: list the type and number of database objects in the specified database or schema
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectList'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}/{type}:
    get:
      tags:
        - dms
      operationId: ListObjectNamesByType
      summary: list the all name for the specified object type
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: object type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectNameList'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/{schema}/{type}/{objectName}:
    get:
      tags:
        - dms
      operationId: GetObjectInfo
      summary: get the detail object info
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
        - name: schema
          in: path
          description: schema or database name
          required: true
          schema:
            type: string
        - name: type
          in: path
          description: object type
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          description: object name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsObjectResponse'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/history:
    get:
      tags:
        - dms
      operationId: listQueryHistory
      summary: list the query History
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryHistoryList'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/sqlExplain:
    post:
      tags:
        - dms
      operationId: sqlExplain
      summary: explain a SQL
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsExplainRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsQueryResponse'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/generateDDL:
    post:
      tags:
        - dms
      operationId: generateDDL
      summary: support ddl and dml operations
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsGenerateDDLRequest'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: string
                description: operation executed successfully
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/showData:
    post:
      tags:
        - dms
      operationId: showData
      summary: read data of table or view
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the datasource
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowDataRequest'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsResult'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/sessions:
    get:
      deprecated: true
      tags:
        - dms
      summary: list all session for the cluster
      operationId: listSessionsOld
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: all
          in: query
          description: whether list all session includes sleep
          default: 'true'
          schema:
            type: string
      responses:
        '200':
          description: list all session success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSessionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/session/{session}:
    delete:
      deprecated: true
      tags:
        - dms
      summary: close the session for the cluster
      operationId: closeSessions
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: session
          in: path
          description: name of the storage volume
          required: true
          schema:
            type: string
        - name: keep
          in: query
          description: whether only close the query and keep the session
          default: 'false'
          schema:
            type: string
      responses:
        '200':
          description: close the session success
          content:
            text/plain:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/running:
    get:
      description: Query running logs of a cluster
      summary: Query cluster running logs
      operationId: queryRunningLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/slow:
    get:
      description: Query slow logs of a cluster
      summary: Query cluster slow logs
      operationId: querySlowLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        client:
                          type: string
                        command:
                          type: string
                        dbName:
                          type: string
                        executionTime:
                          type: integer
                        extra:
                          additionalProperties:
                            type: string
                          type: object
                        timestamp:
                          type: string
                        user:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/audit:
    get:
      description: Query audit logs of a cluster
      summary: Query cluster audit logs
      operationId: queryAuditLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        client:
                          type: string
                        command:
                          type: string
                        dbName:
                          type: string
                        executionTime:
                          type: integer
                        extra:
                          additionalProperties:
                            type: string
                          type: object
                        timestamp:
                          type: string
                        user:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/error:
    get:
      description: Query error logs of a cluster
      summary: Query cluster error logs
      operationId: queryErrorLogs
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      properties:
                        message:
                          type: string
                        timestamp:
                          type: string
                      type: object
                    type: array
                  pagination:
                    properties:
                      endTime:
                        type: string
                      limit:
                        type: string
                      nextEndTime:
                        type: string
                      nextStartTime:
                        type: string
                      startTime:
                        type: string
                    type: object
                type: object
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterLog
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/reconfigure:
    post:
      operationId: reconfigureCluster
      summary: Update cluster configuration
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reconfigureCreate'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/restart:
    post:
      operationId: restartCluster
      summary: Restart cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsRestart'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/rebuildInstance:
    post:
      operationId: rebuildInstance
      summary: rebuild the instance
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsRebuildInstance'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/upgrade:
    post:
      operationId: upgradeCluster
      summary: Upgrade cluster version
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsUpgrade'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/upgradeableServiceVersion:
    get:
      description: list upgraded service version of the component
      summary: list upgraded service version of the component
      operationId: ListUpgradeableServiceVersion
      parameters:
        - description: Name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: organization name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: component type
          in: query
          name: component
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineServiceVersions'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/volume-expand:
    post:
      operationId: clusterVolumeExpand
      summary: Expand cluster volume size
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsVolumeExpand'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/vscale:
    post:
      operationId: verticalScaleCluster
      summary: Vertical scale cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsVScale'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/hscale:
    post:
      operationId: horizontalScaleCluster
      summary: Horizontal scale cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsHScale'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/promote:
    post:
      operationId: promoteCluster
      summary: Promote cluster intance to primary
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsPromote'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/stop:
    post:
      operationId: stopCluster
      summary: Stop cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/start:
    post:
      operationId: startCluster
      summary: Start cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/expose:
    post:
      operationId: exposeCluster
      summary: Expose cluster loadbalancer endpoint
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsExpose'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/updateLicense:
    post:
      operationId: updateClusterLicense
      summary: Update the cluster license
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsLicense'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsRequestName'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/custom-ops:
    post:
      operationId: customOps
      summary: Create custom OpsRequest
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opsCustom'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/opsrequests/{opsName}:
    delete:
      tags:
        - opsrequest
      description: delete a OpsRequest
      summary: Delete OpsRequest
      operationId: deleteOps
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: opsName
          in: path
          description: name of the Opsrequest
          required: true
          schema:
            type: string
        - name: clusterName
          in: query
          description: name of the Cluster
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/opsrequests/{opsName}/cancel:
    post:
      description: cancel a OpsRequest
      summary: Cancel OpsRequest
      operationId: cancelOps
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the OpsRequest
          in: path
          name: opsName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: type of the OpsRequest
          in: query
          name: opsType
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - opsrequest
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/opsrequests/{opsName}:
    get:
      tags:
        - opsrequest
      deprecated: true
      description: get a OpsRequest status, deprecated, instead use cluster task api
      summary: Get OpsRequest Status
      operationId: getOpsRequestStatus
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the OpsRequest
          in: path
          name: opsName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opsStatus'
          description: Successful operation
  /admin/v1/kubernetes/nodes:
    post:
      operationId: listKubernetesNode
      description: List Kubernetes nodes before registered as environment
      summary: List Kubernetes nodes
      parameters:
        - description: region of Kubernetes node
          in: query
          name: region
          schema:
            type: string
        - description: zone of Kubernetes node
          in: query
          name: zone
          schema:
            type: string
        - description: operation of this query, either in or notin
          in: query
          name: op
          schema:
            $ref: '#/components/schemas/listKubernetesNodeOpType'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kubeconfig'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/kubernetes/storageclasses:
    post:
      operationId: listKubernetesStorageClass
      description: List Kubernetes storageclass before registered as environment
      summary: List Kubernetes storageclass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kubeconfig'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageClassList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments:
    get:
      operationId: listEnvironment
      description: List environments
      summary: List environments
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          schema:
            type: string
        - description: cloud provider of the Environment
          in: query
          name: cloudProvider
          schema:
            type: string
        - description: cloud region of the Environment
          in: query
          name: cloudRegion
          schema:
            type: string
        - description: type of the Environment
          in: query
          name: environmentType
          schema:
            $ref: '#/components/schemas/environmentType'
        - description: engine name
          in: query
          name: engine
          schema:
            type: string
        - description: version of the engine
          in: query
          name: version
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
    post:
      operationId: createEnvironment
      summary: Create environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/environmentCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
          description: Returned when environment is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/preflight:
    post:
      operationId: preflightEnvironment
      summary: Preflight check before create Environment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kubeconfig'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preflightList'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/checkNodeSSHConfig:
    post:
      tags:
        - environment
      summary: Check nodes ssh config
      description: Check ssh config of provided IP addresses
      operationId: checkNodeSSHConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sshConfigCheckRequest'
        required: true
      responses:
        '200':
          description: IP connectivity check results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sshConfigCheckResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/environments/{environmentName}:
    delete:
      operationId: deleteEnvironment
      summary: Delete environment
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/environmentDelete'
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
    get:
      operationId: getEnvironment
      summary: Get environment
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
    patch:
      description: partially update the specified Environment
      summary: Update environment
      operationId: patchEnvironment
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/environmentUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environment'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/statusHistory:
    get:
      operationId: getEnvironmentStatusHistory
      summary: Get environment status history
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: start time of the query range (nano seconds)
          in: query
          name: startTime
          required: false
          schema:
            type: string
            format: date-time
        - description: end time of the query range(nano seconds)
          in: query
          name: endTime
          required: false
          schema:
            type: string
            format: date-time
      tags:
        - environment
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/environmentStatusHistory'
  /admin/v1/environments/{environmentName}/resourceStats:
    get:
      description: Returns aggregated resource statistics for the specified environment within an organization.
      operationId: getResourceStats
      summary: Get resource statistics of environment
      parameters:
        - description: The name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentResourceStats'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - resourceStats
  /admin/v1/environments/{environmentName}/nodes/resourceStats:
    get:
      description: Returns aggregated resource statistics for the specified environment within an organization.
      summary: Get resource statistics of nodes
      operationId: listNodesResourceStats
      parameters:
        - description: The name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeResourceStatsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - resourceStats
  /admin/v1/environments/{environmentName}/nodes/monitorStatus:
    get:
      operationId: getEnvironmentMetricsMonitorStats
      summary: Get environment MetricsMonitorStats
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonBody'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/instances/resourceStats:
    get:
      description: Returns aggregated resource statistics for the specified node.
      summary: Get resource statistics of instances
      operationId: listInstancesResourceStats
      parameters:
        - description: The name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: The name of the node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceResourceStatsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - resourceStats
  /admin/v1/environments/{environmentName}/nodes:
    get:
      description: List Kubernetes nodes in an environment
      summary: List Kubernetes nodes in an environment
      operationId: listNodes
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Hostname to filter by
          in: query
          name: hostName
          schema:
            type: string
        - description: List nodes with invalid region & zone labels
          in: query
          name: outOfTopologyRange
          schema:
            type: boolean
        - description: List nodes with label
          in: query
          name: labelKey
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeList'
          description: A list of nodes
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
    post:
      description: Add nodes to environment
      summary: Add nodes to environment
      operationId: addNodes
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodePool'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodePool'
          description: environment nodepool
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/nodes/scaleout:
    post:
      tags:
        - environment
      summary: Scale out environment nodes
      description: Scale out environment by adding new nodes using sealos
      operationId: scaleOutEnvironmentNodes
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeScaleRequest'
        required: true
      responses:
        '202':
          description: Node scaling task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/environments/{environmentName}/nodes/scalein:
    post:
      tags:
        - environment
      summary: Scale in environment nodes
      description: Scale in environment by removing nodes using sealos
      operationId: scaleDownEnvironmentNodes
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeScaleInRequest'
        required: true
      responses:
        '202':
          description: Node scale in task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/cordon:
    patch:
      description: cordon the specified Environment node
      summary: Cordon environment node
      operationId: cordonEnvironmentNode
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/uncordon:
    patch:
      description: cordon the specified Environment node
      summary: Cordon environment node
      operationId: uncordonEnvironmentNode
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: No Content
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/maintenance/on:
    patch:
      description: Set the node to maintenance mode. This action temporarily disables the node for maintenance activities, ensuring no new workloads are scheduled on it.
      summary: Set the node to maintenance mode
      operationId: setNodeMaintenanceMode
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonBody'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/maintenance/off:
    patch:
      description: Remove the node from maintenance mode. This action restores the node to its normal operational state, allowing it to resume handling workloads.
      summary: Remove the node from maintenance mode
      operationId: removeNodeMaintenanceMode
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonBody'
          description: A successful response.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodes/{nodeName}:
    get:
      description: Get specified node info for environment
      summary: Get node info
      operationId: getNode
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonBody'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodes/{nodeName}/pods:
    get:
      description: List Pod in the environment node
      summary: List Pod in the environment node
      operationId: listNodePod
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the environment node
          in: path
          name: nodeName
          required: true
          schema:
            type: string
        - description: filter Pods by type, supported types [all, kube-system, kb-system, cluster], default all if not provided
          in: query
          name: type
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listBody'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/kubeconfig:
    get:
      operationId: getEnvironmentKubeconfig
      summary: Get environment kubeconfig
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpBody'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/bootstrapManifests:
    get:
      operationId: getEnvironmentBootstrapManifests
      summary: Get bootstrap manifests of an environment
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/httpBody'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/status:
    get:
      operationId: getEnvironmentStatus
      summary: Get environment status
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentStatus'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/progress:
    get:
      operationId: getEnvironmentProvisioningProgress
      summary: Get environment provisioning progress
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jsonBody'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/workflow:
    get:
      tags:
        - environment
      operationId: getWorkflowList
      summary: Get component management workflow list
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflowList'
          description: A successful response.
    post:
      tags:
        - environment
      operationId: createWorkflow
      summary: create component management workflow, used to upgrade kubeblocks/gemini
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workflowCreate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow'
          description: A successful response.
  /admin/v1/environments/{environmentName}/workflow/{workflowName}:
    get:
      tags:
        - environment
      operationId: getWorkflow
      summary: Get component management workflows
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: workflow name
          in: path
          name: workflowName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow'
          description: A successful response.
  /admin/v1/environments/{environmentName}/workflow/{workflowName}/log:
    get:
      tags:
        - environment
      operationId: getWorkflowLog
      summary: Get component management workflow log
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: workflow name
          in: path
          name: workflowName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: A successful response.
  /admin/v1/latestEnvModuleVersion:
    get:
      tags:
        - environment
      operationId: getLatestEnvModuleVersion
      summary: Get environment module latest version
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/envModuleVersion'
          description: A successful response.
  /admin/v1/environments/{environmentName}/loadbalancer:
    get:
      tags:
        - loadBalancer
      operationId: getLoadBalancer
      summary: Get the load balancer info in the environment
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loadBalancer'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/loadbalancer/check:
    post:
      tags:
        - loadBalancer
      operationId: checkLoadBalancer
      summary: Check if the load balancer is available
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/loadbalancer/install:
    post:
      tags:
        - loadBalancer
      operationId: installLoadBalancer
      summary: Install load balancer in the environment
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loadBalancerInstall'
        required: true
      responses:
        '200':
          description: OK
          content: {}
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/loadbalancer/uninstall:
    post:
      tags:
        - loadBalancer
      operationId: uninstallLoadBalancer
      summary: Uninstall load balancer in the environment
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/loadbalancer/vipPool:
    get:
      operationId: listVIPPool
      summary: List environment VIP Pools
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vipPoolList'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - vipPool
    post:
      operationId: createVIPPool
      summary: Create environment VIP Pool
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vipPoolCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vipPool'
          description: Returned when environment is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - vipPool
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/loadbalancer/vipPool/{poolID}:
    delete:
      operationId: deleteVIPPool
      summary: Delete environment VIP Pool
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: id of the VIP Pool
          in: path
          name: poolID
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - vipPool
  /admin/v1/environments/{environmentName}/storageClasses:
    get:
      description: Provides a summary of storage class statistics.
      operationId: listStorageClasses
      summary: List storage classes of a environment
      parameters:
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/storageClassList'
          description: A successful response.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the resource does not exist.
      tags:
        - storageClass
    post:
      description: Create storage class for the specified environment.
      operationId: createStorageClass
      summary: create storage class
      parameters:
        - description: Name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        description: Fields used to create the storage class
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageClassCreate'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/storageClassInfo'
          description: Successfully create the storage class.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the resource does not exist.
      tags:
        - storageClass
  /admin/v1/environments/{environmentName}/storageProvisioners:
    get:
      description: Provides a summary of storage provisioners statistics.
      operationId: listStorageProvisioners
      summary: List the provisioners that can be used by storage class of a environment
      parameters:
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/storageProvisionerList'
          description: A successful response.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the resource does not exist.
      tags:
        - storageClass
  /admin/v1/environments/{environmentName}/storageClasses/{storageClassName}:
    get:
      description: get the storage class for the specified environment.
      operationId: getStorageClass
      summary: get storage class
      parameters:
        - description: Name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the Storage Class to be updated
          in: path
          name: storageClassName
          required: true
          schema:
            type: string
        - description: defined whether to search for volume statistics by node. If not set, returns without the stats.
          in: query
          name: withStatsByNode
          schema:
            type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/storageClassInfo'
          description: Successfully get the  storage class.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the environment or storage class does not exist.
      tags:
        - storageClass
    patch:
      description: Updates the  storage class for the specified environment.
      operationId: updateStorageClass
      summary: Update storage class
      parameters:
        - description: Name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the Storage Class to be updated
          in: path
          name: storageClassName
          required: true
          schema:
            type: string
      requestBody:
        description: Fields to update for the storage class
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageClassUpdate'
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: Successfully set the default storage class.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the environment or storage class does not exist.
      tags:
        - storageClass
    delete:
      description: Delete the storage class for the specified environment.
      operationId: deleteStorageClass
      summary: Delete storage class
      parameters:
        - description: Name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the Storage Class to be deleted
          in: path
          name: storageClassName
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: Successfully delete The storage class.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the environment or storage class does not exist.
      tags:
        - storageClass
  /admin/v1/environments/{environmentName}/storageClasses/{storageClassName}/pvcs:
    get:
      description: get the persistentvolumeclaim list related to the specified storage class for the specified environment.
      operationId: listStorageClassPvcs
      summary: get persistentvolumeclaim list of the storage class
      parameters:
        - description: Name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the Storage Class to be specified
          in: path
          name: storageClassName
          required: true
          schema:
            type: string
        - description: defined page id.
          in: query
          name: pageId
          required: true
          schema:
            format: int64
            type: integer
        - description: defined page size.
          in: query
          name: pageSize
          required: true
          schema:
            format: int64
            type: integer
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/persistentVolumeClaimList'
          description: Successfully get the  storage class.
        '403':
          content:
            '*/*':
              schema:
                type: object
          description: Returned when the user does not have permission to access the resource.
        '404':
          content:
            '*/*':
              schema:
                type: string
          description: Returned when the environment or persistentvolumeclaim does not exist.
      tags:
        - storageClass
  /admin/v1/environments/{environmentName}/nodeGroups:
    get:
      operationId: listNodeGroups
      summary: List environment node groups
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
        - name: zones
          in: query
          description: available zones for filtering node groups
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/nodeGroup'
          description: Returned when environment is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
      x-codegen-request-body-name: body
    post:
      operationId: createNodeGroup
      summary: Create environment node group
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeGroup'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeGroup'
          description: Returned when environment is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/nodeGroups/{nodeGroupName}:
    patch:
      description: partially update the specified NodeGroup
      summary: Patch node group
      operationId: patchNodeGroup
      parameters:
        - description: name of the NodeGroup
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the node group
          in: path
          name: nodeGroupName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/nodeGroupUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/nodeGroup'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - environment
      x-codegen-request-body-name: body
    delete:
      operationId: deleteNodeGroup
      summary: Delete environment node group
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the node group
          in: path
          name: nodeGroupName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/availableZones:
    get:
      tags:
        - environment
      summary: List the availability zones where the environment's nodes are located
      description: List available zones of an environment
      operationId: listEnvNodeZone
      parameters:
        - description: name of the Environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stringList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/environmentObjectStorage:
    post:
      operationId: listEnvironmentObjectStorage
      description: List environment object storage
      summary: List environment object storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kubeConfig'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentObjectStorage'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environmentBackupRepo:
    post:
      operationId: getEnvironmentBackupRepo
      summary: get environment backup repo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/kubeConfig'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentBackupRepo'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/projects:
    get:
      tags:
        - project
      operationId: listProjects
      summary: List projects in an environment
      parameters:
        - name: environmentName
          in: path
          description: environment name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projectList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - project
      operationId: createProject
      summary: Create a project in an environment
      parameters:
        - name: environmentName
          in: path
          description: environment name
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectCreate'
        required: true
      responses:
        '201':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/environments/{environmentName}/projects/{projectName}:
    delete:
      tags:
        - project
      operationId: deleteProject
      summary: Delete a project in an environment
      parameters:
        - name: environmentName
          in: path
          description: environment name
          schema:
            type: string
          required: true
        - name: projectName
          in: path
          description: project name
          schema:
            type: string
          required: true
      responses:
        '204':
          description: A successful response.
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/environments/{environmentName}/backupRepo:
    get:
      operationId: listBackupRepos
      summary: List backup repos
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepoList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
    post:
      operationId: createBackupRepo
      summary: Create backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupRepoCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepo'
          description: A successful response.
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepo'
          description: Returned when edge is created successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/backupRepo/{backupRepoName}:
    delete:
      operationId: deleteBackupRepo
      summary: Delete backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the BackupRepo
          in: path
          name: backupRepoName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
    get:
      operationId: getBackupRepo
      summary: Get backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the BackupRepo
          in: path
          name: backupRepoName
          required: true
          schema:
            type: string
        - description: name of the organization
          in: query
          name: orgName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepo'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backupRepo
    post:
      operationId: updateBackupRepo
      summary: Update backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the BackupRepo
          in: path
          name: backupRepoName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupRepoUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepo'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
      x-codegen-request-body-name: body
  /admin/v1/environments/{environmentName}/backupRepo/{backupRepoName}/check:
    get:
      operationId: checkBackupRepo
      summary: check backup repo
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the BackupRepo
          in: path
          name: backupRepoName
          required: true
          schema:
            type: string
        - description: name of the organization
          in: query
          name: orgName
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepoCheck'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backupRepo
  /admin/v1/environments/{environmentName}/backupRepo/{backupRepoName}/view:
    post:
      tags:
        - backupRepo
      operationId: viewBackupRepo
      summary: view backup repo
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
        - name: backupRepoName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupRepoView'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/fileEntryList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/environments/{environmentName}/backupRepo/{backupRepoName}/stats:
    get:
      operationId: listBackupRepoStats
      summary: list backup repo stats
      parameters:
        - name: environmentName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
        - name: backupRepoName
          in: path
          description: name of the environment
          required: true
          schema:
            type: string
        - description: the start time
          in: query
          name: start
          required: false
          schema:
            type: string
        - description: the end time
          in: query
          name: end
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupRepoStatsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backupRepo
  /admin/v1/imageRegistries:
    get:
      operationId: listImageRegistries
      description: List image registries
      summary: List image registries
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imageRegistryList'
          description: A successful response.
      tags:
        - imageRegistry
    post:
      operationId: createImageRegistry
      summary: Create image registry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageRegistry'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imageRegistry'
          description: Returned when image registry is created successfully.
      tags:
        - imageRegistry
      x-codegen-request-body-name: body
  /admin/v1/imageRegistries/{imageRegistryName}:
    delete:
      operationId: deleteImageRegistry
      summary: Delete image registry
      parameters:
        - description: name of the image registry
          in: path
          name: imageRegistryName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageRegistry'
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - imageRegistry
    get:
      operationId: getImageRegistry
      summary: Get image registry
      parameters:
        - description: name of the image registry
          in: path
          name: imageRegistryName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imageRegistry'
          description: A successful response.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - imageRegistry
    patch:
      description: partially update the specified image registry
      summary: Update image registry
      operationId: patchImageRegistry
      parameters:
        - description: name of the image registry
          in: path
          name: imageRegistryName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageRegistry'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/imageRegistry'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - imageRegistry
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/backups:
    post:
      operationId: createClusterBackup
      summary: Create backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/backupPolicy:
    get:
      operationId: getClusterBackupPolicy
      summary: Get backup policy
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: use volume snapshot to back up
          in: query
          name: useVolumeSnapshot
          schema:
            default: true
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupPolicy'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
    patch:
      description: partially update the specified Backup Policy
      summary: Update backup policy
      operationId: updateBackupPolicy
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: use volume snapshot to back up
          in: query
          name: useVolumeSnapshot
          schema:
            default: true
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupPolicy'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupPolicy'
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - backup
      x-codegen-request-body-name: body
  /admin/v1/backups:
    get:
      operationId: listBackups
      summary: List backups
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
        - description: cluster name of the Backup
          in: query
          name: clusterName
          schema:
            type: string
        - description: cluster ID of the Backup
          in: query
          name: clusterID
          schema:
            type: string
        - name: backupRepo
          in: query
          description: backup repo of the Backup
          schema:
            type: string
        - name: fetchWithDeletedCluster
          in: query
          description: defined whether to search for deleted clusters. if not set, returns all backups
          schema:
            type: boolean
        - name: withDeletedBackups
          in: query
          description: defined whether to search for deleted backups. if not set, only return backups that are not deleted
          schema:
            type: boolean
        - name: backupType
          in: query
          description: type of the backup
          schema:
            type: string
        - name: componentName
          in: query
          description: get the backups belong to the component
          schema:
            type: string
        - name: page
          in: query
          description: page number
          schema:
            type: integer
        - name: pageSize
          in: query
          description: page size
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
  /admin/v1/backupStats:
    get:
      operationId: getBackupStats
      summary: Get backup statistics
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupStats'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - backup
  /admin/v1/organizations/{orgName}/backups/{backupId}:
    delete:
      operationId: deleteBackup
      summary: Delete backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
    get:
      operationId: getBackup
      summary: Get backup
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
  /admin/v1/organizations/{orgName}/backups/{backupId}/logs:
    get:
      operationId: getBackupLog
      summary: Get backup log
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupLog'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backup
  /admin/v1/organizations/{orgName}/backups/{backupId}/view:
    post:
      tags:
        - backup
      operationId: viewBackup
      summary: view backup info
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupView'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/fileEntryList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/backups/{backupId}/download:
    get:
      tags:
        - backup
      operationId: downloadBackup
      summary: Download full backup
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      tags:
        - backup
      operationId: downloadMultipleBackups
      summary: Download multiple backup files
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: backupId
          description: the id of backup
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupDownload'
        required: true
      responses:
        '200':
          description: A successful response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /admin/v1/environments/{environmentName}/engines/{engineName}/serviceVersion:
    get:
      description: list the service version of the engine
      summary: list the service version of the engine
      operationId: ListServiceVersion
      parameters:
        - description: environment name
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: Name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: engine mode
          in: query
          name: engineMode
          required: true
          schema:
            type: string
        - description: component type, refer to componentDef and support NamePrefix
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineServiceVersions'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
  /admin/v1/organizations/{orgName}/{engineName}/clusterBackupMethod:
    get:
      operationId: getBackupMethod
      summary: get backup method
      parameters:
        - name: orgName
          in: path
          description: name of the org
          required: true
          schema:
            type: string
        - name: engineName
          in: path
          description: engine name
          required: true
          schema:
            type: string
        - description: clusterID is required when you want to get the backup method of a existing cluster
          in: query
          name: clusterID
          schema:
            type: string
        - name: enablePITR
          in: query
          description: define whether to enable PITR (Point-In-Time Recovery). This setting is required when clusterId is not empty.
          schema:
            type: boolean
        - name: withRebuildInstance
          in: query
          description: defined whether to search for rebuilding instance.
          schema:
            type: boolean
        - name: component
          in: query
          description: The component type is required when withRebuildInstance is true.
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/clusterBackupMethod'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - backupMethod
  /admin/v1/organizations/{orgName}/clustersWithDelete/restoreTimeRange:
    get:
      operationId: getRestoreTimeRange
      summary: Get cluster restore time ragne
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: ID of the KubeBlocks cluster
          in: query
          name: clusterID
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backup'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/restore:
    delete:
      operationId: deleteRestoreObject
      summary: Delete restore task
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the restore
          in: query
          name: restoreName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
    get:
      operationId: listClusterRestore
      summary: List restore tasks
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
    post:
      operationId: doRestore
      summary: Restore current cluster or instance
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restore'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restore'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/restore/{restoreId}/logs:
    get:
      operationId: GetRestoreLog
      summary: get restore workload logs of the cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: id of the restore
          in: path
          name: restoreId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreLog'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - restore
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/markClusterRestoreCompleted:
    post:
      operationId: markClusterRestoreCompleted
      summary: mark cluster to restore completed, usually used when manually repairing or recovering issues
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - markCluster
      x-codegen-request-body-name: body
  /admin/v1/restoreTasks:
    get:
      operationId: listRestores
      summary: List restore tasks
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
      tags:
        - restore
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/restoreList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /admin/v1/organizations/{orgName}/restore:
    post:
      operationId: restoreCluster
      summary: Restore new cluster
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/restoreCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/cluster'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - restore
      x-codegen-request-body-name: body
  /admin/v1/alertSMTPConfig:
    get:
      tags:
        - alertSMTPConfig
      operationId: getAlertSMTPConfig
      summary: Get alert SMTP config
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertSMTPConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertSMTPConfig
      operationId: updateAlertSMTPConfig
      summary: Update alert SMTP config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertSMTPConfig'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertSMTPConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/alertTemplates:
    get:
      tags:
        - alertTemplate
      operationId: listAlertTemplates
      summary: List alert templates
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertTemplateList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertTemplate
      operationId: createAlertTemplate
      summary: Create alert template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertTemplate'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertTemplate'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/alertTemplates/{templateId}:
    get:
      tags:
        - alertTemplate
      operationId: getAlertTemplate
      summary: Get alert template
      parameters:
        - name: templateId
          in: path
          description: id of the alert tmpl configuration
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertTemplate'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
    delete:
      tags:
        - alertTemplate
      operationId: deleteAlertTemplate
      summary: Delete alert template
      parameters:
        - name: templateId
          in: path
          description: id of the alert tmpl configuration
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertTemplate
      description: partially update the alert receiver
      summary: Update alert template
      operationId: patchAlertTemplate
      parameters:
        - name: templateId
          in: path
          description: id of the alert tmpl configuration
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertTemplate'
        required: true
      responses:
        '200':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertTemplate'
        '401':
          $ref: '#/components/responses/401'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/alerts/cluster/{clusterName}:
    get:
      tags:
        - clusterAlertSwitch
      operationId: getClusterAlertDisabled
      summary: Check if cluster alert is disabled
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - clusterAlertSwitch
      operationId: setClusterAlertDisabled
      summary: Set cluster alert disabled or enabled
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertCluster'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alerts/receivers:
    get:
      tags:
        - alertReceiver
      summary: List alert receivers
      operationId: listAlertReceivers
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: alert receiver category
          schema:
            $ref: '#/components/schemas/alertReceiverCategory'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiverList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alerts/checkURL:
    post:
      summary: Batch check URLs connectivity
      description: Tests multiple URLs for connectivity in parallel
      operationId: batchCheckURLConnectivity
      tags:
        - alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/URLCheck'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLCheck'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alerts/statistic:
    get:
      summary: alert statistic
      description: alert statistic
      operationId: alertStatistic
      tags:
        - alert
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStatistic'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/receivers:
    post:
      tags:
        - alertReceiver
      operationId: createAlertReceiver
      summary: Create alert receiver
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: alert receiver category
          required: true
          schema:
            $ref: '#/components/schemas/alertReceiverCategory'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertReceiver'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/receivers/{receiverId}:
    delete:
      operationId: deleteAlertReceiver
      summary: Delete alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - alertReceiver
    get:
      operationId: getAlertReceiver
      summary: Get alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - alertReceiver
    patch:
      description: partially update the alert receiver
      operationId: patchAlertReceiver
      summary: Update alert receiver
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the alert receivers
          in: path
          name: receiverId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertReceiver'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertReceiver'
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
      tags:
        - alertReceiver
      x-codegen-request-body-name: body
  /admin/v1/alerts/strategies:
    get:
      tags:
        - alertStrategy
      operationId: listAlertStrategies
      summary: List alert strategies
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStrategyList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/strategies:
    post:
      tags:
        - alertStrategy
      operationId: createAlertStrategy
      summary: Create alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertStrategy'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
    patch:
      tags:
        - alertStrategy
      operationId: patchAlertStrategy
      summary: Update alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/alerts/strategies/{strategyId}:
    delete:
      tags:
        - alertStrategy
      operationId: deleteAlertStrategy
      summary: Delete alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: strategyId
          in: path
          description: id of the alert strategies
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertStrategy
      operationId: updateAlertStrategy
      summary: Update alert strategy
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: strategyId
          in: path
          description: id of the alert strategies
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertStrategy'
        required: true
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/alerts/rules:
    get:
      tags:
        - alertRule
      operationId: listAlertRules
      summary: List alert rules
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: true
          schema:
            type: string
        - name: disabled
          in: query
          description: disabled status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRuleList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/rules:
    post:
      tags:
        - alertRule
      operationId: createAlertRule
      summary: Create alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: disabled
          in: query
          description: disabled status
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertRule'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/alerts/rules/{alertName}:
    get:
      tags:
        - alertRule
      operationId: getAlertRule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: name of the alert
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - alertRule
      operationId: deleteAlertRule
      summary: Delete alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: id of the alert rules
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertRule
      operationId: updateAlertRule
      summary: Update alert rule
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertName
          in: path
          description: id of the alert rules
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertRule'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertRule'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/organizations/{orgName}/alerts/metrics:
    get:
      tags:
        - alertMetrics
      operationId: listAlertMetrics
      summary: List alert metric types
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/alertMetricList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alerts/objects:
    get:
      tags:
        - alertObject
      operationId: listAlertObjects
      summary: List alert objects
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: page number
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: page size
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObjectList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/objects:
    patch:
      tags:
        - alertObject
      operationId: setAlertObjectsStatus
      summary: Set alert objects status
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            required: true
            schema:
              type: array
              items:
                $ref: '#/components/schemas/alertObject'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObjectList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/objects/{alertId}:
    patch:
      tags:
        - alertObject
      operationId: setAlertObjectStatus
      summary: Set alert object status
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: alertId
          in: path
          description: alert id
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertObject'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/config:
    get:
      tags:
        - alertConfig
      operationId: getAlertConfig
      summary: Get alert config
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertConfig
      operationId: setAlertConfig
      summary: Set alert config
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertConfig'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alerts/inhibits:
    get:
      tags:
        - alertInhibit
      operationId: listAlertInhibits
      summary: List alert inhibits
      parameters:
        - name: orgName
          in: query
          description: name of the Org
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibitList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/inhibits:
    post:
      tags:
        - alertInhibit
      operationId: createAlertInhibit
      summary: Create alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertInhibit'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - alertInhibit
      operationId: patchAlertInhibit
      summary: Patch alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertInhibit'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/alerts/inhibits/{inhibitId}:
    get:
      tags:
        - alertInhibit
      operationId: getAlertInhibit
      summary: Get alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: inhibitId
          in: path
          description: inhibit id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertInhibit'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - alertInhibit
      operationId: deleteAlertInhibit
      summary: Delete alert inhibit
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: inhibitId
          in: path
          description: inhibit id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/alertSMSConfig:
    get:
      tags:
        - alertConfig
      operationId: getAlertSMSConfig
      summary: Get alert SMS config
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertSMSConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - alertConfig
      operationId: updateAlertSMSConfig
      summary: Update alert SMS config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alertSMSConfig'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alertSMSConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: body
  /admin/v1/engineOptions:
    get:
      description: list all engineOptions
      summary: List all engineOptions
      operationId: listEngineOptions
      parameters:
        - description: The version of the engineOption to query, `current` from potentially modified data, `original` from the json files of the apiserver
          in: query
          name: version
          required: false
          schema:
            $ref: '#/components/schemas/engineOptionVersion'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOptionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engineOption
    post:
      description: Create a new engineOption
      summary: Create engineOption
      operationId: createEngineOption
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineOption'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOption'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
      x-codegen-request-body-name: body
  /admin/v1/engineOptions/{engineName}:
    get:
      description: Get a engineOption detail
      summary: Get engineOption
      operationId: getEngineOption
      parameters:
        - description: Name of the engineOption
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: The version of the engineOption to query, `current` from potentially modified data, `original` from the json files of the apiserver
          in: query
          name: version
          required: false
          schema:
            $ref: '#/components/schemas/engineOptionVersion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOption'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
    put:
      description: Update a engineOption
      summary: Update engineOption
      operationId: updateEngineOption
      parameters:
        - description: Name of the engineOption
          in: path
          name: engineName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineOption'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOption'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
      x-codegen-request-body-name: body
  /admin/v1/engineOptionHistories:
    get:
      description: List a engineOption histories of a engine
      summary: List engineOption history
      operationId: listEngineOptionHistory
      parameters:
        - description: Name of the engine
          in: query
          name: engineName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineOptionHistoryList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineOption
  /admin/v1/engineLicenses:
    get:
      description: list all engineLicenses
      summary: List all engineLicenses
      operationId: listEngineLicenses
      parameters:
        - description: engine name
          in: query
          name: engineName
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineLicenseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engineLicense
  /admin/v1/engineLicense:
    get:
      description: Get a engineLicense detail
      summary: Get engineLicense
      operationId: engineLicense
      parameters:
        - description: license id
          in: query
          name: licenseId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineLicense'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineLicense
    post:
      description: Create a new engineLicense
      summary: Create engineLicense
      operationId: createEngineLicense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineLicenseCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/engineLicenseFormData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineLicense'
          description: OK
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - engineLicense
    delete:
      description: delete an engine license
      summary: Delete engine license
      operationId: deleteEngineLicense
      parameters:
        - description: license id
          in: query
          name: licenseId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engineLicense
  /admin/v1/environments/{environmentName}/engines:
    get:
      operationId: listEnginesInEnv
      summary: List engines in environment
      parameters:
        - description: name of the EnvironmentName
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: engine name
          in: query
          name: name
          schema:
            type: string
        - description: engine Type
          in: query
          name: type
          schema:
            $ref: '#/components/schemas/engineType'
        - description: engine version
          in: query
          name: version
          schema:
            type: string
        - name: provider
          in: query
          description: engine provider
          schema:
            type: string
        - name: all
          in: query
          description: list all engines include uninstall engines
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
  /admin/v1/environments/{environmentName}/engines/{engineName}:
    get:
      operationId: getEngineByNameInEnv
      summary: Get engine in environment
      parameters:
        - description: name of the EnvironmentName
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: engine version
          in: query
          name: version
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engine'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
    post:
      tags:
        - engine
      operationId: engineAction
      summary: Manage engine in environment
      parameters:
        - name: environmentName
          in: path
          description: name of the EnvironmentName
          required: true
          schema:
            type: string
        - name: engineName
          in: path
          description: name of the engine
          required: true
          schema:
            type: string
      requestBody:
        description: Request body for engine operations
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  type: string
                  description: Version of the engine, required for upgrade/enable/disable action
                action:
                  $ref: '#/components/schemas/engineActionType'
                id:
                  type: string
                  description: The engine id to action
        required: true
      responses:
        '200':
          description: Operation completed successfully
          content:
            application/json:
              schema:
                type: string
                example: enable succeeded
                description: Success message indicating the operation result
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      x-codegen-request-body-name: actionInfo
  /admin/v1/engines:
    get:
      operationId: listAllEngines
      summary: List all engines
      parameters:
        - description: engine name
          in: query
          name: name
          schema:
            type: string
        - description: engine Type
          in: query
          name: type
          schema:
            $ref: '#/components/schemas/engineType'
        - description: engine version
          in: query
          name: version
          schema:
            type: string
        - name: provider
          in: query
          description: engine provider
          schema:
            type: string
        - name: all
          in: query
          description: list all engines include uninstall engines
          schema:
            type: boolean
            default: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - engine
  /admin/v1/license:
    get:
      tags:
        - license
      summary: Get license
      description: Get license
      operationId: getLicense
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - license
      summary: Update license
      description: Update license
      operationId: updateLicense
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenseRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/classes:
    get:
      tags:
        - class
      operationId: listClasses
      summary: List classes
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - class
      operationId: createClass
      summary: Create class
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - class
      operationId: patchClass
      summary: Patch class
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - class
      operationId: deleteClass
      summary: Delete class
      parameters:
        - name: code
          in: query
          description: code
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned when project is deleted successfully.
          content:
            application/json:
              schema:
                type: object
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/classes/batch:
    post:
      tags:
        - class
      operationId: batchClass
      summary: batch update class over-commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/classBatch'
      responses:
        '200':
          description: A successful response.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/instance-types:
    get:
      tags:
        - instanceTypes
      operationId: getInstanceTypes
      summary: Get all instance types
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/instanceTypes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - instanceTypes
      operationId: createInstanceType
      summary: Create a new instance type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createInstanceType'
      responses:
        '201':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceTypes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  /admin/v1/instance-types/{id}:
    get:
      tags:
        - instanceTypes
      operationId: getInstanceTypeById
      summary: Get an instance type by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceTypes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - instanceTypes
      operationId: updateInstanceType
      summary: Update an instance type by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/instanceTypes'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceTypes'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - instanceTypes
      operationId: deleteInstanceType
      summary: Delete an instance type by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers:
    get:
      tags:
        - provider
      summary: Get cloud provider list
      description: Get cloud provider list
      operationId: listCloudProviders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/providerList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - provider
      summary: Create a cloud provider
      description: Create a cloud provider
      operationId: createCloudProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/providerCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}:
    get:
      tags:
        - provider
      summary: Get cloud provider
      description: Get cloud provider
      operationId: getCloudProvider
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - provider
      summary: Update a cloud provider
      description: Update a cloud provider
      operationId: updateCloudProvider
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/providerUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/provider'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - provider
      summary: Delete a cloud provider
      description: Delete a cloud provider
      operationId: deleteCloudProvider
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regions:
    get:
      tags:
        - region
      summary: Get region list
      description: Get region list
      operationId: listRegions
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/regionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - region
      summary: Create a region
      description: Create a region
      operationId: createRegion
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/regionCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/region'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regions/{regionName}:
    get:
      tags:
        - region
      summary: Get region
      description: Get region
      operationId: getRegion
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the cloud region
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/region'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - region
      summary: Update a region
      description: Update a region
      operationId: updateRegion
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/regionUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/region'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - region
      summary: Delete a region
      description: Delete a region
      operationId: deleteRegion
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regions/{regionName}/zones:
    get:
      tags:
        - zone
      summary: Get zone list
      description: Get zone list
      operationId: listZones
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zoneList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - zone
      summary: Create a zone
      description: Create a zone
      operationId: createZone
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/zoneCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regions/{regionName}/zones/{zoneName}:
    get:
      tags:
        - zone
      summary: Get zone
      description: Get zone
      operationId: getZones
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
        - in: path
          name: zoneName
          description: Name of the zone
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - zone
      summary: Update a zone
      description: Update a zone
      operationId: updateZone
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
        - in: path
          name: zoneName
          description: Name of the zone
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/zoneUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zone'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - zone
      summary: Delete a zone
      description: Delete a zone
      operationId: deleteZone
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionName
          description: Name of the region
          required: true
          schema:
            type: string
        - in: path
          name: zoneName
          description: Name of the zone
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regionGroups:
    get:
      tags:
        - regionGroup
      summary: Get region group list
      description: Get region group list
      operationId: listRegionGroups
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/regionGroupList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - regionGroup
      summary: Create a region group
      description: Create a region group
      operationId: createRegionGroup
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/regionGroupCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/regionGroup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/providers/{providerName}/regionGroups/{regionGroupName}:
    patch:
      tags:
        - regionGroup
      summary: Update a region group
      description: Update a region group
      operationId: updateRegionGroup
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionGroupName
          description: Name of the region group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/regionGroupUpdate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/regionGroup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - regionGroup
      summary: Delete a region group
      description: Delete a region
      operationId: deleteRegionGroup
      parameters:
        - in: path
          name: providerName
          description: Name of the cloud provider
          required: true
          schema:
            type: string
        - in: path
          name: regionGroupName
          description: Name of the region group
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/llm:
    post:
      operationId: createLLM
      summary: Create LLM
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              description: llmCreate
              properties:
                name:
                  description: LLM name
                  title: Name
                  type: string
                config:
                  description: LLM config
                  title: LLM config
                  type: object
                  additionalProperties:
                    type: object
                type:
                  description: Type of LLM
                  title: Type
                  type: string
                enabled:
                  description: Whether this LLM is enabled
                  title: Enabled
                  type: boolean
              required:
                - name
                - config
                - type
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llm'
          description: Returned when object is created successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - llm
    get:
      operationId: listLLM
      summary: List LLM
      deprecated: true
      produces:
        - application/json
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llmList'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - llm
  /admin/v1/llm/{id}:
    patch:
      operationId: updateLLM
      summary: Update LLM
      deprecated: true
      parameters:
        - description: ID of the LLM
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: llmUpdate
              properties:
                name:
                  description: LLM name
                  title: Name
                  type: string
                config:
                  description: LLM config
                  title: LLM config
                  type: object
                  additionalProperties:
                    type: object
                type:
                  description: Type of LLM
                  title: Type
                  type: string
                enabled:
                  description: Whether this LLM is enabled
                  title: Enabled
                  type: boolean
              required:
                - name
                - config
                - type
              type: object
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/llm'
          description: Returned when object is updated successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - llm
      x-codegen-request-body-name: body
    delete:
      operationId: deleteLLM
      summary: Delete LLM
      deprecated: true
      parameters:
        - description: ID of the LLM
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when object is deleted successfully.
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - llm
  /admin/v1/monitorDataSinks:
    post:
      tags:
        - monitorDataSink
      summary: Create monitor data sink
      description: Create monitor data sink
      operationId: createMonitorDataSink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitorDataSinkCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitorDataSink'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/monitorDataSinks/{monitorDataSinkID}:
    delete:
      tags:
        - monitorDataSink
      operationId: deleteMonitorDataSink
      summary: Delete monitor data sink
      parameters:
        - description: monitor data sink id
          in: path
          name: monitorDataSinkID
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - monitorDataSink
      description: Update the specified monitor data sink
      summary: Update the specified monitor data sink
      operationId: patchMonitorDataSink
      parameters:
        - description: monitor data sink id
          in: path
          name: monitorDataSinkID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/monitorDataSinkUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitorDataSink'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/monitorDataSinks/environments/{environmentName}:
    get:
      tags:
        - monitorDataSink
      summary: Get monitor data sink list
      description: Get monitor data sink list
      operationId: listMonitorDataSinks
      parameters:
        - description: kubernetes environment name which monitor data sink deployed in.
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/monitorDataSinkList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/engineVersions:
    post:
      tags:
        - engine
      summary: Create engine version
      description: Create engine version
      operationId: createEngineVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineVersionCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineVersion'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - engine
      operationId: deleteEngineVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineVersionDelete'
      summary: Delete engine version
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - engine
      description: Update the specified engine version
      summary: Update the specified engine version
      operationId: patchEngineVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engineVersionUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineVersion'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/engineVersions/{engineName}:
    get:
      tags:
        - engine
      summary: Get engine version list
      description: Get engine version list
      operationId: listEngineVersions
      parameters:
        - description: Name of Engine.
          in: path
          name: engineName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engineVersionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/features:
    get:
      description: Get feature list
      summary: Get feature list
      operationId: listFeature
      parameters:
        - description: name of the feature group
          in: query
          name: group
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/featureList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - feature
  /admin/v1/featureGroups:
    get:
      description: Get feature group list
      summary: Get feature group list
      operationId: listFeatureGroup
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - feature
  /admin/v1/features/{featureName}:
    get:
      description: Get feature
      summary: Get feature
      operationId: readFeature
      parameters:
        - description: name of the feature
          in: path
          name: featureName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feature'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - feature
  /admin/v1/organizations/{orgName}/inspections:
    get:
      tags:
        - inspection
      operationId: listInspections
      summary: list inspections
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: list tasks for the specified cluster
          in: query
          name: clusterID
          schema:
            type: string
        - description: list task details if specified
          in: query
          name: taskID
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inspection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - inspection
      operationId: updateInspection
      summary: Update inspection
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inspection'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inspection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/autoInspection:
    get:
      tags:
        - inspection
      operationId: listAutoInspection
      summary: list auto inspection
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autoInspection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - inspection
      operationId: createAutoInspection
      summary: Create auto inspection
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/autoInspection'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autoInspection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - inspection
      operationId: updateAutoInspection
      summary: Update auto inspection
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/autoInspection'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/autoInspection'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/inspectionScripts:
    get:
      tags:
        - inspection
      operationId: listInspectionScripts
      summary: list inspection scripts
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: query by
          in: query
          name: engine
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inspectionScript'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    post:
      tags:
        - inspection
      operationId: createInspectionScript
      summary: Create inspection script
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inspectionScript'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inspectionScript'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - inspection
      operationId: updateInspectionScript
      summary: Update inspection script
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inspectionScript'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inspectionScript'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - inspection
      operationId: deleteInspectionScript
      summary: Delete inspection script
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inspectionScript'
        required: true
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inspectionScript'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/storageProviders:
    get:
      operationId: listStorageProviders
      summary: List storage providers for storage
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageProviderList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /admin/v1/environments/{environmentName}/storages:
    get:
      operationId: listStorages
      summary: List storages
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - name: name
          description: the search key to search storage's name
          in: query
          schema:
            type: string
        - name: key
          description: key to search storage's tag
          in: query
          schema:
            type: string
        - name: value
          description: value to search storage's tag
          in: query
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    post:
      operationId: createStorage
      summary: Create a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /admin/v1/environments/{environmentName}/storages/{storageName}:
    get:
      operationId: getStorage
      summary: Get a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    post:
      operationId: updateStorage
      summary: Update a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storage'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
    delete:
      operationId: deleteStorage
      summary: Delete a storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /admin/v1/storageCheck:
    post:
      operationId: checkStorage
      summary: Check if storage can be accessed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/storageCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/storageCheckResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /admin/v1/environments/{environmentName}/storages/{storageName}/importbackup:
    post:
      operationId: importBackup
      summary: scan and import backup records from storage
      parameters:
        - description: name of the environment
          in: path
          name: environmentName
          required: true
          schema:
            type: string
        - description: name of the storage
          in: path
          name: storageName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/importBackup'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - storage
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tenants:
    get:
      tags:
        - oceanbase
      operationId: listTenants
      summary: list all tenants for the oceanbase cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantList'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}:
    get:
      tags:
        - oceanbase
      operationId: getTenant
      summary: get tenants detail information of the oceanbase cluster
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          description: id of the tenant
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameters:
    get:
      tags:
        - dms
      summary: list cluster parameters
      operationId: listParameters
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
        - name: mode
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsParameterList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameter:
    post:
      tags:
        - dms
      summary: alter cluster parameter
      operationId: alterParameter
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DmsObAlterParameter'
      responses:
        '200':
          description: close the session success
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/tenant/{tenantId}/parameterHistory:
    get:
      tags:
        - dms
      summary: List parameters history of the Oceanbase tenant
      operationId: tenantParameterHistory
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: tenantId
          description: id of the tenant
          in: path
          required: true
          schema:
            type: string
        - description: name of the parameter
          in: query
          name: parameterName
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parameterHistoryList'
          description: get parameters history of the cluster successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/instances:
    get:
      summary: List cluster instances
      description: List instances based on query parameters with constraints.
      operationId: listInstances
      parameters:
        - name: envName
          in: query
          description: Name of the environment (optional, required when querying by nodeName).
          schema:
            type: string
        - name: nodeName
          in: query
          description: Name of the node (optional, required when querying by envName).
          schema:
            type: string
        - name: orgName
          in: query
          description: Name of the organization (optional, required when querying by clusterName).
          schema:
            type: string
        - name: clusterName
          in: query
          description: Name of the cluster (optional).
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instanceList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - instance
  /admin/v1/metadb/summary:
    get:
      tags:
        - metadb
      operationId: getPostgresClusterInfo
      summary: Get summary of postgresql cluster.
      parameters:
        - name: clusterName
          in: query
          description: name of the cluster
          required: false
          schema:
            type: string
        - name: namespace
          in: query
          description: namespace of the cluster
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/summary'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/metadb/instances:
    get:
      operationId: metadbListInstances
      summary: List metadb cluster instances
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadb_instanceList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - metadb
  /admin/v1/metadb/instancesMetrics:
    get:
      operationId: getMetadbInstancesMetrics
      summary: Get instances metrics in metadb
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadb_instanceMetricsList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - metadb
  /admin/v1/metadb/backups:
    post:
      tags:
        - metadb
      operationId: metadbBackup
      summary: Backup metadb to S3(AWS S3 or minio)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadb_backup'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - metadb
      operationId: listMetadbBackups
      summary: List all names of backups in S3.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadb_backupList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - metadb
      operationId: deleteMetadbBackups
      summary: Delete backups by name or delete all
      parameters:
        - name: backupName
          in: query
          description: Delete target backup by name
          schema:
            type: string
        - name: all
          in: query
          description: Delete all backups in the storage
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: OK
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/metadb/backupConfig:
    get:
      tags:
        - metadb
      operationId: metadbBackupGetConfig
      summary: get backup config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - metadb
      operationId: metadbBackupConfig
      summary: set backup config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/backupConfig'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/backupConfig'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/metadb/restore:
    post:
      tags:
        - metadb
      operationId: metadbRestore
      summary: Restore metadb
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadb_restore'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadb_restore'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/metadb/volumeExpand:
    post:
      operationId: metadbVolumeExpand
      summary: Expand cluster volume size
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/volumeExpand'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/volumeExpand'
          description: Accepted
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - metadb
  /admin/v1/metadb/vscale:
    post:
      tags:
        - metadb
      operationId: metadbVerticalScale
      summary: vertical scale
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vscale'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vscale'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/platformParameters:
    get:
      tags:
        - platformParameter
      operationId: listPlatformParameters
      summary: list platformParameters
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformParameterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    patch:
      tags:
        - platformParameter
      operationId: updatePlatformParameters
      summary: update platformParameters
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/platformParameterUpdate'
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/platformParameter'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/platformParameters/{platformParameterName}:
    get:
      tags:
        - platformParameter
      operationId: getPlatformParameter
      summary: get platformParameter by name
      parameters:
        - description: name of the platformParameter
          in: path
          name: platformParameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/platformParameter'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/recycleBin/clusters:
    get:
      tags:
        - recycleBinCluster
      operationId: listRecycleBinClusters
      summary: List all clusters in the Recycle Bin
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/recycleBin/clusters:
    get:
      tags:
        - recycleBinCluster
      operationId: listRecycleBinCluster
      summary: List clusters in the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/recycleBin/clusters/{clusterName}:
    get:
      tags:
        - recycleBinCluster
      operationId: getRecycleBinCluster
      summary: Get cluster in the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
        - recycleBinCluster
      operationId: deleteRecycleBinCluster
      summary: Delete cluster from the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
        - name: isDeleteBackup
          in: query
          description: whether to delete the backup of the cluster
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: A successful response.
          content: {}
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/organizations/{orgName}/recycleBin/clusters/{clusterName}/restore:
    post:
      tags:
        - recycleBinCluster
      operationId: restoreRecycleBinCluster
      summary: Restore cluster from the Recycle Bin of the Org
      parameters:
        - name: orgName
          in: path
          description: name of the Org
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: name of the cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recycleBinCluster'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /admin/v1/tasks:
    get:
      tags:
        - task
      summary: List task
      description: List tasks
      operationId: listTask
      responses:
        '200':
          description: Current task list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/tasks/{taskId}:
    get:
      summary: Get task detail
      description: Get task
      operationId: getTask
      parameters:
        - description: ID of the task
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current status of the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - task
  /admin/v1/tasks/{taskId}/stop:
    patch:
      summary: Stop a task
      description: stop task
      operationId: stopTask
      parameters:
        - description: ID of the task
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current status of the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - task
  /admin/v1/tasks/{taskId}/retry:
    patch:
      summary: Retry a task
      description: retry task
      operationId: retryTask
      parameters:
        - description: ID of the task
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Current status of the task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - task
  /admin/v1/tasks/{taskId}/log:
    get:
      tags:
        - task
      consumes:
        - '*/*'
      produces:
        - text/plain
      schemes:
        - https
        - http
      operationId: getTaskLog
      summary: Get task log
      parameters:
        - description: ID of the task
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/clustertasks:
    get:
      operationId: listClusterTasks
      summary: List cluster tasks
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: query
          name: clusterName
          schema:
            type: string
        - description: You want to check the status of the task. If not passed, all selected by default
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/cluster_opsStatus'
        - description: You want to check the type of the task. If not passed, all selected by default
          in: query
          name: clusterTaskType
          schema:
            $ref: '#/components/schemas/opsType'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTaskList'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
      tags:
        - clusterTask
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/clustertasks/{taskId}:
    get:
      description: Get cluster task
      summary: Get cluster task
      operationId: getClusterTask
      parameters:
        - description: Organization Name
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: Cluster Name
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: Task ID
          in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - clusterTask
  /admin/v1/organizations/{orgName}/cluster/{clusterName}/available-relations:
    get:
      tags:
        - relation
      summary: list the available clusters for the organization to create the a relation
      operationId: listAvailableClustersForRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: targetType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list the available clusters for the organization to create the a relation successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/availableClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/relations:
    get:
      tags:
        - relation
      summary: list the clusters that have built a relation to the specified cluster
      operationId: listRelatedClusters
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: list the clusters that have built relations to the cluster
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relatedClusterList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - relation
      summary: create a relation between the clusters in the organization
      operationId: createRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: query
          required: true
          schema:
            type: string
      responses:
        '204':
          description: create a relation between the clusters in the organization successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/relation/{target}:
    delete:
      tags:
        - relation
      summary: delete a existed relation between the clusters in the organization
      operationId: deleteRelation
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
        - name: target
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: delete a existed relation between the clusters in the organization successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/environments/{environmentName}/modules:
    get:
      operationId: getEnvironmentModuleInfo
      summary: Get environment module information in an environment
      parameters:
        - name: environmentName
          in: path
          required: true
          description: Environment Name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentModuleInfo'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
    patch:
      operationId: updateEnvironmentModule
      summary: update environment module
      parameters:
        - name: environmentName
          in: path
          required: true
          description: Environment Name
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/environmentModuleUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workflow'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/modules/{moduleName}/details:
    get:
      operationId: getEnvironmentModuleDetails
      summary: Get details information for an environment module
      parameters:
        - name: environmentName
          in: path
          required: true
          description: Environment Name
          schema:
            type: string
        - name: moduleName
          in: path
          required: true
          description: Environment module name
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentModuleDetails'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
  /admin/v1/environments/{environmentName}/modules/{moduleName}/pods/{podName}/logs:
    get:
      operationId: getEnvironmentModuleLogs
      summary: Get logs for an environment module pod. When no parameters other than containerName and search are provided, start streaming logs in real-time.
      parameters:
        - name: environmentName
          in: path
          required: true
          description: Environment Name
          schema:
            type: string
        - name: moduleName
          in: path
          required: true
          description: Environment module name
          schema:
            type: string
        - name: podName
          in: path
          required: true
          description: Pod name
          schema:
            type: string
        - name: containerName
          in: query
          required: false
          description: Container name
          schema:
            type: string
        - name: sinceSeconds
          in: query
          required: false
          description: Get logs from the last n seconds
          schema:
            type: integer
        - name: sinceTime
          in: query
          required: false
          description: Get logs since this time (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: tailLines
          in: query
          required: false
          description: Number of lines to return from the end
          schema:
            type: integer
        - name: search
          in: query
          required: false
          description: Search keyword in logs
          schema:
            type: string
        - name: previous
          in: query
          required: false
          description: Get previous terminated container logs
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentModuleLogs'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/brokers:
    get:
      summary: Get all brokers in cluster
      operationId: getKafkaBrokers
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/brokers/{brokerId}/configs:
    get:
      summary: Get all configs of a broker
      operationId: getKafkaBrokerConfigs
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: brokerId
          in: path
          required: true
          schema:
            type: integer
          description: The id of broker
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update broker config
      operationId: updateKafkaBrokerConfig
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: brokerId
          in: path
          required: true
          schema:
            type: integer
          description: The id of broker
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBrokerConfigRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topics:
    get:
      summary: Get all topics in cluster
      operationId: getKafkaTopics
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: nameFilter
          in: query
          required: false
          description: search pattern, support prefix search
          schema:
            type: string
        - name: onlyNames
          in: query
          required: false
          schema:
            type: boolean
          description: if true, only return topic names
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Create new topic
      operationId: createKafkaTopic
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTopicRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}:
    get:
      summary: Get topic Infos
      operationId: getKafkaTopicInfos
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicDetails'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete topic
      operationId: deleteKafkaTopic
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Topic successfully deleted
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/brokers:
    get:
      summary: Get broker distributions of topic
      operationId: getKafkaTopicBrokers
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicBrokerList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/partitions:
    get:
      summary: Get partition list of topic
      operationId: getKafkaTopicPartitions
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: expand topic partition
      operationId: expandKafkaTopicPartitions
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpandPartitionRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/configs:
    get:
      summary: Get topic configuration
      operationId: getKafkaTopicConfig
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Update topic configuration
      operationId: setKafkaTopicConfig
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicConfigRequest'
      responses:
        '200':
          description: OK
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/consumer-groups:
    get:
      summary: List consumer groups of topic
      operationId: listKafkaTopicConsumerGroups
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/consumer-groups/{groupId}/offsets:
    get:
      summary: List consumer offsets of topic
      operationId: listKafkaTopicConsumerOffsets
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicOffsetList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      summary: Reset consumer offset of topic
      operationId: resetKafkaTopicConsumerOffset
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
          description: The name of topic
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetOffsetRequest'
      responses:
        '204':
          description: Consumer offset successfully reset
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/topic/{topic}/messages:
    get:
      summary: List messages from topic
      operationId: listKafkaTopicMessages
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
        - name: partition
          in: query
          required: true
          schema:
            type: integer
        - name: offset
          in: query
          required: true
          schema:
            type: integer
        - name: count
          in: query
          description: 获取消息的数量
          required: false
          schema:
            type: integer
            default: 100
        - name: keyFilter
          in: query
          description: 消息 key 的过滤条件（大小写不敏感）
          required: false
          schema:
            type: string
        - name: valueFilter
          in: query
          description: 消息内容的过滤条件（大小写不敏感）
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicMessageList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Produce message to topic
      operationId: produceKafkaTopicMessage
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: topic
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicMessageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: 生成消息的字节长度
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/consumer-groups:
    get:
      summary: List all consumer groups
      operationId: listKafkaConsumerGroups
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: query
          required: false
          schema:
            type: string
          description: the id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/kafka/organizations/{orgName}/clusters/{clusterName}/consumer-groups/{groupId}:
    get:
      summary: Get consumer group describe
      operationId: getKafkaConsumerGroupDescribe
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupDescribeResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Delete consumer group
      operationId: deleteKafkaConsumerGroup
      tags:
        - kafka
      parameters:
        - name: orgName
          in: path
          required: true
          schema:
            type: string
          description: The name of organization
        - name: clusterName
          in: path
          required: true
          schema:
            type: string
          description: The name of cluster
        - name: groupId
          in: path
          required: true
          schema:
            type: string
          description: The id of consumer group
      responses:
        '204':
          description: Consumer group successfully deleted
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/redis/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      tags:
        - redis
      summary: list redis accounts
      operationId: listRedisAccounts
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: the component type to list accounts
          required: false
          schema:
            type: string
      responses:
        '200':
          description: list redis users success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLUserResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - redis
      summary: create redis account
      operationId: createRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: the component type to create account
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLUser'
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/redis/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      tags:
        - redis
      summary: delete redis account
      operationId: deleteRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: accountName
          in: path
          description: the name of account
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: in which component type to delete account
          required: false
          schema:
            type: string
      responses:
        '200':
          description: delete redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      tags:
        - redis
      summary: update redis account
      operationId: updateRedisAccount
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
        - name: accountName
          in: path
          description: the name of account
          required: true
          schema:
            type: string
        - name: component
          in: query
          description: in which component type to update account
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLUser'
      responses:
        '200':
          description: update redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clusterTask'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/redis/organizations/{orgName}/clusters/{clusterName}/redisInsight:
    get:
      tags:
        - redis
      summary: get available redisInsight
      operationId: getAvailableRedisInsight
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
      responses:
        '200':
          description: get available redisInsight success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedisInsight'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - redis
      summary: enable redisInsight plugin
      operationId: enableRedisInsight
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedisInsightEnableOpt'
      responses:
        '200':
          description: enable redisInsight success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedisInsight'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - redis
      summary: disable redisInsight plugin
      operationId: disableRedisInsight
      parameters:
        - name: orgName
          in: path
          description: the name of organization
          required: true
          schema:
            type: string
        - name: clusterName
          in: path
          description: the name of cluster
          required: true
          schema:
            type: string
      responses:
        '204':
          description: disable redisInsight success
          content: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/databases:
    get:
      description: list databases for rdbms engine cluster
      summary: List cluster databases
      operationId: listDatabases
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/databaseList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
    post:
      description: create a database in cluster
      summary: Create cluster database
      operationId: createDatabase
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/database'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when database is created successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
      x-codegen-request-body-name: body
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/databases/{databaseName}:
    delete:
      description: delete a database in cluster
      summary: Delete cluster database
      operationId: deleteDatabase
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of database
          in: path
          name: databaseName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - database
        - rdbms
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      description: list accounts in cluster
      summary: List cluster accounts
      operationId: listAccounts
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
      x-codegen-request-body-name: body
    post:
      description: create an account in cluster
      summary: Create cluster account
      operationId: createAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
      x-codegen-request-body-name: body
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      description: delete an account in cluster
      summary: Delete cluster account
      operationId: deleteAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
    patch:
      description: update an account in cluster
      summary: update cluster account
      operationId: updateAccount
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
      x-codegen-request-body-name: body
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/root-password:
    get:
      description: get root account password
      summary: get root account password
      operationId: getRootAccountPassword
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: query
          name: accountName
          required: true
          schema:
            type: string
        - description: name of the component
          in: query
          name: component
          required: false
          schema:
            type: string
      responses:
        '200':
          description: get root account password success
          content:
            application/json:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - account
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}/privileges:
    patch:
      description: update account privileges for rdbms engine
      summary: update account privileges
      operationId: updateAccountPrivileges
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the account
          in: path
          name: accountName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privilegeList'
        required: true
      responses:
        '204':
          content: {}
          description: Returned when account privileges are updated successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - rdbms
      x-codegen-request-body-name: body
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/sessions:
    get:
      description: list sessions in cluster
      summary: List cluster sessions
      operationId: listSessions
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: all
          in: query
          description: whether list all session includes sleep
          default: true
          schema:
            type: boolean
      responses:
        '200':
          description: list all session success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DmsSessionList'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - session
        - rdbms
  /admin/v1/data/{engineName}/organizations/{orgName}/clusters/{clusterName}/sessions/{session}:
    delete:
      description: kill a session in cluster
      summary: Kill cluster session
      operationId: killSession
      parameters:
        - description: name of the engine
          in: path
          name: engineName
          required: true
          schema:
            type: string
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: session id
          in: path
          name: session
          required: true
          schema:
            type: string
        - description: if keep is true, the session will not be killed but only closed
          in: query
          name: keep
          schema:
            type: boolean
      responses:
        '204':
          content: {}
          description: Returned when session is killed successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - session
        - rdbms
  /admin/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/accounts:
    get:
      description: list accounts in mongodb
      summary: List mongodb accounts
      operationId: listMongoDBAccounts
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountList'
          description: Success
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
      x-codegen-request-body-name: body
    post:
      description: create an account in mongodb
      summary: Create mongodb account
      operationId: createMongoDBAccount
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/account'
        required: true
      responses:
        '201':
          description: create redis account success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
      x-codegen-request-body-name: body
  /admin/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/accounts/{accountName}:
    delete:
      description: delete an account in mongodb
      summary: Delete mongodb account
      operationId: deleteMongoDBAccount
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: accountName
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Returned when project is deleted successfully.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - account
        - mongodb
  /admin/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/databases:
    get:
      summary: list databases for mongodb
      operationId: listDatabasesInMongoDB
      tags:
        - mongodb
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: datasource id
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success list databases
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/databases/{database}/collections:
    get:
      tags:
        - mongodb
      summary: List collections in mongodb
      operationId: ListCollectionsInMongoDB
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: the id of datasource
          required: true
          schema:
            type: string
        - name: database
          in: path
          description: the name of database
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success list collections
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/data/mongodb/organizations/{orgName}/clusters/{clusterName}/datasource/{id}/databases/{database}/collections/{collection}/documents:
    get:
      tags:
        - mongodb
      summary: List documents in mongodb
      operationId: ListDocumentsInMongoDB
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: the id of datasource
          required: true
          schema:
            type: string
        - name: database
          in: path
          description: the name of database
          required: true
          schema:
            type: string
        - name: collection
          in: path
          description: the name of collection
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: page
          schema:
            type: integer
        - name: size
          in: query
          required: true
          description: page size
          schema:
            type: integer
        - name: filter
          in: query
          required: false
          description: filter
          schema:
            type: string
      responses:
        '200':
          description: success list documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /admin/v1/environments/optional-modules:
    get:
      operationId: getOptionalEnvironmentModules
      summary: get option environment module info
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/environmentModuleList'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
      tags:
        - environment
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/services/{serviceName}/analyze:
    get:
      operationId: analyzeService
      summary: Analyze service
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: name of the Service
          in: path
          name: serviceName
          required: true
          schema:
            type: string
        - description: name of the Port
          in: query
          name: portName
          schema:
            type: string
        - description: endpoints to be analyzed
          in: query
          name: endpoints
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/error/analyze:
    get:
      description: Analyze error logs of a cluster
      summary: Analyze cluster error logs
      operationId: analyzeLogs
      deprecated: true
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
        - in: query
          name: componentName
          schema:
            type: string
        - in: query
          name: instanceName
          schema:
            type: string
        - in: query
          name: startTime
          required: true
          schema:
            type: string
        - in: query
          name: endTime
          required: true
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: string
        - in: query
          name: sortType
          schema:
            $ref: '#/components/schemas/sortType'
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/logs/slow/analyze:
    post:
      description: Analyze slow logs of a cluster
      summary: Analyze cluster slow logs
      operationId: analyzeSlowLogs
      deprecated: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterExecutionLog'
      parameters:
        - in: path
          name: orgName
          required: true
          schema:
            type: string
        - in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: Successful operation
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/paramTpls/{paramTplName}/analyze:
    get:
      deprecated: true
      description: analyze parameter, deprecated, instead use analyzeParameter
      operationId: analyzeParam
      summary: Analyze parameter
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: paramTplName
          required: true
          schema:
            type: string
        - description: the template partition in read paramTpl request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
        - description: the parameter item in paramTpl
          in: query
          name: parameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/params/analyze:
    get:
      deprecated: true
      description: analyze cluster parameter, deprecated, instead use analyzeClusterParameter
      operationId: analyzeClusterParam
      summary: Analyze cluster parameter
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: the parameter name in paramTpl
          in: query
          name: parameterName
          required: true
          schema:
            type: string
        - description: the parameter value of an item
          in: query
          name: parameterValue
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/parameterTemplate/{parameterTemplateName}/analyze:
    get:
      operationId: analyzeParameter
      summary: Analyze parameter
      deprecated: true
      parameters:
        - description: name of the Org
          in: query
          name: orgName
          required: false
          schema:
            type: string
        - description: name of the parameter template
          in: path
          name: parameterTemplateName
          required: true
          schema:
            type: string
        - description: the template partition in read parameter template request
          in: query
          name: partition
          schema:
            $ref: '#/components/schemas/paramTplPartition'
        - description: the parameter item in paramTpl
          in: query
          name: parameterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/parameter/analyze:
    get:
      operationId: analyzeClusterParameter
      summary: Analyze cluster parameter
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: the parameter name in paramTpl
          in: query
          name: parameterName
          required: true
          schema:
            type: string
        - description: the parameter value of an item
          in: query
          name: parameterValue
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/opsrequests/{opsName}/analyze:
    get:
      description: analyze a OpsRequest
      summary: Analyze OpsRequest
      operationId: analyzeOps
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the OpsRequest
          in: path
          name: opsName
          required: true
          schema:
            type: string
        - description: name of the Cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
        - description: type of the OpsRequest
          in: query
          name: opsType
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: Successful analysis
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/backups/{backupId}/analyze:
    get:
      operationId: analyzeBackup
      summary: Analyze backup
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: id of the Backup
          in: path
          name: backupId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
  /admin/v1/organizations/{orgName}/clusters/{clusterName}/restore/analyze:
    get:
      operationId: analyzeClusterRestore
      summary: Analyze cluster restore tasks
      deprecated: true
      parameters:
        - description: name of the Org
          in: path
          name: orgName
          required: true
          schema:
            type: string
        - description: name of the KubeBlocks cluster
          in: path
          name: clusterName
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/analysisResult'
          description: A successful response.
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
      tags:
        - analyze
components:
  securitySchemes:
    BearerToken:
      type: apiKey
      description: Bearer Token authentication
      name: authorization
      in: header
  schemas:
    phoneNumber:
      description: The phonenumber for the user.
      example: '+8618912345678'
      pattern: ^\+\d{1,3}\d{11}$
      type: string
    adminUser:
      description: Admin user info
      properties:
        userName:
          description: The name of the user, is unique
          type: string
        displayName:
          description: The display name of the user
          type: string
        email:
          description: The email for the user
          type: string
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        isDefaultPassword:
          description: return true if the default admin user need to reset password
          type: boolean
        id:
          description: The ID for the user
          type: string
      required:
        - userName
        - createdAt
        - updatedAt
        - displayName
    APIErrorResponse:
      description: API error response.
      properties:
        code:
          description: The HTTP status code.
          type: integer
        reason:
          description: The reason for the error.
          type: string
        message:
          description: The message for the error.
          type: string
      required:
        - code
      type: object
    adminUserUpdate:
      description: Admin user update
      properties:
        userName:
          description: The name of the user, is unique
          type: string
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        email:
          description: The email for the user
          type: string
          format: email
      required:
        - userName
        - email
      type: object
    apikeyCreate:
      description: APIKeyCreate is the payload for creating an APIKey
      properties:
        description:
          description: The description of the APIKey
          type: string
        expiredAt:
          description: The expired time of the APIKey
          type: string
          format: date-time
      required:
        - description
      type: object
    apikey:
      description: APIKey is the key for API access
      properties:
        accessKey:
          description: The name of the APIKey
          type: string
        description:
          description: The description for APIKey
          type: string
        expiredAt:
          description: The expired time of APIKey, return empty without setting duration
          type: string
          format: date-time
          x-nullable: true
        createAt:
          description: The create time of APIKey
          type: string
          format: date-time
      required:
        - accessKey
        - description
        - createAt
      type: object
    pageResult:
      description: PageResult info
      properties:
        first:
          description: a link to the first page of results. This link is optional for collections that cannot be indexed directly to a given page
          type: string
        last:
          description: a link to the last page of results. This link is optional for collections that cannot be indexed directly to a given page
          type: string
        next:
          description: a link to the next page of results. A response that does not contain a next link does not have further data to fetch
          type: string
        prev:
          description: a link to the previous page of results. A response that does not contain a prev link has no previous data. This link is optional for collections that cannot be traversed backward
          type: string
        totalSize:
          description: the total count of items in the list irrespective of pagination
          format: int64
          type: integer
      type: object
    apikeyList:
      description: APIKeys is a list of APIKey objects
      properties:
        items:
          description: Items is the list of APIKey objects in the list
          items:
            $ref: '#/components/schemas/apikey'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    apikeyWithSK:
      description: APIKeyWithSK is the response for creating an APIKey
      properties:
        accessKey:
          description: The accessKey of the APIKey
          type: string
        secretKey:
          description: The secretKey of the APIKey
          type: string
        description:
          description: The description of the APIKey
          type: string
        expiredAt:
          description: The expired time of APIKey
          type: string
          format: date-time
          x-nullable: true
        createAt:
          description: The create time of APIKey
          type: string
          format: date-time
      required:
        - accessKey
        - secretKey
        - description
        - createAt
      type: object
    adminUserList:
      description: Admin user list
      type: object
      properties:
        items:
          description: Items is the list of admin user objects in the list
          items:
            $ref: '#/components/schemas/adminUser'
          type: array
      required:
        - items
    adminUserCreate:
      description: Admin user create
      properties:
        userName:
          description: The name of the user, is unique
          type: string
        password:
          description: The password of the admin user
          type: string
        email:
          description: The email for the user
          type: string
          format: email
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
      required:
        - userName
        - password
        - email
      type: object
    adminUsersPassword:
      description: Admin user password
      properties:
        newPassword:
          description: The new password for the admin user.
          type: string
      required:
        - newPassword
      type: object
    aggregateMetaDataType:
      type: string
      description: The type of the aggregate meta data.
      enum:
        - organization
        - cluster
        - user
        - environment
    seriesItem:
      description: A data point in a series for meta data, including a count and a timestamp.
      type: object
      properties:
        value:
          type: number
          format: double
          description: The value of the series data point.
        timestamp:
          type: integer
          format: int64
          description: The timestamp representing the time of the data point, unit is seconds.
      required:
        - value
        - timestamp
      example:
        value: 100
        timestamp: 1711349576
    aggregateMetaData:
      type: object
      description: A series of data points for meta data, including a count and a timestamp.
      required:
        - total
        - items
      properties:
        total:
          type: integer
          description: The total count of the metaData items.
          example: 150
        items:
          type: array
          description: The list of series items aggregated in the time range.
          items:
            $ref: '#/components/schemas/seriesItem'
    environmentStats:
      type: object
      description: The cumulative statistics for all environments.
      properties:
        envTotal:
          type: integer
          format: int32
          description: The total number of environments.
        cpuTotal:
          type: number
          format: double
          description: The cumulative CPU capacity of all environments, typically measured in CPU units.
        memoryTotal:
          type: number
          format: double
          description: The cumulative memory capacity of all environments, typically measured in bytes or GiB.
        storageTotal:
          type: number
          format: double
          description: The cumulative storage capacity of all environments, typically measured in bytes or GiB.
      required:
        - envTotal
        - cpuTotal
        - memoryTotal
        - storageTotal
      example:
        envTotal: 3
        cpuTotal: 240
        memoryTotal: 1536
        storageTotal: 8192
    organizationItem:
      description: Organization items.
      type: object
      required:
        - name
        - displayName
        - creator
        - creatorID
        - clusterTotal
        - createdAt
      properties:
        name:
          type: string
          description: The name of the organization.
        displayName:
          type: string
          description: The display name of the organization.
        creator:
          type: string
          description: The display name of the creator of the organization.
        creatorID:
          type: string
          description: The ID of the creator of the organization
        clusterTotal:
          type: integer
          description: The total number of clusters in the organization.
        createdAt:
          type: string
          format: date-time
          description: The time the organization was created.
    organizationList:
      description: Organization list.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/organizationItem'
          description: The list of organizations.
    org:
      description: Org info
      properties:
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the organization
          type: string
        id:
          type: string
          description: The ID of the organization
        name:
          description: The full, unique name of this Object in the format organizations/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        enabled:
          description: return true if the organization is enabled
          type: boolean
      required:
        - createdAt
        - name
        - updatedAt
        - enabled
      type: object
    orgMember:
      description: Org Member info
      properties:
        displayName:
          description: The display name of User. Read-Only
          type: string
        email:
          description: The email of User. Required when create. Read-Only after create
          type: string
        role:
          description: The role of the User in the Org.
          type: string
        userId:
          description: The ID of User. Read-Only
          type: string
        freezed:
          description: Return true if the member is freezed in the organization
          type: boolean
      required:
        - email
        - role
        - userId
      type: object
    orgMemberList:
      description: OrgMemberList is org member list
      properties:
        items:
          description: Items is the list of OrgMember objects in the list
          items:
            $ref: '#/components/schemas/orgMember'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    orgParameter:
      description: org parameter item
      type: object
      required:
        - id
        - orgId
        - name
        - category
        - type
        - constraints
        - value
        - description
      properties:
        id:
          type: string
          description: org parameter id
        orgId:
          type: string
          description: org id
        name:
          type: string
          description: org parameter name
        category:
          type: string
          description: org parameter category
        type:
          type: string
          description: type of org parameter value
        constraints:
          type: object
          description: org parameter constraints including min, max, enum, default value
          properties:
            min:
              type: string
              description: org parameter min value
            max:
              type: string
              description: org parameter max value
            enum:
              type: array
              items:
                type: string
              description: org parameter enum constraints
            default:
              type: string
              description: org parameter default value
        description:
          type: string
          description: org parameter description
        value:
          type: string
          description: org parameter value
    orgParameterList:
      description: org parameter list
      type: array
      items:
        $ref: '#/components/schemas/orgParameter'
    permission:
      description: Permission information
      type: object
      properties:
        name:
          description: The name of the permission
          type: string
        group:
          description: The group of the permission
          type: string
        description:
          description: The description of the permission
          type: string
    permissionList:
      description: PermissionList is a list of Permissions
      properties:
        items:
          description: Items is the list of Permission objects in the list
          items:
            $ref: '#/components/schemas/permission'
          type: array
      required:
        - items
      type: object
    role:
      description: Role information
      type: object
      properties:
        name:
          description: The name of the role
          type: string
        type:
          description: The type of the role
          type: string
        description:
          description: The description of the role
          type: string
        createdAt:
          description: The time when the role was created. Read-Only
          format: date-time
          type: string
        updatedAt:
          description: The time when the role was updated. Read-Only
          format: date-time
          type: string
    roleList:
      description: RoleList is a list of Roles
      properties:
        items:
          description: Items is the list of Role objects in the list
          items:
            $ref: '#/components/schemas/role'
          type: array
      required:
        - items
      type: object
    invitationSender:
      description: InvitationSender is the User who send the Invitation
      properties:
        email:
          description: The email of the User
          type: string
          nullable: true
        id:
          description: The ID of the User
          type: string
          nullable: true
        name:
          description: The name of the User
          type: string
          nullable: true
      type: object
    invitation:
      description: Invitation info
      properties:
        createdAt:
          format: date-time
          type: string
          description: the created time of the invitation
        email:
          description: The email of the invitee
          type: string
        expireTime:
          description: Expire time of this invitation
          format: date-time
          type: string
        id:
          description: The ID for the invitation
          type: string
        lastEmailTime:
          description: Last email send time
          format: date-time
          type: string
        orgName:
          description: The name of the organization, for output only
          type: string
        roleName:
          description: The name of the role
          type: string
        sender:
          $ref: '#/components/schemas/invitationSender'
        token:
          description: '[internal, not for caller display] token of invitation, base64 encoded string including invitation and org ID'
          type: string
        updatedAt:
          format: date-time
          type: string
          description: the updated time of the invitation
      required:
        - email
        - expireTime
        - id
        - lastEmailTime
        - orgName
        - roleName
        - token
      type: object
    invitationList:
      description: InvitationList is a list of invitations
      properties:
        items:
          description: Items is the list of Invitation objects in the list
          items:
            $ref: '#/components/schemas/invitation'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    clusterType:
      title: ClusterType
      type: string
      nullable: true
      description: Describes the type of cluster, [Normal] normal cluster; [DisasterRecovery] disaster recovery cluster
      default: Normal
      enum:
        - Normal
        - DisasterRecovery
    clusterListItem:
      description: KubeBlocks cluster information
      properties:
        cloudProvider:
          description: Cloud Provider
          type: string
        cloudRegion:
          description: Cloud Provider
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        createdAt:
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        displayName:
          description: Display name of cluster.
          type: string
        engine:
          description: Cluster Application Engine
          type: string
        mode:
          description: Cluster topology mode
          type: string
        environmentName:
          description: Environment Name
          type: string
        environmentDisplayName:
          description: Environment Display Name
          type: string
        id:
          description: ID of cluster
          type: string
        name:
          description: Name of cluster. Name must be unique within an Org
          type: string
        parentId:
          title: ParentId
          type: integer
          format: int64
          nullable: true
          description: When two clusters have a relationship, parentId records the parent cluster id.Can be empty when there is no relationship
        parentName:
          title: ParentName
          type: string
          nullable: true
          description: the name of parent cluster
        parentDisplayName:
          title: ParentDisplayName
          type: string
          nullable: true
          description: the display name of parent cluster
        clusterType:
          $ref: '#/components/schemas/clusterType'
        delay:
          title: Delay
          type: number
          format: double
          nullable: true
        status:
          description: Cluster Status
          type: string
        terminationPolicy:
          description: Cluster termination policy
          type: string
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        version:
          description: Cluster Application Version
          type: string
        classCode:
          description: Cluster main component classCode
          type: string
        storage:
          description: Cluster main component storage
          type: string
        codeShort:
          description: Cluster main component codeShort
          type: string
        orgName:
          description: Org Name
          type: string
      required:
        - cloudProvider
        - createdAt
        - engine
        - environmentName
        - id
        - name
        - status
        - terminationPolicy
        - updatedAt
        - version
      type: object
    clusterList:
      description: ClusterList is a list of KubeBlocks clusters
      properties:
        items:
          description: Items is the list of KubeBlocks cluster objects in the list
          items:
            $ref: '#/components/schemas/clusterListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    environmentType:
      type: string
      description: Type of this environment
      enum:
        - public
        - private
    clusterLicense:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        expiredAt:
          type: string
          format: date-time
        key:
          type: string
          format: binary
    paramTplPartition:
      enum:
        - default
        - custom
      type: string
    paramTplsItem:
      description: the item of the parameter template
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        paramTplName:
          title: Parameter Template Name
          type: string
          description: name of assigned parameter template
        paramTplID:
          type: string
          description: id of parameter template
        paramTplPartition:
          $ref: '#/components/schemas/paramTplPartition'
    paramTpls:
      type: array
      description: Items is the list of parameter template in the list
      items:
        $ref: '#/components/schemas/paramTplsItem'
    clusterTerminationPolicy:
      title: Termination Policy
      type: string
      description: The termination policy of cluster.
      default: Delete
      enum:
        - DoNotTerminate
        - Halt
        - Delete
        - WipeOut
    componentVolumeItem:
      description: ComponentVolumeItem is the information of a component volume
      type: object
      properties:
        name:
          type: string
          description: volume name
        storage:
          title: Storage(Gi)
          minimum: 1
          type: number
          description: Storage size, the unit is Gi.
          format: double
    componentItem:
      type: object
      description: ComponentItem is the information of a component
      properties:
        name:
          type: string
          description: component name
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        compNum:
          title: CompNum
          type: integer
          description: number of components
        replicas:
          title: Replicas
          type: integer
          description: The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.
        classCode:
          type: string
        classSeries:
          type: string
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
        storageClass:
          title: StorageClass
          type: string
          description: StorageClass name
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/componentVolumeItem'
        codeShort:
          description: Cluster main component codeShort
          type: string
        systemAccountSecretName:
          description: The name of the secret that contains the system account credentials
          type: string
    components:
      type: array
      description: Components is the list of components
      items:
        $ref: '#/components/schemas/componentItem'
    initOptionItem:
      description: InitOptionItem is the information of init option
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix'
        initParams:
          type: object
          additionalProperties:
            type: string
        specName:
          type: string
          description: config spec name
    initOptions:
      type: array
      description: InitOptions is the list of init option
      items:
        $ref: '#/components/schemas/initOptionItem'
    backupRetentionPolicy:
      type: string
      description: backup retention policy when cluster is deleted
      enum:
        - All
        - LastOne
        - WipeOut
    clusterBackup:
      description: clusterBackup is the payload for cluster backup
      properties:
        pitrEnabled:
          default: false
          description: PITREnabled or not
          type: boolean
        continuousBackupMethod:
          description: continuous backup method for pitr
          type: string
        autoBackup:
          default: false
          description: autoBackup or not
          type: boolean
        autoBackupMethod:
          description: name of the backup method
          type: string
        backupRepo:
          description: backupRepoName is the name of backupRepo and it is used to store the backup data
          type: string
        cronExpression:
          description: cronExpression specifies the cron expression
          type: string
        retentionPeriod:
          description: retentionPeriod specifies the retention period
          type: string
        retentionPolicy:
          $ref: '#/components/schemas/backupRetentionPolicy'
        snapshotVolumes:
          description: snapshotVolumes specifies whether to take snapshots of persistent volumes to back up
          type: boolean
          nullable: true
        incrementalBackupEnabled:
          description: specify whether to enable incremental backup
          default: false
          type: boolean
        incrementalCronExpression:
          description: the crop expression for incremental backup schedule
          type: string
      type: object
    networkMode:
      enum:
        - HostNetwork
        - NodePort
        - FixedPodIP
      type: string
    cluster:
      required:
        - engine
        - environmentName
        - name
      type: object
      properties:
        id:
          title: ID
          type: string
          description: Cluster ID
        parentId:
          title: ParentId
          type: integer
          format: int64
          nullable: true
          description: When two clusters have a relationship, parentId records the parent cluster id.Can be empty when there is no relationship
        parentName:
          title: ParentName
          type: string
          nullable: true
          description: the name of parent cluster
        parentDisplayName:
          title: ParentDisplayName
          type: string
          nullable: true
          description: the display name of parent cluster
        clusterType:
          $ref: '#/components/schemas/clusterType'
        delay:
          title: Delay
          type: number
          format: double
          nullable: true
        orgName:
          title: Org Name
          type: string
          description: Org Name
        cloudProvider:
          title: Cloud Provider
          type: string
          description: Cloud Provider
        environmentId:
          title: Environment ID
          type: string
          description: ID of the environment
        environmentName:
          title: Environment Name
          type: string
          description: Environment Name
        environmentType:
          title: Environment Type
          type: string
          description: Environment Types
        cloudRegion:
          title: Cloud Region
          type: string
          description: Cloud Region
        project:
          title: Project
          type: string
          default: kubeblocks-cloud-ns
          description: Name of project, it is the alias of environment namespace
        name:
          title: Name
          type: string
          description: Name of cluster. Name must be unique within an Org
        hash:
          title: Hash
          type: string
          description: Hash of cluster. Name must be unique within an Org
        engine:
          title: Engine
          type: string
          description: Cluster Application Engine
        license:
          $ref: '#/components/schemas/clusterLicense'
        paramTpls:
          $ref: '#/components/schemas/paramTpls'
        version:
          title: Version
          type: string
          description: Cluster Application Version
        terminationPolicy:
          $ref: '#/components/schemas/clusterTerminationPolicy'
        tlsEnabled:
          title: TLS Enabled
          type: boolean
          description: Enable the cluster to provide TLS connection or not.
          default: false
        nodePortEnabled:
          title: NodePort service enabled
          type: boolean
          description: Enable the cluster to provide NodePort service or not.
          default: false
        status:
          title: Status
          type: string
          description: Cluster Status
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
        updatedAt:
          title: UpdatedAt
          type: string
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
        mode:
          title: Mode
          type: string
          description: Cluster topology mode
        proxyEnabled:
          title: ProxyEnabled
          type: boolean
          description: Proxy Enabled
          default: false
        components:
          $ref: '#/components/schemas/components'
        extra:
          title: Extra
          type: object
          additionalProperties:
            type: object
            properties: {}
          description: Extra configuration for cluster
        initOptions:
          $ref: '#/components/schemas/initOptions'
        tolerations:
          title: Tolerations
          type: string
          description: Tolerations of cluster
        singleZone:
          title: Single availability zones
          description: Use single availability zones
          type: boolean
          default: false
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        podAntiAffinityEnabled:
          title: PodAntiAffinityEnabled
          description: Enable pod antiaffinity for cluster
          type: boolean
          default: true
        backup:
          description: Set cluster backup
          $ref: '#/components/schemas/clusterBackup'
        nodeGroup:
          title: NodeGroup
          description: Specify a NodeGroup for the cluster
          type: string
          nullable: true
        codeShort:
          description: Cluster main component codeShort
          type: string
        displayName:
          description: Display name of cluster.
          type: string
        static:
          description: if cluster is static cluster
          type: boolean
        networkMode:
          description: Specify the network mode for intra-cluster communication
          $ref: '#/components/schemas/networkMode'
      description: KubeBlocks cluster information
    clusterUpdate:
      type: object
      properties:
        terminationPolicy:
          $ref: '#/components/schemas/clusterTerminationPolicy'
        displayName:
          description: Display name of cluster.
          type: string
          nullable: true
      description: ClusterUpdate is the payload to update a KubeBlocks cluster
    instanceStorageItem:
      description: Instance storage information
      properties:
        name:
          description: Specify the name of storage, which must be unique.
          title: name
          type: string
        size:
          description: Specify the size of storage, the unit is Gi.
          title: size
          type: string
        storageClass:
          description: The name of StorageClass in use
          type: string
      required:
        - name
        - size
      type: object
    instance:
      description: Instance is the information of KubeBlocks cluster instances
      properties:
        accessMode:
          description: Access mode for instance
          type: string
        orgName:
          description: Org name
          type: string
        cloud:
          description: Cloud for instance
          type: string
        cluster:
          description: Cluster name
          type: string
        componentName:
          description: Component name
          type: string
        componentDef:
          description: ComponentDefinition name
          type: string
        component:
          description: component type, refer to componentDef and support NamePrefix
          type: string
        cpu:
          description: cpu with uint cores.
          type: string
        createdAt:
          description: created at
          type: string
        memory:
          description: Memory with uint Gi.
          type: string
        name:
          description: Instance name
          type: string
        node:
          description: node name
          type: string
        region:
          description: Region for instance
          type: string
        role:
          description: Role for instance
          type: string
        status:
          required:
            - phase
          type: object
          properties:
            phase:
              type: string
              description: The current phase of the cluster
            reason:
              type: string
              description: A brief reason for the cluster's current phase
            message:
              type: string
              description: A human-readable message indicating details about the cluster's current phase
          description: Status for instance
        storage:
          description: storage sets the storage size value mapping key
          type: array
          items:
            $ref: '#/components/schemas/instanceStorageItem'
        zone:
          description: Available zone for instance
          type: string
      required:
        - accessMode
        - cloud
        - cluster
        - component
        - cpu
        - createdAt
        - memory
        - name
        - node
        - region
        - role
        - status
        - storage
        - zone
      type: object
    instanceList:
      description: ClusterList is a list of KubeBlocks clusters
      properties:
        items:
          description: Items is the list of KubeBlocks cluster objects in the list
          items:
            $ref: '#/components/schemas/instance'
          type: array
      required:
        - items
      type: object
    endpointType:
      description: Type of endpoint
      type: string
      enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - FixedPodIP
        - HostNetwork
    endpointNetworkType:
      description: Network type of endpoint
      type: string
      enum:
        - Internet
        - Intranet
    endpoint:
      description: Endpoint is the information of cluster endpoints
      properties:
        title:
          description: title of the endpoint
          type: string
        component:
          description: Component type name
          type: string
        hosts:
          description: Endpoint hosts
          type: array
          items:
            type: string
        port:
          description: Endpoint port
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/endpointType'
        networkType:
          $ref: '#/components/schemas/endpointNetworkType'
        serviceName:
          description: Service name of endpoint
          type: string
        portName:
          description: Port name of endpoint
          type: string
        instances:
          description: Endpoint backend instances
          type: array
          items:
            type: string
        mutable:
          description: Whether the endpoint is mutable
          type: boolean
      required:
        - title
        - component
        - hosts
        - port
        - type
        - networkType
        - serviceName
        - portName
        - mutable
      type: object
    endpointList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of endpoint objects in the list
          items:
            $ref: '#/components/schemas/endpoint'
    tag:
      description: tag info
      properties:
        id:
          description: The id of the tag
          format: int64
          type: string
        key:
          description: the key of the tag
          type: string
        value:
          description: The value corresponding to the key
          type: string
      required:
        - id
      type: object
    clusterTags:
      properties:
        clusterId:
          description: The cluster id corresponding to the tag
          type: string
        tags:
          items:
            $ref: '#/components/schemas/tag'
          type: array
      type: object
    tagUpdate:
      description: Tag update
      properties:
        key:
          description: The key of the tag
          type: string
        value:
          description: the value corresponding th the key
          type: string
        id:
          description: the id of the tag
          type: integer
          format: int64
      required:
        - key
        - value
        - id
      type: object
    orgTagsList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/tag'
          type: array
      required:
        - items
      type: object
    tagCreate:
      description: Tag create
      properties:
        clusterId:
          description: The cluster id corresponding to the tag
          type: string
        items:
          description: The key value pair of the tag needed to create
          items:
            properties:
              id:
                type: string
              key:
                type: string
              value:
                type: string
            required:
              - key
              - value
            type: object
          type: array
      required:
        - clusterId
        - items
      type: object
    accountListRoleType:
      description: The user role name, should be one of [ROOT, SUPERUSER, BASICUSER].
      enum:
        - SUPERUSER
        - BASICUSER
        - ROOT
      type: string
    privilegeType:
      title: privilegeType
      description: The type of privilege.
      type: string
      enum:
        - DBADMIN
        - READWRITE
        - READONLY
        - DDLONLY
        - DMLONLY
    privilegeListItem:
      type: object
      description: Database and its assigned privileges.
      properties:
        databaseName:
          title: databaseName
          type: string
          description: The name of the database.
        privileges:
          $ref: '#/components/schemas/privilegeType'
      required:
        - privileges
    privilegeList:
      type: array
      items:
        $ref: '#/components/schemas/privilegeListItem'
      description: A list of privileges and their databases.
    accountListItem:
      description: Cluster account information.
      properties:
        component:
          description: Component type.
          type: string
        name:
          description: The name of user.
          type: string
        password:
          description: The password of user.
          type: string
        role:
          $ref: '#/components/schemas/accountListRoleType'
        privilegesList:
          description: privileges of databases of cluster
          title: privilegesList
          $ref: '#/components/schemas/privilegeList'
      required:
        - name
      type: object
    accountList:
      items:
        $ref: '#/components/schemas/accountListItem'
      type: array
    accountRoleType:
      default: SUPERUSER
      description: Role name should be one of [BASICUSER, SUPERUSER, ROOT].
      enum:
        - SUPERUSER
        - BASICUSER
        - ROOT
      title: role
      type: string
    account:
      description: Cluster account information
      properties:
        privilegesList:
          description: privileges of databases of cluster
          title: privilegesList
          $ref: '#/components/schemas/privilegeList'
        component:
          description: Specify the name of component to be connected. If not specified, pick the first one.
          title: component
          type: string
        instance:
          description: Specify the name of instance to be connected.
          title: instance
          type: string
        name:
          description: Specify the name of user, which must be unique.
          title: name
          type: string
        password:
          description: Specify the password of user. The default value is empty, which means a random password will be generated.
          title: password
          type: string
        role:
          $ref: '#/components/schemas/accountRoleType'
      required:
        - name
        - role
      type: object
    databaseItem:
      description: Cluster database information
      properties:
        name:
          description: Specify the name of database, which must be unique.
          title: name
          type: string
      required:
        - name
      type: object
    databaseList:
      description: DatabaesList is a list of Databaes
      properties:
        items:
          description: Items is the list of Databases objects in the list
          items:
            $ref: '#/components/schemas/databaseItem'
          type: array
      required:
        - items
      type: object
    database:
      description: Cluster database information
      properties:
        component:
          description: component type
          title: component
          type: string
        name:
          description: Specify the name of database, which must be unique.
          title: name
          type: string
        accountName:
          description: Specify account name who can manage this database
          title: owner
          type: string
        charset:
          description: Specify charsetName of database.
          title: charsetName
          type: string
        description:
          description: Description of the database.
          title: description
          type: string
      required:
        - name
      type: object
    autohealingList:
      description: An Autohealing object in k8s
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          componentName:
            description: component to be rebuilt
            type: string
          podName:
            description: pod to be rebuilt
            type: string
          startTime:
            description: rebuild start time
            type: string
            format: date-time
          phase:
            description: current phase of rebuild job
            type: string
          started:
            description: whether the job is started
            type: boolean
          startMessage:
            type: string
          finished:
            description: whether the job is finished
            type: boolean
          finishMessage:
            type: string
          backupName:
            type: string
          rebuildInstanceOpsRequestName:
            type: string
    metricsQueryType:
      type: string
      enum:
        - instant
        - range
    clusterMetrics:
      type: object
      description: Cluster metrics
      properties:
        value:
          type: array
          items: {}
          nullable: true
        values:
          type: array
          items:
            type: array
            items: {}
            nullable: true
    instanceDiskUsageItem:
      description: disk usage with volume name.
      properties:
        volumeName:
          description: volume name
          type: string
        diskUsage:
          description: disk usage with unit Gi
          type: string
      required:
        - volumeName
        - diskUsage
      type: object
    instanceMetrics:
      description: instance metrics
      properties:
        instanceName:
          description: the name of the instance
          type: string
        cpuUsage:
          description: cpu with uint cores.
          type: string
          nullable: true
        memoryUsage:
          description: memory with uint Gi.
          type: string
          nullable: true
        diskUsageItems:
          description: disk usage items
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/instanceDiskUsageItem'
      required:
        - instanceName
      type: object
    instanceMetricsList:
      description: instance metrics list
      properties:
        items:
          description: instanceMetrics list
          type: array
          items:
            $ref: '#/components/schemas/instanceMetrics'
      required:
        - items
      type: object
    tlsConfig:
      description: Configuration for TLS including all certificates and keys
      type: object
      properties:
        caCert:
          description: CA Certificate
          type: string
        clientCert:
          description: Client Side Certificate
          type: string
        clientKey:
          description: Client Side key
          type: string
        keystore:
          description: Keystore in PEM format
          type: string
        truststore:
          description: Truststore in PEM format
          type: string
    tlsCert:
      properties:
        tlsConfig:
          $ref: '#/components/schemas/tlsConfig'
        componentName:
          description: Component these certs belong to
          type: string
        expirationDaysCA:
          description: Expiration days of CA certificate
          type: integer
          format: int32
        expirationDaysClient:
          description: Expiration days of client certificate
          type: integer
          format: int32
        expirationDaysKeystore:
          description: Expiration days of Keystore certificate
          type: integer
          format: int32
        expirationDaysTruststore:
          description: Expiration days of Truststore certificate
          type: integer
          format: int32
      type: object
    tlsCertList:
      items:
        $ref: '#/components/schemas/tlsCert'
      type: array
    tlsRequest:
      properties:
        enable:
          description: Enable TLS or not
          type: boolean
      type: object
    ipWhitelist:
      description: whitelist
      properties:
        id:
          description: ID of the whitelist
          title: ID
          type: string
        name:
          description: Name of the whitelist
          title: Name
          type: string
        description:
          description: Description
          title: Description
          type: string
        addresses:
          items:
            type: string
          description: Whitelist IP Addresses
          title: Addresses
          type: array
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - id
        - name
        - addresses
      type: object
    ipWhitelistList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          x-nullable: false
          description: Items is the list of whitelist objects in the Cluster
          items:
            $ref: '#/components/schemas/ipWhitelist'
    haHistoryResponse:
      description: hahistory is the payload to get ha history of a KubeBlocks cluster
      properties:
        componentName:
          type: string
        records:
          items:
            properties:
              StartAt:
                type: integer
              EndAt:
                type: integer
              OldPrimary:
                type: string
              NewPrimary:
                type: string
              Reason:
                type: string
              UserID:
                type: string
              UserName:
                type: string
            required:
              - StartAt
          type: array
      type: object
    eventResourceType:
      description: Type of the resource
      type: string
      enum:
        - cluster
        - role
    eventResultStatus:
      description: result status of the operation event
      enum:
        - success
        - failed
      type: string
    eventSource:
      description: event source
      enum:
        - user
        - system
      type: string
    event:
      description: event is the information of operation event
      properties:
        id:
          description: ID of the event
          type: string
        resourceId:
          description: ID of the resource
          type: string
        resourceType:
          $ref: '#/components/schemas/eventResourceType'
        resourceName:
          description: Name of the resource
          type: string
        operator:
          description: operator of the event, if source is user, operator is user name; if source is system, operator is system name
          type: string
        operatorId:
          description: The user ID of the operator
          type: string
        details:
          description: Details will include the extra event info, such as update cluster which field, OpsRequest content etc
          type: string
        hasTask:
          description: hasTask is true if the event has a task
          type: boolean
        result:
          description: result of the operation event
          type: string
        eventName:
          description: Event name is OpsRequest name or cluster operation name
          type: string
        displayName:
          description: Display name is custom operation name
          type: string
        resultStatus:
          $ref: '#/components/schemas/eventResultStatus'
        source:
          $ref: '#/components/schemas/eventSource'
        end:
          description: event end time
          format: date-time
          type: string
        start:
          description: event start time
          format: date-time
          type: string
        createdAt:
          description: event created time
          format: date-time
          type: string
      type: object
    paginationResult:
      description: Pagination information
      properties:
        page:
          description: Current page number (1-based)
          type: integer
          minimum: 1
        pageSize:
          description: Number of records per page
          type: integer
          minimum: 1
        total:
          description: Total number of records
          type: integer
          minimum: 0
      required:
        - page
        - pageSize
        - total
      type: object
    eventList:
      description: EventList is a list of operation event objects
      properties:
        items:
          description: Items is the list of operation event objects in the list
          items:
            $ref: '#/components/schemas/event'
          type: array
        pagination:
          $ref: '#/components/schemas/paginationResult'
      required:
        - items
      type: object
    parameterSpec:
      description: Cluster parameter specification
      type: object
      required:
        - name
        - description
        - type
        - default
        - needRestart
        - immutable
        - maximum
        - minimum
        - enum
      properties:
        name:
          description: The name of the parameter
          type: string
        description:
          description: The description of the parameter
          type: string
        type:
          description: The type of the parameter value
          type: string
        default:
          description: The default value of the parameter
          type: object
          additionalProperties: true
        needRestart:
          description: Whether the parameter requires a restart to take effect
          type: boolean
        immutable:
          description: Whether the parameter is an immutable parameter, immutable parameters cannot be modified
          type: boolean
        maximum:
          description: The maximum value of the parameter
          format: double
          type: number
        minimum:
          description: The minimum value of the parameter
          format: double
          type: number
        enum:
          description: The value options of the parameter
          type: array
          items:
            type: object
            additionalProperties: true
    parameterSpecListItem:
      type: object
      description: With the list of parameterSpecs and the configuration file name
      properties:
        specs:
          type: array
          items:
            $ref: '#/components/schemas/parameterSpec'
        fileName:
          description: The name of the configuration file
          type: string
    parameterSpecList:
      description: A list of cluster parameterSpecs
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/parameterSpecListItem'
    configuration:
      description: Cluster parameters configuration, include the file name and content of the parameters
      type: object
      required:
        - fileName
        - content
      properties:
        fileName:
          description: The name of the configuration file
          type: string
        content:
          description: The content of the configuration file
          type: string
        regex:
          description: The regular expression of the configuration file
          type: string
    configurationList:
      description: A list of cluster parameters configuration
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/configuration'
    paramTplListItem:
      description: parameter template information
      properties:
        orgName:
          description: Name of the organization
          type: string
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        description:
          description: Description of parameter template
          type: string
        family:
          description: 'Name of database with its version, eg: mysql8.0'
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          type: string
        partition:
          description: the template partition in listParamTpl request
          type: string
        paramTplID:
          type: string
          description: id of parameter template
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - description
        - paramTplID
        - family
        - name
        - partition
      type: object
    paramTplList:
      description: paramTplList is a list of parameter templates
      properties:
        items:
          description: Items is the list of parameter templates objects in the list
          items:
            $ref: '#/components/schemas/paramTplListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    paramTplCreate:
      description: parameter template create
      properties:
        description:
          description: Description of parameter template
          maxLength: 128
          minLength: 3
          type: string
        family:
          description: 'Name of database with its version, eg: mysql8.0'
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          maxLength: 64
          minLength: 3
          pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
          type: string
        customName:
          description: Name of custom parameter template. When set customName, will create a copy of this custom parameter template.
          type: string
        oriPartition:
          $ref: '#/components/schemas/paramTplPartition'
        isPrivate:
          description: Determines whether the user can see this parameter template
          type: boolean
      required:
        - description
        - family
        - name
      type: object
    configurationWithRegex:
      description: Cluster parameters configuration, include the file name and content of the parameters
      type: object
      required:
        - regex
        - fileName
        - content
      properties:
        fileName:
          description: The name of the configuration file
          type: string
        content:
          description: The content of the configuration file
          type: string
        regex:
          description: the template regex
          type: string
    paramTplGetItem:
      type: object
      description: paramTplGetItem is a list of get parameter template and parameterSpec
      properties:
        specName:
          description: The name of the configuration spec
          type: string
        config:
          $ref: '#/components/schemas/configurationWithRegex'
        parameterSpec:
          $ref: '#/components/schemas/parameterSpecListItem'
      required:
        - specName
        - config
        - parameterSpec
    paramTplGet:
      description: paramTplGet is the response of get parameter template request
      properties:
        family:
          type: string
          description: family of parameter template
        items:
          type: array
          items:
            $ref: '#/components/schemas/paramTplGetItem'
    paramTplUpdate:
      description: paramTplUpdate is the payload to update a parameter template
      properties:
        specName:
          description: Specify parameters belongs to which spec
          type: string
        configFile:
          description: Specify parameters belongs to which config file
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Specify parameters list to be updated
          type: object
        newParamTplName:
          description: Specify the new name of the parameter template
          type: string
      type: object
    paramTplApplyToClusterListItem:
      description: parameter template applicable to the cluster information
      properties:
        count:
          description: The number of parameters in the parameter template
          type: integer
        name:
          description: Name of parameter template. Name must be unique within an Org
          type: string
        id:
          description: id of parameter template
          type: string
        needRestart:
          description: 'whether to restart after applying this parameter template or not '
          type: boolean
        partition:
          description: the template partition
          type: string
      required:
        - count
        - needRestart
        - name
        - partition
      type: object
    paramTplApplyToClusterList:
      description: paramTplAPPLToClusterList is a list of parameter templates applicable to the cluster
      properties:
        items:
          description: Items is the list of parameter templates applicable to the cluster objects in the list
          items:
            $ref: '#/components/schemas/paramTplApplyToClusterListItem'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    paramTplCreateFromCluster:
      description: parameter template create
      properties:
        description:
          description: Description of parameter template
          maxLength: 128
          minLength: 3
          type: string
        name:
          description: Name of parameter template. Name must be unique within an Org
          maxLength: 64
          minLength: 3
          pattern: ^[a-z]([-a-z0-9]*[a-z0-9])?$
          type: string
        component:
          description: component type.
          type: string
        engineVersion:
          description: database engine Version
          type: string
      required:
        - description
        - name
      type: object
    parameterProp:
      type: object
      required:
        - name
        - type
        - needRestart
        - immutable
      properties:
        name:
          description: The name of the parameter
          type: string
        description:
          description: The description of the parameter
          type: string
        type:
          description: The type of the parameter value
          type: string
        value:
          description: The value of the parameter, if parameter is not set in tpl, it's value equal to cue default value.
          type: object
        needRestart:
          description: Whether the parameter requires a restart to take effect
          type: boolean
        immutable:
          description: Whether the parameter is an immutable parameter, immutable parameters cannot be modified
          type: boolean
        maximum:
          description: The maximum value of the parameter
          format: double
          type: number
          nullable: true
        minimum:
          description: The minimum value of the parameter
          format: double
          type: number
          nullable: true
        enum:
          description: The value options of the parameter
          type: array
          items: {}
    parameterItem:
      type: object
      description: With the list of parameter properties and the configuration file name
      properties:
        props:
          type: array
          description: The list of parameters properties
          items:
            $ref: '#/components/schemas/parameterProp'
        fileName:
          description: The name of the configuration file
          type: string
        specName:
          description: The name of the config spec
          type: string
    parameterList:
      description: A list of cluster parameter
      properties:
        family:
          type: string
          description: family of parameter template
        items:
          type: array
          items:
            $ref: '#/components/schemas/parameterItem'
    parameterHistory:
      description: The history of a parameter
      type: object
      required:
        - parameterName
        - oldValue
        - newValue
        - updatedAt
      properties:
        parameterName:
          description: The name of the parameter
          type: string
        oldValue:
          description: The old value of the parameter
          type: string
        newValue:
          description: The new value of the parameter
          type: string
        updatedAt:
          description: The date and time the parameter was last updated
          format: date-time
          type: string
    parameterHistoryList:
      description: A list of parameter history
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/parameterHistory'
    datasource:
      required:
        - type
      type: object
      properties:
        id:
          type: string
          description: the id of datasource
        name:
          type: string
          description: the name of datasource
        type:
          type: string
          description: the database type
        options:
          additionalProperties:
            type: object
          type: object
    datasourceList:
      items:
        $ref: '#/components/schemas/datasource'
      type: array
    DmsQueryBaseRequest:
      type: object
      properties:
        database:
          type: string
          description: the database of the table or view
          default: ''
        query:
          type: string
          description: the sql string
        limit:
          type: integer
          description: return limited number of data
          default: 200
    DmsQueryRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/DmsQueryBaseRequest'
        - type: object
          properties:
            noRecord:
              type: boolean
              description: if noRecord is true, the query(s) will not be added to query history
              nullable: true
    DmsPagination:
      type: object
      properties:
        rows_count:
          type: integer
        page:
          type: integer
        pages_count:
          type: integer
        per_page:
          type: integer
    DmsRow:
      type: array
      items:
        type: object
    DmsResultStats:
      type: object
      properties:
        columns_count:
          type: integer
        rows_count:
          type: integer
        rows_affected:
          type: integer
        query_start_time:
          type: string
          format: date-time
        query_finish_time:
          type: string
          format: date-time
    DmsResult:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/DmsPagination'
        columns:
          type: array
          items:
            type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/DmsRow'
        stats:
          $ref: '#/components/schemas/DmsResultStats'
    DmsQueryResponse:
      type: object
      properties:
        data:
          type: array
          description: result set of query
          items:
            $ref: '#/components/schemas/DmsResult'
        errMessage:
          type: array
          description: error message set of query
          items:
            type: string
          nullable: true
    DmsExportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/DmsQueryBaseRequest'
        - type: object
          properties:
            format:
              type: string
              description: the file format for export data
    DmsImportRequest:
      description: the data of the import task
      type: object
      required:
        - fileType
        - tableName
        - database
      properties:
        firstLineColumn:
          type: boolean
          description: whether the first line of the file is column name
          default: true
        fieldsTerminalBy:
          type: string
          description: the delimiter of fields
          default: ','
        fieldNames:
          type: array
          description: the field names
          items:
            type: string
          nullable: true
        ignoreForeignKey:
          type: boolean
          description: whether ignore foreign key when import data or not
          default: false
        fileType:
          type: string
        file:
          type: string
          format: binary
          description: the data file, csv or other format
        tableName:
          type: string
          description: the target table name
        database:
          type: string
          description: the database of the specific table, required for the engine which don't need to specify database when create database, such as mysql
        skipNull:
          type: boolean
          description: whether skip the row which has null value when import data
          default: true
    DmsImportFormData:
      description: the data of the import task
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: the data file, csv or other format
    DmsTaskInfo:
      type: object
      properties:
        id:
          type: string
          description: task id
        datasource:
          type: string
          description: datasource id
        message:
          type: string
          description: if task failed, this will show why
          nullable: true
        status:
          type: string
          description: task status
        type:
          type: string
          description: task type
        updatedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    DmsTaskList:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/DmsTaskInfo'
    DmsSchemaList:
      type: array
      items:
        type: string
    DmsObject:
      type: object
      x-nullable: true
      properties:
        type:
          type: string
          description: Type is the type of db object, like 'Table', 'Views', 'Functions'
        count:
          type: integer
          format: int64
          description: Count is the number of each object
    DmsObjectList:
      type: array
      items:
        $ref: '#/components/schemas/DmsObject'
    DmsObjectNameList:
      type: array
      items:
        type: string
    DmsObjectResponse:
      type: object
      properties:
        data:
          type: object
          description: The data of the Object
          additionalProperties: true
        type:
          type: string
          description: The type of the Object
    DmsQueryHistory:
      type: object
      properties:
        sql:
          title: SQL
          type: string
          x-nullable: true
          description: executed sql statements
        errMassage:
          title: errMassage
          type: string
          x-nullable: true
          description: sql executed massage
        createdAt:
          title: time
          type: string
          format: date-time
          x-go-type: time.Time
          description: sql executed time
        duration:
          title: duration
          type: integer
          x-nullable: true
          description: sql executed duration
    DmsQueryHistoryList:
      type: array
      items:
        $ref: '#/components/schemas/DmsQueryHistory'
    DmsExplainRequest:
      type: object
      properties:
        query:
          type: string
          description: the sql string
        database:
          type: string
          description: the database for explaining the SQL
          default: ''
    DmsGenerateDdlOperationType:
      type: string
      description: operation type
      enum:
        - table
        - view
    DmsTableColumn:
      type: object
      properties:
        name:
          type: string
          description: The name of the column
        type:
          type: string
          description: The data type of the column
        length:
          type: integer
          description: The length of the column if applicable
          nullable: true
        scale:
          type: integer
          description: The number of decimal places for numeric columns
          nullable: true
        notNull:
          type: boolean
          description: Whether the column can be null
        default:
          type: string
          description: The default value for the column
          nullable: true
        comment:
          type: string
          description: A comment describing the column
          nullable: true
        autoIncrement:
          type: boolean
          description: Whether the column is auto-incremented
        seed:
          type: integer
          description: used for autoIncrement
          nullable: true
        increment:
          type: integer
          description: used for autoIncrement
          nullable: true
        unsigned:
          type: boolean
          description: Whether the column is unsigned
        onUpdateCurrentTimestamp:
          type: boolean
          description: Whether the column updates to the current timestamp on update
        hidden:
          type: boolean
          description: Whether the column is hidden
        generated:
          type: object
          description: Generated column information
          nullable: true
          properties:
            type:
              type: string
              description: The type of generation (e.g., VIRTUAL or STORED)
            expression:
              type: string
              description: The expression used to generate the column's value
    DmsTableIndex:
      type: object
      properties:
        name:
          type: string
          description: The name of the index
        type:
          type: string
          description: The type of the index (e.g., UNIQUE, FULLTEXT)
        columns:
          type: array
          items:
            type: string
          description: List of columns included in the index
        comment:
          type: string
          description: A comment describing the index
          nullable: true
        hidden:
          type: boolean
          description: Whether the index is hidden
        otherOptions:
          type: array
          items:
            type: string
          description: Other options for the index
          nullable: true
    DmsPrimaryKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the primary key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the primary key
    DmsForeignKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the foreign key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the foreign key
        reference:
          type: object
          description: The reference details of the foreign key
          properties:
            database:
              type: string
              description: The referenced database
            schema:
              type: string
              description: The referenced schema
            table:
              type: string
              description: The referenced table
            columns:
              type: array
              items:
                type: string
              description: The referenced columns
            matchType:
              type: string
              description: The match type for the foreign key (e.g., SIMPLE, FULL)
              nullable: true
        onUpdate:
          type: string
          description: The action on update (e.g., CASCADE, NO ACTION)
        onDelete:
          type: string
          description: The action on delete (e.g., CASCADE, NO ACTION)
    DmsUniqueKey:
      type: object
      properties:
        name:
          type: string
          description: The name of the unique key
          nullable: true
        columns:
          type: array
          items:
            type: string
          description: The list of columns that make up the unique key
        include:
          type: array
          items:
            type: string
          description: Additional columns included in the unique key
          nullable: true
    DmsCheckConstraint:
      type: object
      properties:
        name:
          type: string
          description: The name of the check constraint
        expression:
          type: string
          description: The expression for the check constraint
        enforced:
          type: boolean
          description: Whether the check constraint is enforced
    DmsExcludeConstraint:
      type: object
      properties:
        name:
          type: string
          description: The name of the exclude constraint
          nullable: true
        indexMethod:
          type: string
          description: The index method (e.g., GIST, BTREE)
        exclude:
          type: array
          items:
            type: object
            properties:
              columns:
                type: string
                description: The column(s) involved in the exclusion
              operator:
                type: string
                description: The operator used in the exclusion
    DmsTablePartitioning:
      type: object
      properties:
        statement:
          type: string
          description: The partitioning statement for the table
    DmsTableOptions:
      type: object
      properties:
        engine:
          type: string
          description: The storage engine for the table
        charset:
          type: string
          description: The character set for the table
        collation:
          type: string
          description: The collation for the table
        type:
          type: string
          description: The type of the table
        otherOptions:
          type: array
          items:
            type: string
          description: Other options for the table
          nullable: true
    DmsTableMetadata:
      type: object
      properties:
        name:
          type: string
          description: The name of the table
        schema:
          type: string
          description: The schema of the table
          nullable: true
        database:
          type: string
          description: The database where the table resides
          nullable: true
        comment:
          type: string
          description: A comment describing the table
          nullable: true
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DmsTableColumn'
          description: List of columns in the table
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/DmsTableIndex'
          description: List of indexes on the table
          nullable: true
        primaryKey:
          type: object
          description: The primary key of the table
          nullable: true
          $ref: '#/components/schemas/DmsPrimaryKey'
        foreignKeys:
          type: array
          items:
            $ref: '#/components/schemas/DmsForeignKey'
          description: List of foreign keys on the table
          nullable: true
        uniqueKeys:
          type: array
          items:
            $ref: '#/components/schemas/DmsUniqueKey'
          description: List of unique keys on the table
          nullable: true
        checkConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DmsCheckConstraint'
          description: List of check constraints on the table
          nullable: true
        excludeConstraints:
          type: array
          items:
            $ref: '#/components/schemas/DmsExcludeConstraint'
          description: List of exclude constraints on the table
          nullable: true
        partitioning:
          type: object
          $ref: '#/components/schemas/DmsTablePartitioning'
          description: The partitioning of the table
          nullable: true
        options:
          type: object
          $ref: '#/components/schemas/DmsTableOptions'
          description: The options for the table
          nullable: true
    DmsViewMetadata:
      type: object
      properties:
        viewName:
          type: string
          description: The name of the view
        database:
          type: string
          description: The database in which the view will be created
        replace:
          type: boolean
          description: Whether to replace the existing view if it exists
          nullable: true
        definer:
          type: string
          description: The definer of the view
          nullable: true
        sqlSecurity:
          type: string
          description: The SQL security context of the view (e.g., DEFINER or INVOKER)
          nullable: true
        checkOption:
          type: string
          description: The WITH CHECK OPTION clause (e.g., CASCADED or LOCAL)
          nullable: true
        algorithm:
          type: string
          description: The algorithm used for the view (e.g., UNDEFINED, MERGE, TEMPTABLE)
          nullable: true
        definition:
          type: string
          description: The SQL statement defining the view
          nullable: true
    DmsGenerateDDLRequest:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/DmsGenerateDdlOperationType'
        tableMetadata:
          $ref: '#/components/schemas/DmsTableMetadata'
        viewMetadata:
          $ref: '#/components/schemas/DmsViewMetadata'
    ShowDataRequest:
      type: object
      properties:
        database:
          type: string
          description: the database of the table or view
          default: ''
        table:
          type: string
          description: the target table or view name
        limit:
          type: integer
          description: return limited number of data
          nullable: true
    DmsSession:
      type: object
      required:
        - id
        - user
        - host
      properties:
        id:
          type: integer
          description: session ID
          format: int64
        user:
          type: string
          description: user name
        tenant:
          type: string
          description: tenant name
          nullable: true
        host:
          type: string
          description: client host information
        db:
          type: string
          description: database name
          nullable: true
        command:
          type: string
          description: current command
          nullable: true
        time:
          type: integer
          description: session duration time
          format: int64
          nullable: true
        state:
          type: string
          description: session state
          nullable: true
        info:
          type: string
          description: additional session information
          nullable: true
        ip:
          type: string
          description: server ip
          nullable: true
        port:
          type: integer
          description: server port
          format: int64
          nullable: true
    DmsSessionList:
      type: array
      items:
        $ref: '#/components/schemas/DmsSession'
    sortType:
      description: Represents the type of sorting.
      enum:
        - asc
        - desc
      type: string
    reconfigureCreate:
      description: ReconfigureCreate is the payload to reconfigure a KubeBlocks cluster
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        configFileName:
          description: config file name
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Specify parameters list to be updated
          type: object
      required:
        - parameters
        - component
      type: object
    opsRequestName:
      description: OpsRequestName is the name of a KubeBlocks OpsRequest
      properties:
        opsRequestName:
          type: string
        dependentOpsName:
          type: string
        clusterTaskId:
          type: string
        dependentClusterTaskId:
          type: string
      required:
        - opsRequestName
      type: object
    opsRestart:
      description: OpsRestart is the payload to restart a KubeBlocks cluster
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        preConditionDeadlineSeconds:
          description: Specifies the maximum time in seconds that the OpsRequest will wait for its pre-conditions to be met before it aborts the operation
          type: integer
          nullable: true
          minimum: 0
      type: object
    opsRebuildInstanceInstanceParam:
      description: instance params for RebuildInstance ops
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Pod name of the instance
        targetNodeName:
          type: string
          description: The instance will rebuild on the specified node. If not set, it will rebuild on a random node.
    opsRebuildInstance:
      description: rebuild the instances of the cluster.
      properties:
        ignoreRoleCheck:
          type: boolean
          description: will ignore role check during rebuilding instance.
        requests:
          items:
            properties:
              backupName:
                type: string
              instances:
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/opsRebuildInstanceInstanceParam'
            required:
              - instances
          type: array
      type: object
    opsUpgrade:
      description: OpsUpgrade is the payload to upgrade a KubeBlocks cluster
      properties:
        version:
          type: string
          minLength: 1
        component:
          type: string
      required:
        - version
      type: object
    engineServiceVersions:
      type: object
      properties:
        component:
          type: string
          description: component type, refer to componentDef and support NamePrefix
        upgradeableVersions:
          type: array
          items:
            type: string
        versions:
          type: array
          items:
            type: object
            properties:
              default:
                type: boolean
              defaultMinorVersion:
                type: string
              majorVersion:
                type: string
              minorVersions:
                type: array
                items:
                  type: string
    opsVolumeExpand:
      description: OpsVolumeExpand is the payload to expand volume for a KubeBlocks cluster
      properties:
        component:
          type: string
          minLength: 1
        volumes:
          type: array
          minItems: 1
          items:
            type: object
            properties:
              name:
                type: string
                description: volume name
              storage:
                type: string
                description: Storage size, the unit is Gi.
            required:
              - name
              - storage
      required:
        - volumes
        - component
      type: object
    opsVScale:
      description: OpsVScale is the payload to vertically scale a KubeBlocks cluster
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        cpu:
          description: number of cpu
          type: string
        memory:
          description: memory size
          type: string
        classCode:
          description: class code of the cluster
          type: string
      type: object
    opsHScale:
      description: OpsHScale is the payload to horizontally scale a KubeBlocks cluster. It requires specifying either the number of replicas or the number of shards.
      required:
        - component
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        replicas:
          description: number of replicas
          type: integer
          nullable: true
        shards:
          description: number of shards, mutually exclusive with replicas.
          type: integer
          nullable: true
        preConditionDeadlineSeconds:
          description: Specifies the maximum time in seconds that the OpsRequest will wait for its pre-conditions to be met before it aborts the operation
          type: integer
          nullable: true
          minimum: 0
      type: object
    opsPromote:
      description: OpsPromote is the payload to promote a KubeBlocks cluster
      required:
        - componentName
      properties:
        componentName:
          type: string
          minLength: 1
        instanceName:
          type: string
      type: object
    opsExposeType:
      type: string
      description: Specifies the type of exposure for the KubeBlocks cluster.
      enum:
        - vpc
        - internet
    opsExposeVPCServiceType:
      description: Specifies the type of service for the KubeBlocks cluster.
      enum:
        - LoadBalancer
        - NodePort
      type: string
      default: LoadBalancer
    opsExpose:
      description: OpsExpose is the payload to expose a KubeBlocks cluster
      properties:
        component:
          type: string
          minLength: 1
        enable:
          type: boolean
        type:
          $ref: '#/components/schemas/opsExposeType'
        vpcServiceType:
          $ref: '#/components/schemas/opsExposeVPCServiceType'
        portsMapping:
          type: array
          items:
            type: object
            properties:
              old:
                type: integer
              new:
                type: integer
      required:
        - enable
        - type
        - component
      type: object
    opsLicense:
      description: OpsLicense is the payload to update a KubeBlocks cluster license
      required:
        - component
        - licenseId
      properties:
        component:
          description: component type
          type: string
          minLength: 1
        licenseId:
          description: license ID
          type: string
          minLength: 1
      type: object
    opsCustom:
      description: OpsCustom is the payload to create a custom KubeBlocks OpsRequest
      required:
        - opsType
        - compName
      properties:
        compName:
          description: component name
          type: string
          minLength: 1
        opsType:
          description: ops definition name.
          type: string
          minLength: 1
        dependentOnOps:
          description: ops definition name.
          items:
            type: string
          type: array
        params:
          description: custom ops parameters
          type: array
          items:
            x-go-type:
              type: Parameter
              import:
                package: github.com/apecloud/kubeblocks/apis/apps/v1alpha1
              hints:
                kind: interface
      type: object
    customOpsTask:
      description: customOpsTask is the information of custom ops task
      properties:
        objectKey:
          description: the pod name
          type: string
        namespace:
          description: namespace of the task
          type: string
        status:
          description: status of the task
          type: string
        targetPodName:
          description: target pod name of the task
          type: string
        retries:
          description: retries of the task
          type: integer
          format: int32
      type: object
    customOpsTasks:
      description: customOpsTasks is a list of custom ops task. This field is provided when ops is `custom`.
      properties:
        items:
          description: The list of custom ops task.
          items:
            $ref: '#/components/schemas/customOpsTask'
          type: array
      type: object
    clusterTaskProgress:
      description: clusterTaskProgress is the information of the task progress
      properties:
        name:
          description: conponent name
          type: string
        group:
          description: group name
          type: string
        objectKey:
          description: the instance name
          type: string
          nullable: true
        message:
          description: message of the task progress
          type: string
        status:
          description: status of the task progress
          type: string
        startTime:
          description: start time of the task progress
          format: date-time
          type: string
        endTime:
          description: end time of the task progress
          format: date-time
          type: string
          nullable: true
        customOpsName:
          description: Indicates the name of an OpsAction, Either `objectKey` or `customOpsName` must be provided. This field is provided when ops is `custom`.
          type: string
          nullable: true
        customOpsTasks:
          $ref: '#/components/schemas/customOpsTasks'
      type: object
    clusterTaskProgresses:
      description: clusterTaskProgresses is a list of task progress detail
      properties:
        items:
          description: Items is the list of task progress detail in the list
          items:
            $ref: '#/components/schemas/clusterTaskProgress'
          type: array
      type: object
    clusterTaskDetail:
      type: object
      description: taskCondition is the information of the task condition
      properties:
        reason:
          description: reason of the task condition
          type: string
        type:
          description: type of the task condition
          type: string
        status:
          description: status of the task condition
          type: string
        message:
          description: message of the task condition
          type: string
        lastTransitionTime:
          description: last transition time of the task condition
          format: date-time
          type: string
    clusterTaskDetails:
      description: taskConditions is a list of task condition
      properties:
        items:
          description: Items is the list of task condition in the list
          items:
            $ref: '#/components/schemas/clusterTaskDetail'
          type: array
      type: object
    clusterTask:
      type: object
      description: task is the information of the operation
      required:
        - name
        - namespace
        - status
        - taskType
        - progress
      properties:
        id:
          description: ID of the task
          type: string
        name:
          description: Name of the task
          type: string
        namespace:
          description: Namespace of the task
          type: string
        orgName:
          description: OrgName of the task
          type: string
        clusterName:
          description: ClusterName of the task
          type: string
        status:
          description: status of the task
          type: string
        taskType:
          description: task type
          type: string
        progress:
          description: progress of the task
          type: string
        taskProgresses:
          $ref: '#/components/schemas/clusterTaskProgresses'
        taskDetails:
          $ref: '#/components/schemas/clusterTaskDetails'
        opsLog:
          description: pod log of the custom task
          type: string
        description:
          description: description of the custom task
          type: string
        startTime:
          type: string
          format: date-time
          description: Time when the task started
        completionTime:
          type: string
          format: date-time
          description: Time when the task completed or failed
          nullable: true
    opsStatus:
      type: object
      x-go-name: OpsRequestStatus
      properties:
        Status:
          type: object
          x-go-type:
            type: OpsRequestStatus
            import:
              package: github.com/apecloud/kubeblocks/apis/apps/v1alpha1
            hints:
              kind: interface
        message:
          type: string
    listKubernetesNodeOpType:
      type: string
      description: operation for list nodes, either `in` or `notin`
      enum:
        - in
        - notin
    kubeconfig:
      type: object
      required:
        - kubeconfig
      properties:
        kubeconfig:
          description: The base64 encoded kubeconfig file contents to connect to this Kubernetes
          format: byte
          type: string
    resourceStats:
      description: ResourceStats holds the requests, limits, and available stats for a resource.
      properties:
        allocatable:
          description: The amount of CPU or Memory resources that are available on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        limits:
          description: The maximum number of CPU or Memory resources pods are allowed to use on the node.  Unit is GiB for memory and Cores for CPU
          format: double
          type: number
        requests:
          description: The number of CPU or Memory resources requested by pods running on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        usage:
          description: The amount of CPU or Memory resources that are already used on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
        capacity:
          description: The total amount of physical resources available on the node. Unit is GiB for memory and Cores for CPU.
          format: double
          type: number
      required:
        - usage
      type: object
    nodeStatus:
      type: string
      description: Status of the node
      enum:
        - Ready
        - Warning
        - UnderMaintenance
        - Unschedulable
    node:
      description: node info
      properties:
        cpu:
          description: CPU cores of the node
          format: int64
          type: integer
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        hostName:
          description: Host name of the node
          type: string
        instanceType:
          description: Instance type of the node
          type: string
        ip:
          description: IP address of the node
          type: string
        memory:
          description: Memory of the node, unit is GiB
          format: int64
          type: integer
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        zone:
          description: Zone of the node
          type: string
        region:
          description: Region of the node
          type: string
        nodeGroup:
          description: Node Group of the node
          type: string
        controlPlane:
          description: node is in control plane
          type: boolean
        dataPlane:
          description: node is in data plane
          type: boolean
        status:
          $ref: '#/components/schemas/nodeStatus'
          description: Node status
      required:
        - createdAt
        - hostName
        - ip
        - status
      type: object
    nodeList:
      description: nodeList is a list of nodes
      properties:
        items:
          description: Items is the list of Org objects in the list
          items:
            $ref: '#/components/schemas/node'
          type: array
      required:
        - items
      type: object
    storageVolumeStatsByNode:
      description: storageVolumeStatsByNode provides detailed information about storage volumes of nodes.
      properties:
        nodeName:
          description: the name of the node
          type: string
        nodeStatus:
          description: the status of the node
          type: string
        VolumeNum:
          description: the number of PVCs on the node
          type: string
        capacity:
          description: the sum of capacity of PVC on the node
          type: string
      type: object
    storageClassInfo:
      description: StorageClassInfo provides detailed information about a specific storage class.
      properties:
        name:
          type: string
          description: the name of the storage class
        creationTimestamp:
          type: string
          description: the creation time of the storage class
        provisioner:
          type: string
          description: the provisioner of the storage class
        parameters:
          type: object
          additionalProperties:
            type: string
          description: the parameters of the storage class
        labels:
          type: object
          additionalProperties:
            type: string
          description: the labels of the storage class
        annotations:
          type: object
          description: the annotations of the storage class
          additionalProperties:
            type: string
        reclaimPolicy:
          type: string
          description: the reclaim policy of the storage class
        allowVolumeExpansion:
          type: boolean
          description: whether allow volume expansion
        volumeBindingMode:
          type: string
          description: the volume binding mode of the storage class
        pvcCount:
          type: string
          description: the number of PVCs
        allowClone:
          type: boolean
          description: whether allow clone
        allowSnapshot:
          type: boolean
          description: whether allow snapshot
        isDefaultClass:
          type: boolean
          description: whether is default class
        type:
          type: string
          description: the type of the storage class
        hostPath:
          description: the host path when using local storage provisioner
          type: string
        mountOptions:
          type: array
          items:
            type: string
          description: the mount options of the storage class
        createdAt:
          nullable: true
          type: string
          format: date-time
          description: the creation time of the storage class
        description:
          type: string
          description: the description of the storage class
        displayName:
          type: string
          description: the display name of the storage class
        enabled:
          type: boolean
          description: whether the storage class is enabled
        id:
          type: string
          description: the id of the storage class
        updatedAt:
          nullable: true
          type: string
          format: date-time
          description: the update time of the storage class
        statsByNodeList:
          description: the List stands for stats for the storage volumes of nodes.
          properties:
            items:
              description: the list of storage volumes stats by node
              type: array
              items:
                $ref: '#/components/schemas/storageVolumeStatsByNode'
          required:
            - items
          type: object
      required:
        - name
        - creationTimestamp
        - provisioner
        - reclaimPolicy
        - allowVolumeExpansion
        - volumeBindingMode
        - pvcCount
        - allowClone
        - allowSnapshot
        - isDefaultClass
        - type
        - description
        - displayName
        - enabled
        - id
      type: object
    storageClassList:
      description: StorageClassList stands for stats for storage classes.
      properties:
        items:
          description: the list of storage classes
          type: array
          items:
            $ref: '#/components/schemas/storageClassInfo'
      type: object
    tolerateDefaultTaints:
      title: TolerateDefaultTaints
      description: When creating a cluster, add the default tolerations from the bootstrap node to the pods
      type: object
      properties:
        enabled:
          type: boolean
        taints:
          type: array
          items:
            type: string
    schedulingConfig:
      type: object
      title: SchedulingConfig
      description: Configuration of resource scheduling for this environment
      properties:
        podAntiAffinityEnabled:
          title: PodAntiAffinityEnabled
          description: Enable pod antiaffinity for cluster
          type: boolean
          default: true
        tolerateDefaultTaints:
          $ref: '#/components/schemas/tolerateDefaultTaints'
    networkConfig:
      type: object
      title: NetworkConfig
      description: Configuration of networking for this environment
      properties:
        nodePortEnabled:
          description: Enable node port service for this environment
          type: boolean
          default: true
        lbEnabled:
          description: Enable load balancer service for this environment
          type: boolean
          default: true
        internetLBEnabled:
          description: Enable the Internet load balancer service for this environment
          type: boolean
          default: true
        networkModes:
          type: array
          items:
            $ref: '#/components/schemas/networkMode'
          description: Network modes of the environment
    environmentState:
      type: string
      description: Output only. State of the Environment resource
      enum:
        - PENDING
        - REGISTERED
        - PROVISIONING
        - NOTREADY
        - READY
        - WARNING
        - UNREACHABLE
        - DELETING
        - OUTOFSTOCK
        - UPDATING
    environmentRegisterType:
      type: string
      description: Configuration for privisoining environment resources
      enum:
        - kubeconfig
        - iac
        - connect-agent
    iac:
      type: object
      description: Create environment by IaC
      required:
        - role
      properties:
        role:
          type: string
          description: Role used to do AssumeRole action
          example: arn:aws:iam::999999999999:role/RoleName
        desiredNodeSize:
          type: integer
          description: Desired node size
        instanceType:
          type: string
          description: Computing instance type
          example: t3a.medium
    register:
      type: object
      description: Register manifest for environment
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/environmentRegisterType'
        iac:
          $ref: '#/components/schemas/iac'
        kubeconfig:
          description: The base64 encoded kubeconfig file contents to connect to this environment
          format: byte
          type: string
    component:
      type: object
      description: Component info in environment
      required:
        - defaultStorageClass
      properties:
        kubernetesVersion:
          type: string
          description: Kubernetes version of the environment
        kbVersion:
          type: string
          description: KubeBlocks version of the environment
        geminiVersion:
          type: string
          description: Gemini version of the environment
        oteldVersion:
          type: string
          description: Oteld version of the environment
        imageRegistry:
          type: string
          description: Image registry used by the environment
        defaultStorageClass:
          description: Default storage class that used by KubeBlocks to create cluster
          type: string
        cpuOvercommitRatio:
          description: CPU overcommit ratio of this environment
          type: number
          format: double
        memoryOvercommitRatio:
          description: Memory overcommit ratio of this environment
          type: number
          format: double
        namespaces:
          items:
            type: string
          default:
            - kubeblocks-cloud-ns
          type: array
          description: Namespace info for environment
    nodePoolNode:
      title: NodePoolNode
      description: Node info for environment
      type: object
      required:
        - name
        - availabilityZone
      properties:
        name:
          type: string
        availabilityZone:
          type: string
        markControlPlane:
          type: boolean
          default: false
        markDataPlane:
          description: Mark the node as a data plane, which will always be true when markControlPlane is not specified
          type: boolean
          default: true
    nodePool:
      title: NodePool
      description: Create your node plan, and the selected nodes will be used for pod scheduling
      type: array
      items:
        $ref: '#/components/schemas/nodePoolNode'
      minItems: 1
    environmentStorageType:
      description: the storage type
      type: string
      enum:
        - remote
        - local
    storageCreate:
      description: storageCreate is the schema for the storage create request
      type: object
      properties:
        name:
          type: string
          description: Name of the storage
        storageProvider:
          type: string
          description: Name of the storage provider
        params:
          type: object
          description: the parameters to create the storage
          additionalProperties:
            type: string
        clusterID:
          type: string
          description: the id of cluster that storage used
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
    staticCluster:
      properties:
        replicas:
          title: Replicas
          type: integer
          description: the number of replicas
        storage:
          title: Storage(Gi)
          minimum: 1
          type: number
          description: Storage size, the unit is Gi.
          format: double
        classCode:
          type: string
    environmentStorage:
      type: object
      description: Storage config
      properties:
        name:
          description: the storage name
          type: string
        type:
          $ref: '#/components/schemas/environmentStorageType'
        reusedClusterName:
          description: the existed cluster name for creating storage
          type: string
        reusedClusterNamespace:
          description: the existed cluster namespace for creating storage
          type: string
        config:
          $ref: '#/components/schemas/storageCreate'
        cluster:
          $ref: '#/components/schemas/staticCluster'
    storageConfig:
      type: object
      description: Storage config for environment
      required:
        - log
        - backup
        - storages
      properties:
        storages:
          type: array
          description: these storages will be created
          items:
            $ref: '#/components/schemas/environmentStorage'
        log:
          type: object
          description: the storage config for log
          required:
            - storageName
          properties:
            storageName:
              type: string
              description: the name of storage
        backup:
          type: object
          description: the storage config for backup
          required:
            - storageName
            - backupRepoName
            - defaultBackupRepo
          properties:
            storageName:
              type: string
              description: the name of storage
            backupRepoName:
              type: string
              description: the backup repo name which will be init
            defaultBackupRepo:
              type: boolean
              description: judge whether to set the backup is default which will be init
    environmentModuleStatus:
      type: string
      description: Status of environment module
      enum:
        - Running
        - Updating
        - Error
        - Disabled
        - Enabled
    hostingStatus:
      type: string
      description: Hosting status (Hostable, Non-hostable, Hosted). When hosting_status is Hosted, cluster_info will be returned
      enum:
        - Hostable
        - Non-hostable
        - Hosted
    clusterInfo:
      type: object
      description: Cluster information
      properties:
        clusterName:
          type: string
          description: The name of the cluster
        clusterDefinition:
          type: string
          description: The definition of the cluster
        orgName:
          type: string
          description: The organization name
    localizedDescription:
      type: object
      required:
        - zh-CN
        - en-US
      properties:
        zh-CN:
          type: string
        en-US:
          type: string
    environmentModule:
      type: object
      description: Single environment module information
      properties:
        name:
          type: string
          description: Environment module name
        version:
          type: string
          description: Environment module version
        status:
          $ref: '#/components/schemas/environmentModuleStatus'
        hostingStatus:
          $ref: '#/components/schemas/hostingStatus'
        replicas:
          type: integer
          description: Number of replicas
        location:
          type: string
          description: Deployment location
        clusterInfo:
          $ref: '#/components/schemas/clusterInfo'
          description: Cluster information, only returned when hosting_status is Hosted
        description:
          $ref: '#/components/schemas/localizedDescription'
        optional:
          type: boolean
          description: indicate module is optional
      required:
        - name
        - status
    provisionConfig:
      title: ProvisionConfig
      description: Configuration to provision infrastructure for this environment
      type: object
      required:
        - register
        - component
      properties:
        register:
          $ref: '#/components/schemas/register'
        component:
          $ref: '#/components/schemas/component'
        nodePool:
          $ref: '#/components/schemas/nodePool'
        storage:
          $ref: '#/components/schemas/storageConfig'
        modules:
          type: array
          description: option modules of environment
          items:
            $ref: '#/components/schemas/environmentModule'
    autohealingConfig:
      type: object
      description: cluster instance autohealing process config
      required:
        - enableAutoHealing
        - rebuildStartDelaySecondsWhenNodeFail
        - rebuildStartDelaySecondsWhenInMaintenance
        - minClusterRebuildIntervalSeconds
        - rebuildConcurrencyPerNode
        - rebuildConcurrencyGlobally
      properties:
        enableAutoHealing:
          type: boolean
          description: Set to true to enable the auto-healing process, which automatically rebuilds instances when a node fails or is in maintenance mode.
        rebuildStartDelaySecondsWhenNodeFail:
          type: integer
          format: int32
          description: The number of seconds to wait before starting a rebuild when a node fails.
        rebuildStartDelaySecondsWhenInMaintenance:
          type: integer
          format: int32
          description: The number of seconds to wait before starting a rebuild when a node is in maintenance mode.
        minClusterRebuildIntervalSeconds:
          type: integer
          format: int32
          description: The minimum time in seconds between consecutive rebuild jobs for one cluster.
        rebuildConcurrencyPerNode:
          type: integer
          format: int32
          description: The maximum number of rebuild jobs that can run simultaneously for a single node.
        rebuildConcurrencyGlobally:
          type: integer
          format: int32
          description: The maximum number of rebuild jobs that can run simultaneously for the whole k8s cluster.
    environmentDeletePolicy:
      type: string
      description: Environment delete policy to protect environment from false delete
      enum:
        - Delete
        - DoNotDelete
      default: DoNotDelete
    environment:
      type: object
      description: Environment info
      required:
        - provider
        - region
        - availabilityZones
        - id
        - name
        - displayName
        - type
        - state
        - organizations
        - provisionConfig
        - createdAt
        - updatedAt
      properties:
        provider:
          description: Cloud Provider
          title: Cloud Provider
          type: string
        region:
          description: Cloud Region
          title: Cloud Region
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          minItems: 1
          type: array
        schedulingConfig:
          $ref: '#/components/schemas/schedulingConfig'
        networkConfig:
          $ref: '#/components/schemas/networkConfig'
        description:
          description: The description of the organization
          type: string
        displayName:
          description: The display name of the context
          type: string
        id:
          format: uuid
          type: string
        name:
          description: The full, unique name of this Object in the format contexts/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
          type: string
        organizations:
          items:
            type: string
          type: array
          description: Organizations that have access for this environment
        metricsMonitorEnabled:
          description: The native VM cluster is deployed in environment or not.
          type: boolean
        state:
          $ref: '#/components/schemas/environmentState'
        type:
          $ref: '#/components/schemas/environmentType'
        provisionConfig:
          $ref: '#/components/schemas/provisionConfig'
        autohealingConfig:
          $ref: '#/components/schemas/autohealingConfig'
        createdAt:
          description: CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        extraInfo:
          type: string
          description: Extra info for environment
        deletePolicy:
          $ref: '#/components/schemas/environmentDeletePolicy'
    environmentList:
      description: EnvironmentList is a list of Environments
      properties:
        items:
          description: Items is the list of Environment objects in the list
          items:
            $ref: '#/components/schemas/environment'
          type: array
      required:
        - items
      type: object
    environmentCreate:
      required:
        - provider
        - region
        - name
        - displayName
        - type
        - organizations
        - provisionConfig
      type: object
      description: Environment creation info
      properties:
        name:
          type: string
          description: The full, unique name of this Object in the format environments/{name}, set during creation. name must be a valid RFC 1123 compliant DNS label
        type:
          description: Environment type
          $ref: '#/components/schemas/environmentType'
        schedulingConfig:
          description: Configuration for resource schduling for an environment
          $ref: '#/components/schemas/schedulingConfig'
        provisionConfig:
          description: Configuration for provisioning an environment
          $ref: '#/components/schemas/provisionConfig'
        organizations:
          items:
            type: string
          type: array
          description: Organizations that have access for this environment
        provider:
          title: Cloud Provider
          type: string
          description: Cloud Provider
        region:
          title: Cloud Region
          type: string
          description: Cloud Region
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          minItems: 1
          type: array
        description:
          type: string
          description: The description of the organization
        displayName:
          type: string
          description: The display name of the environment
        id:
          type: string
          format: uuid
        extraInfo:
          type: string
          description: Extra info for environment
        deletePolicy:
          $ref: '#/components/schemas/environmentDeletePolicy'
        overwrite:
          type: boolean
          description: overwrite a environment if it has been added before
          default: false
    preflight:
      title: Preflight results
      description: The result of preflight check
      type: object
      properties:
        title:
          type: string
        message:
          type: string
    preflightList:
      title: Preflight results
      description: The preflight results
      type: object
      properties:
        pass:
          type: array
          items:
            $ref: '#/components/schemas/preflight'
        warn:
          type: array
          items:
            $ref: '#/components/schemas/preflight'
        fail:
          type: array
          items:
            $ref: '#/components/schemas/preflight'
    sshConfig:
      type: object
      properties:
        username:
          type: string
          description: SSH username for connecting to the node
          minLength: 1
          maxLength: 32
          pattern: ^[a-z_][a-z0-9_-]*$
        password:
          type: string
          description: SSH password for connecting to the node
          format: password
          minLength: 1
          writeOnly: true
        port:
          type: integer
          description: SSH port number
          default: 22
          minimum: 1
          maximum: 65535
    sshNodeSpec:
      type: object
      required:
        - ip
      properties:
        ip:
          type: string
          format: ipv4
          description: IP address of the node
        ssh:
          $ref: '#/components/schemas/sshConfig'
          description: SSH configuration for this specific node
          x-nullable: true
    sshConfigCheckRequest:
      type: object
      required:
        - nodes
      properties:
        masters:
          type: array
          items:
            $ref: '#/components/schemas/sshNodeSpec'
          minItems: 1
          maxItems: 20
          description: List of masters (jumpserver) to perform preflight checks
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/sshNodeSpec'
          minItems: 1
          maxItems: 20
          description: List of nodes to perform preflight checks
        defaultSSH:
          $ref: '#/components/schemas/sshConfig'
          description: Default SSH configuration for all nodes. Individual node SSH config will override this.
    sshConfigCheckResult:
      type: object
      required:
        - ip
        - reachable
      properties:
        ip:
          type: string
          format: ipv4
        reachable:
          type: boolean
        message:
          type: string
    sshConfigCheckResponse:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/sshConfigCheckResult'
    cloudResourceCleanPolicy:
      type: string
      description: The policy to clean cloud resources, either `Delete` or `Retain`
      enum:
        - Delete
        - Retain
      default: Retain
    environmentDelete:
      description: Environment deletion option
      type: object
      required:
        - minio
        - victoriaMetrics
      properties:
        cleanCloudResources:
          type: boolean
          description: clean up resources in the cloud (only valid if creation is done by role ARN)
        minio:
          description: reserve minio cluster when delete environment
          $ref: '#/components/schemas/cloudResourceCleanPolicy'
        victoriaMetrics:
          description: reserve vm cluster when delete environment
          $ref: '#/components/schemas/cloudResourceCleanPolicy'
    environmentUpdate:
      type: object
      description: Environment info
      properties:
        description:
          description: The description of the organization
          type: string
          nullable: true
        displayName:
          description: The display name of the context
          type: string
          nullable: true
        organizations:
          items:
            type: string
          type: array
          description: Organizations that have access for this environment
          nullable: true
        namespaces:
          items:
            type: string
          type: array
          description: Organizations that have access for this environment
          nullable: true
        cpuOverCommitRatio:
          description: the over commit ratio of cpu
          type: number
          nullable: true
          format: double
        memoryOverCommitRatio:
          description: the over commit ratio of memory
          type: number
          nullable: true
          format: double
        autohealingConfig:
          $ref: '#/components/schemas/autohealingConfig'
        defaultStorageClass:
          description: the default storage class of this environment
          type: string
          nullable: true
        podAntiAffinityEnabled:
          title: PodAntiAffinityEnabled
          description: Enable pod antiaffinity for cluster
          type: boolean
          default: true
        imageRegistry:
          description: the image registry used to pull image
          type: string
          nullable: true
        nodePortEnabled:
          description: Enable node port service for this environment
          type: boolean
          default: true
        lbEnabled:
          description: Enable load balancer service for this environment
          type: boolean
          default: true
        internetLBEnabled:
          description: Enable the Internet load balancer service for this environment
          type: boolean
          default: true
        networkModes:
          type: array
          items:
            $ref: '#/components/schemas/networkMode'
          description: Network modes of the environment
        deletePolicy:
          $ref: '#/components/schemas/environmentDeletePolicy'
          nullable: true
    environmentStatusHistory:
      description: EventEnvironmentState contains details for the current and previous state of the environment.
      type: object
      properties:
        CurrentState:
          description: The current state of the environment.
          type: string
        PrevState:
          description: The previous state of the environment.
          type: string
        Reason:
          description: The reason for the state transition.
          type: string
        Timestamp:
          description: The timestamp of the state transition.
          type: string
          format: date-time
      required:
        - CurrentState
        - PrevState
        - Reason
        - Timestamp
    storageStats:
      description: StorageStats holds the resource stats of the volume, such as provisioned capacity, etc.
      properties:
        provisionedCapacity:
          description: ProvisionedCapacity is the actual size of the volumes that is bound to the PVC, unit is GiB
          format: double
          type: number
      required:
        - provisionedCapacity
      type: object
    environmentResourceStats:
      description: EnvironmentResourceStats holds the cpuStats for a environment.
      properties:
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        name:
          description: Name of the environment.
          type: string
        storageStats:
          $ref: '#/components/schemas/storageStats'
      required:
        - cpuStats
        - memoryStats
        - name
        - storageStats
      type: object
    nodeResourceStats:
      description: ResourceStats holds the requests, limits, and available stats for a resource.
      properties:
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        filesystemStats:
          $ref: '#/components/schemas/resourceStats'
        name:
          description: Name of the node.
          type: string
      required:
        - cpuStats
        - memoryStats
        - name
      type: object
    nodeResourceStatsList:
      description: NodeResourceStatsList is a list of NodeResourceStats
      properties:
        items:
          description: Items is the list of NodeResourceStats objects in the list
          items:
            $ref: '#/components/schemas/nodeResourceStats'
          type: array
        updatedAt:
          description: UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC. Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - items
        - updatedAt
      type: object
    jsonBody:
      description: Represents a JSON body.
      properties: {}
      additionalProperties: true
      type: object
    instanceResourceStatsType:
      description: Type of the instance, choose cluster or system
      enum:
        - cluster
        - system
      type: string
    instanceResourceStats:
      description: InstanceResourceStats holds the requests, limits, and available stats for an instance.
      properties:
        cpuStats:
          $ref: '#/components/schemas/resourceStats'
        memoryStats:
          $ref: '#/components/schemas/resourceStats'
        ephemeralStorageStats:
          $ref: '#/components/schemas/resourceStats'
        name:
          description: Name of the instance.
          type: string
        type:
          $ref: '#/components/schemas/instanceResourceStatsType'
      required:
        - cpuStats
        - memoryStats
        - name
      type: object
    instanceResourceStatsList:
      description: InstanceResourceStatsList is a list of InstanceResourceStats
      properties:
        items:
          description: Items is the list of InstanceResourceStats objects in the list
          items:
            $ref: '#/components/schemas/instanceResourceStats'
          type: array
      required:
        - items
      type: object
    nodeScaleSpec:
      type: object
      required:
        - ip
        - availabilityZone
        - markControlPlane
        - markDataPlane
      properties:
        ip:
          type: string
          description: IP address of the node to be added
          format: ipv4
        availabilityZone:
          type: string
        markControlPlane:
          type: boolean
          description: Whether mark the node serves as control plane
          default: false
        markDataPlane:
          description: Whether mark the node serves as data plane
          type: boolean
          default: true
        ssh:
          description: SSH connection details for the node. If not provided, environment default will be used
          $ref: '#/components/schemas/sshConfig'
          x-nullable: true
    nodeScaleRequest:
      type: object
      required:
        - nodes
      properties:
        masters:
          type: array
          items:
            $ref: '#/components/schemas/sshNodeSpec'
          minItems: 1
          maxItems: 20
          description: List of masters (jumpserver for ssh), at least one node is needed
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/nodeScaleSpec'
          minItems: 1
          maxItems: 20
          description: List of nodes to be added, support 1-20 nodes per request
        defaultSSH:
          description: Default SSH configuration for all nodes. Individual node SSH config will override this
          $ref: '#/components/schemas/sshConfig'
          x-nullable: true
    taskType:
      type: string
      enum:
        - ScaleOut
        - ScaleIn
        - DeleteDisasterRecoveryCluster
        - CreateDisasterRecoveryCluster
        - PromoteDisasterRecoveryCluster
      description: Type of task operation
    taskStatus:
      type: string
      enum:
        - Pending
        - Running
        - Stopped
        - Succeed
        - Failed
      description: Current status of the task
    taskStep:
      type: object
      required:
        - stepId
        - inputs
        - stepName
        - methodName
        - status
        - createdAt
        - updatedAt
      properties:
        stepId:
          type: string
          description: Unique identifier for the step
        stepName:
          type: string
          description: Name of the step
        methodName:
          type: string
          description: Method to be executed in this step
        inputs:
          type: object
          description: Input parameters for the step
          additionalProperties:
            type: string
        outputs:
          type: object
          description: Output parameters from the step
          additionalProperties:
            type: string
        retryLimit:
          type: integer
          description: Number of times to retry the step in case of failure
        currRetryCount:
          type: integer
          description: Current retry count for the step
        timeoutSecond:
          type: integer
          description: Timeout duration for the step in seconds
        status:
          $ref: '#/components/schemas/taskStatus'
        message:
          type: string
          description: Detailed message about the step status
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the step was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the step was last updated
        startedAt:
          type: string
          format: date-time
          description: Timestamp when the task was deleted
          x-nullable: true
        completionTime:
          type: string
          format: date-time
          description: Time when the task completed or failed
          x-nullable: true
    taskFailurePolicy:
      type: string
      enum:
        - interrupt
        - ignore
      description: Policy to handle failures
    task:
      type: object
      required:
        - taskId
        - status
        - taskName
        - taskType
        - createdAt
        - updatedAt
      properties:
        taskId:
          type: string
          description: ID of the scaling task
        taskName:
          type: string
          description: Name of the task
        taskType:
          $ref: '#/components/schemas/taskType'
        status:
          $ref: '#/components/schemas/taskStatus'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the task was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the task was last updated
        deletedAt:
          type: string
          format: date-time
          description: Timestamp when the task was deleted
          x-nullable: true
        startedAt:
          type: string
          format: date-time
          description: Timestamp when the task was deleted
          x-nullable: true
        completionTime:
          type: string
          format: date-time
          description: Time when the task completed or failed
          x-nullable: true
        message:
          type: string
          description: Detailed message about the task status
          x-nullable: true
        progress:
          type: integer
          description: Progress percentage of the task
          minimum: 0
          maximum: 100
        steps:
          type: array
          items:
            $ref: '#/components/schemas/taskStep'
        parallelism:
          type: integer
          description: Degree of parallelism for the task
        failurePolicy:
          $ref: '#/components/schemas/taskFailurePolicy'
        retryLimit:
          type: integer
          description: Maximum number of retries for the task
        timeoutSecond:
          type: integer
          description: Timeout duration for the task in seconds
    scaleInType:
      type: string
      enum:
        - Parallel
        - Serial
      default: Serial
      description: Type of scale in strategy
    scaleInHealthCheck:
      type: object
      properties:
        enabled:
          type: boolean
          default: true
          description: Whether to perform health checks during scale in
        healthyThreshold:
          type: integer
          minimum: 1
          default: 3
          description: Number of consecutive successful health checks required
        unhealthyThreshold:
          type: integer
          minimum: 1
          default: 3
          description: Number of consecutive failed health checks before marking unhealthy
        interval:
          type: string
          pattern: ^([0-9]+(\.[0-9]+)?(ns|us|µs|ms|s|m|h))+$
          default: 10s
          description: Interval between health checks
        timeout:
          type: string
          pattern: ^([0-9]+(\.[0-9]+)?(ns|us|µs|ms|s|m|h))+$
          default: 5s
          description: Timeout for each health check
    scaleInStrategy:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/scaleInType'
        maxUnavailable:
          type: string
          pattern: ^([0-9]+|[0-9]+%|)$
          default: 25%
          description: Maximum number of nodes that can be unavailable during scale in. Can be an absolute number or a percentage.
        maxSurge:
          type: string
          pattern: ^([0-9]+|[0-9]+%|)$
          default: 0%
          description: Maximum number of nodes that can be scheduled above the desired number. Can be an absolute number or a percentage.
        drainTimeout:
          type: string
          pattern: ^([0-9]+(\.[0-9]+)?(ns|us|µs|ms|s|m|h))+$
          default: 5m
          description: How long to wait for pod eviction when draining a node
        podEvictionWaitTime:
          type: string
          pattern: ^([0-9]+(\.[0-9]+)?(ns|us|µs|ms|s|m|h))+$
          default: 30s
          description: Time to wait between pod evictions
        minReadySeconds:
          type: integer
          minimum: 0
          default: 30
          description: Minimum time a replacement node should be ready before proceeding
        healthCheck:
          $ref: '#/components/schemas/scaleInHealthCheck'
          description: Health check configuration for the scale in process
    nodeScaleInRequest:
      type: object
      required:
        - nodes
      properties:
        nodes:
          type: array
          items:
            type: string
          description: List of node names to be removed
        drain:
          type: boolean
          description: Whether to drain nodes before removal
          default: true
        strategy:
          $ref: '#/components/schemas/scaleInStrategy'
          description: Strategy to control the scale in process
        force:
          type: boolean
          description: Force remove nodes even if they have pods not managed by ReplicationController, ReplicaSet, Job, DaemonSet or StatefulSet
          default: false
    listBody:
      description: Represents a list of JSON bodies.
      items:
        $ref: '#/components/schemas/jsonBody'
      type: array
    httpBody:
      description: Represents an HTTP request or response body.
      properties:
        contentType:
          description: The HTTP Content-Type header value specifying the content type of the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      title: ''
      type: object
    environmentConditionStatus:
      description: Status is the status of the condition. Can be True, False, Unknown.
      enum:
        - 'True'
        - 'False'
        - Unknown
      type: string
    environmentCondition:
      description: EnvironmentCondition contains details for the current condition of this environment.
      properties:
        message:
          description: Human-readable message indicating details about last transition.
          type: string
        reason:
          description: Unique, one-word, CamelCase reason for the condition's last transition.
          type: string
        status:
          $ref: '#/components/schemas/environmentConditionStatus'
        type:
          description: Type is the type of the condition.
          type: string
      required:
        - status
        - type
      type: object
    environmentStatus:
      description: Environment status
      properties:
        conditions:
          description: Current service state of environment.
          items:
            $ref: '#/components/schemas/environmentCondition'
          type: array
      type: object
    workflowStep:
      type: object
      description: workflow step
      properties:
        name:
          title: step name
          type: string
        phase:
          title: status
          type: string
        message:
          title: message
          type: string
        startedAt:
          title: start time
          type: string
          nullable: true
          format: date-time
        finishedAt:
          title: finish time
          type: string
          nullable: true
          format: date-time
    workflow:
      description: component management workflow
      type: object
      properties:
        name:
          title: workflow name
          type: string
        phase:
          title: status
          type: string
        message:
          title: message
          type: string
        startedAt:
          title: start time
          type: string
          nullable: true
          format: date-time
        finishedAt:
          title: finish time
          type: string
          nullable: true
          format: date-time
        steps:
          type: array
          description: ordered by time asc
          items:
            $ref: '#/components/schemas/workflowStep'
    workflowList:
      description: component management workflow list
      type: object
      properties:
        install:
          $ref: '#/components/schemas/workflow'
        uninstall:
          $ref: '#/components/schemas/workflow'
        upgradeKubeblocks:
          $ref: '#/components/schemas/workflow'
        upgradeGemini:
          $ref: '#/components/schemas/workflow'
        upgradeVictoriaMetrics:
          $ref: '#/components/schemas/workflow'
        upgradeLoki:
          $ref: '#/components/schemas/workflow'
      example:
        install:
          finishedAt: '2024-04-08T08:09:02.000Z'
          message: child 'full-managed-installer-2x8cc-4255949067' failed
          name: full-managed-installer-2x8cc
          phase: Failed
          startedAt: '2024-04-08T07:58:43.000Z'
          steps:
            - finishedAt: '2024-04-08T08:04:13.000Z'
              name: terraform
              phase: Succeeded
              startedAt: '2024-04-08T07:58:43.000Z'
            - finishedAt: '2024-04-08T08:05:52.000Z'
              name: wait-k8s-ready
              phase: Succeeded
              startedAt: '2024-04-08T08:04:23.000Z'
            - finishedAt: '2024-04-08T08:07:31.000Z'
              name: kubeblocks-installer
              phase: Succeeded
              startedAt: '2024-04-08T08:06:02.000Z'
            - finishedAt: '2024-04-08T08:08:52.000Z'
              message: Error (exit code 1)
              name: gemini-installer
              phase: Failed
              startedAt: '2024-04-08T08:07:40.000Z'
        upgradeKubeblocks:
          finishedAt: '2024-04-08T08:19:36.000Z'
          message: child 'upgrade-kubeblocks-lxjj2-4244434436' failed
          name: upgrade-kubeblocks-lxjj2
          phase: Failed
          startedAt: '2024-04-08T08:19:26.000Z'
          steps:
            - finishedAt: '2024-04-08T08:19:31.000Z'
              message: Error (exit code 1)
              name: kubeblocks-installer
              phase: Failed
              startedAt: '2024-04-08T08:19:26.000Z'
    workflowType:
      description: workflow type
      type: string
      enum:
        - install
        - upgradeKubeblocks
        - upgradeGemini
        - uninstall
        - upgradeVictoriaMetrics
        - upgradeLoki
        - update
    workflowCreate:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/workflowType'
        version:
          title: component version
          type: string
        oteldVersion:
          type: string
          title: oteld version, only valid in upgradeGemini workflow
    envModuleVersion:
      description: environment module version
      type: object
      properties:
        kubeblocks:
          type: string
        gemini:
          type: string
        oteld:
          type: string
    loadBalancerStatus:
      description: Status of the load balancer
      type: string
      enum:
        - Enabling
        - Enabled
        - Disabling
        - Disabled
        - Failed
    loadBalancerAvailableType:
      description: Whether the loadbalancer is available in the environment.
      type: string
      enum:
        - Available
        - Unavailable
        - Checking
        - Unknown
    loadBalancerIpamStatus:
      description: Whether the ipam is enabled.
      type: string
      enum:
        - Enabled
        - Disabled
    loadBalancer:
      description: The load balancer info
      properties:
        version:
          description: Version of the load balancer
          type: string
        type:
          description: Type of the load balancer
          type: string
        status:
          $ref: '#/components/schemas/loadBalancerStatus'
        available:
          $ref: '#/components/schemas/loadBalancerAvailableType'
        class:
          description: Class of the load balancer, only available on public cloud.
          type: string
        chargeType:
          description: Charge type of the load balancer, only available on public cloud.
          type: string
        ipam:
          $ref: '#/components/schemas/loadBalancerIpamStatus'
      required:
        - status
      type: object
    loadBalancerType:
      type: string
      description: Type of the load balancer
      enum:
        - f5
        - metallb
    loadBalancerInstall:
      description: Install the load balancer in the environment
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/loadBalancerType'
    vipPool:
      description: VIP Pool
      properties:
        addresses:
          description: IP Addresses
          title: IP Addresses
          type: string
        id:
          description: ID of VIP Pool
          title: ID
          type: object
        total:
          description: Total number of IP addresses
          format: int64
          type: integer
        used:
          description: Used number of IP addresses
          format: int64
          type: integer
      required:
        - addresses
        - total
        - used
      type: object
    vipPoolList:
      description: vipPoolList is a list of vip pools
      properties:
        items:
          description: Items is the list of vip pool objects in the list
          items:
            $ref: '#/components/schemas/vipPool'
          type: array
      required:
        - items
      type: object
    vipPoolCreate:
      description: VIP Pool create
      properties:
        addresses:
          description: IP Addresses
          title: IP Addresses
          type: string
      required:
        - addresses
      type: object
    storageClassReclaimPolicy:
      description: reclaimPolicy controls the reclaimPolicy for dynamically provisioned PersistentVolumes of this storage class. Defaults to Delete.
      enum:
        - Delete
        - Retain
        - Recycle
      type: string
    storageClassVolumeBindingMode:
      description: volumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound. Defaults to Immediate.
      enum:
        - Immediate
        - WaitForFirstConsumer
      type: string
    storageClassCreate:
      description: StorageClassCreate provides detailed creation information about a storage class.
      properties:
        name:
          description: the name of the storage class
          type: string
        provisioner:
          description: the provisioner of the storage class
          type: string
        labels:
          description: the labels of the storage class
          type: object
          additionalProperties:
            type: string
        annotations:
          description: the annotations of the storage class
          type: object
          additionalProperties:
            type: string
        parameters:
          description: the parameters of the storage class
          type: object
          additionalProperties:
            type: string
        reclaimPolicy:
          $ref: '#/components/schemas/storageClassReclaimPolicy'
        allowVolumeExpansion:
          description: whether allow volume expansion
          type: boolean
        volumeBindingMode:
          $ref: '#/components/schemas/storageClassVolumeBindingMode'
        allowClone:
          description: whether allow clone
          type: boolean
        allowSnapshot:
          description: whether allow snapshot
          type: boolean
        isDefaultClass:
          description: whether is default class
          type: boolean
        type:
          description: the type of the storage class
          type: string
        hostPath:
          description: the host path when using local storage provisioner
          type: string
        mountOptions:
          description: the mount options of the storage class
          type: array
          items:
            type: string
        description:
          description: the description of the storage class
          type: string
        displayName:
          description: the display name of the storage class
          type: string
        enabled:
          description: whether the storage class is enabled
          type: boolean
      required:
        - name
        - reclaimPolicy
        - volumeBindingMode
        - displayName
        - description
        - enabled
      type: object
    storageProvisioner:
      description: StorageProvisioner provides detailed information about the provisioner used by storage classes.
      properties:
        provisioner:
          nullable: true
          type: string
        type:
          nullable: true
          type: string
        cloudProvider:
          nullable: true
          type: string
      type: object
    storageProvisionerList:
      description: StorageProvisionerList stands for stats for provisioners can be used by storage classes.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/storageProvisioner'
      required:
        - items
      type: object
    storageClassUpdate:
      description: StorageClassUpdate provides the fields for updating a specific storage class.
      type: object
      properties:
        isDefaultClass:
          type: boolean
          description: Indicates if this is the default storage class.
        displayName:
          type: string
          description: A user-friendly name for the storage class.
        description:
          type: string
          description: A detailed description of the storage class.
        enabled:
          type: boolean
          description: Indicates if the storage class is enabled.
      required:
        - isDefaultClass
        - displayName
        - description
        - enabled
    persistentVolumeClaim:
      description: persistentVolumeClaim provides detailed information about the PVC .
      properties:
        nameSpace:
          description: the namespace of the PVC
          type: string
        name:
          description: the name of the PVC
          type: string
        phase:
          description: the phase of the PVC
          type: string
        capacity:
          description: the capacity of the PVC
          nullable: true
          type: string
        accessMode:
          description: access mode of the PVC
          nullable: true
          type: string
        volumeName:
          description: the persistentvolume of the PVC
          nullable: true
          type: string
        node:
          description: the node of the PVC
          nullable: true
          type: string
      required:
        - nameSpace
        - name
        - phase
      type: object
    persistentVolumeClaimList:
      description: the List stands for stats for persistentvolumeclaims.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/persistentVolumeClaim'
        currentPage:
          description: the current page number
          nullable: true
          format: int64
          type: integer
        totalPage:
          description: the total page number
          nullable: true
          format: int64
          type: integer
        pageSize:
          description: the page size
          nullable: true
          format: int64
          type: integer
      type: object
    nodeGroup:
      required:
        - name
        - nodes
      type: object
      description: NodeGroup creation info
      properties:
        name:
          type: string
          description: The full, unique name of this Object, name part must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character (e.g. 'MyName',  or 'my.name',  or '123-abc'
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
          format: string
        description:
          type: string
          description: the description of the node group
        nodes:
          items:
            type: string
            description: Node name (e.g. 'MyName',  or 'my.name',  or '123-abc')
            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
            format: string
          type: array
          description: the nodes of the node group
    nodeOperationType:
      type: string
      description: operation for node, either `add` or `del`
      enum:
        - add
        - del
    nodeOperation:
      type: object
      properties:
        name:
          type: string
          description: Node name (e.g. 'MyName',  or 'my.name',  or '123-abc')
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
          format: string
        op:
          $ref: '#/components/schemas/nodeOperationType'
    nodeGroupUpdate:
      type: object
      description: NodeGroup patch info
      properties:
        description:
          type: string
          description: NodeGroup description
          nullable: true
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/nodeOperation'
    stringList:
      description: Represents a list of strings.
      items:
        type: string
      type: array
    kubeConfig:
      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
      type: string
      description: The kubeconfig body as raw binary.
      format: byte
    rawCluster:
      type: object
      description: cluster info
      properties:
        kubernetesName:
          description: the cluster name in k8s
          type: string
        namespace:
          type: string
          description: the namespace of cluster
        replicas:
          type: integer
          description: the replicas of cluster
        storage:
          type: number
          description: Storage size, the unit is Gi
          format: double
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
    environmentObjectStorage:
      type: object
      properties:
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/rawCluster'
    rawBackupRepo:
      type: object
      description: backup repo info
      properties:
        name:
          description: the backup repo name
          type: string
        default:
          type: boolean
          description: default backup repo
    environmentBackupRepo:
      type: object
      properties:
        items:
          description: backup repo list
          items:
            $ref: '#/components/schemas/rawBackupRepo'
          type: array
    projectItem:
      description: Project item.
      type: object
      required:
        - name
        - createdAt
        - clusterTotal
        - status
      properties:
        name:
          type: string
          description: The name of the project.
        clusterTotal:
          type: integer
          description: The total number of clusters in the project.
        createdAt:
          type: string
          format: date-time
          description: The time the project was created.
        status:
          type: string
          description: The status of project.
    projectList:
      description: Project list.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/projectItem'
          description: The list of projects.
    projectCreate:
      description: Project create.
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the project.
    project:
      description: Project with detail information.
      type: object
      required:
        - name
        - createdAt
        - envID
      properties:
        name:
          type: string
          description: The name of the project.
        createdAt:
          type: string
          format: date-time
          description: The time the project was created.
        envID:
          type: string
          description: The environment ID of the project.
    backupRepoAccessMethod:
      description: the access method for backup repo
      default: Tool
      enum:
        - Mount
        - Tool
      type: string
    backupRepo:
      description: backupRepo is the payload for KubeBlocks cluster backup repo
      properties:
        accessMethod:
          $ref: '#/components/schemas/backupRepoAccessMethod'
        id:
          description: the id of backup repo
          type: string
        backupNums:
          description: backupNums specifies the number of backups in the backupRepo
          type: integer
        config:
          additionalProperties:
            type: string
          description: config specifies the configuration of the backupRepo
          type: object
        createdAt:
          description: createdAt specifies the creation time of the backupRepo
          format: date-time
          type: string
        default:
          description: default specifies whether the backupRepo is the default backupRepo
          type: boolean
        environmentId:
          description: environmentId of the backupRepo
          format: uuid
          type: string
        environmentName:
          description: environmentName of the backupRepo
          type: string
        name:
          description: name of the backupRepo
          type: string
        status:
          description: status specifies the status of the backupRepo
          type: string
        storageName:
          description: the name of storage used by backup repo
          type: string
        storageID:
          description: the id of storage used by backup repo
          type: string
        storageProvider:
          description: storageProvider specifies the storage provider of the backupRepo
          type: string
        totalSize:
          description: totalSize specifies the total size of backups in the backupRepo
          type: string
        failedReason:
          type: string
          description: failedReason specifies the reason of the backupRepo failure
        failedMessage:
          type: string
          description: failedMessage specifies the message of the backupRepo failure
      required:
        - config
        - createdAt
        - default
        - environmentId
        - environmentName
        - name
        - storageProvider
      type: object
    backupRepoList:
      description: BackupRepoList is a list of backupRepo
      properties:
        items:
          description: Items is the list of backupRepo objects in the list
          items:
            $ref: '#/components/schemas/backupRepo'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    backupRepoPVReclaimPolicy:
      description: Specify the reclaim policy for PVs created by this backup repo
      enum:
        - Retain
        - Delete
      type: string
    backupRepoCreate:
      description: BackupRepoCreate is the payload to create a KubeBlocks cluster backup repo
      properties:
        storageID:
          description: the id of storage that backup repo used
          type: string
        accessMethod:
          $ref: '#/components/schemas/backupRepoAccessMethod'
        default:
          description: default specifies whether the backupRepo is the default backupRepo
          type: boolean
        name:
          description: name of the backupRepo
          type: string
        params:
          type: object
          description: the parameters to create the storage
          additionalProperties:
            type: string
        pvReclaimPolicy:
          $ref: '#/components/schemas/backupRepoPVReclaimPolicy'
        volumeCapacity:
          description: Specify the capacity of the new created PVC
          type: string
      required:
        - name
        - storageID
      type: object
    backupRepoUpdate:
      description: BackupRepoUpdate is the payload to update a KubeBlocks cluster backup repo
      properties:
        default:
          description: default specifies whether the backupRepo is the default backupRepo
          type: boolean
      required:
        - default
      type: object
    backupRepoCheck:
      properties:
        success:
          description: whether backup repo pass the check
          type: boolean
        message:
          description: the info when failed to pass the check
          type: string
    backupRepoView:
      properties:
        filepath:
          description: the router to show in backup repo
          type: string
    fileEntry:
      description: the entry of files
      properties:
        IsDir:
          description: description the entry type
          type: boolean
        fullPath:
          description: the full path of file
          type: string
        filename:
          description: the filename
          type: string
        size:
          description: the size of entry
          format: int64
          type: integer
    fileEntryList:
      description: BackupEntryList is a list of entry
      properties:
        items:
          description: Items is the list of backup entry
          items:
            $ref: '#/components/schemas/fileEntry'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      type: object
    backupStatsStatus:
      description: Number of backups for the status
      properties:
        status:
          description: Backup status
          type: string
        num:
          description: Number of backups for each status
          format: int64
          type: integer
      type: object
    backupStatsEngine:
      description: Totalsize and number of backups for the engine
      properties:
        engine:
          description: Engine name
          type: string
        size:
          description: totalsize of backups for each engine, A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        num:
          description: The number of backups for each engine
          format: int64
          type: integer
      type: object
    backupStatsType:
      description: Totalsize and number of backups for the backup type
      properties:
        type:
          description: backup type
          type: string
        size:
          description: totalsize of backups for each engine, A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        num:
          description: The number of backups for each engine
          format: int64
          type: integer
      type: object
    backupRepoStats:
      properties:
        totalBackup:
          description: the total backup in backup repo
          type: integer
          format: int64
        totalSize:
          description: the total backup size in backup repo
          type: string
        backupStatsStatus:
          description: Number of backups for each defferent status
          items:
            $ref: '#/components/schemas/backupStatsStatus'
          type: array
        backupStatsEngine:
          description: Totalsize and number of backups for each engine
          items:
            $ref: '#/components/schemas/backupStatsEngine'
          type: array
        backupStatsType:
          description: Totalsize and number of backups for each engine
          items:
            $ref: '#/components/schemas/backupStatsType'
          type: array
        createdAt:
          description: the time that the stats is created
          format: date-time
          type: string
    backupRepoStatsList:
      description: backupRepoStatsList is a list of backup repo stats
      properties:
        items:
          description: Items is the list of backup repo stats in the list
          items:
            $ref: '#/components/schemas/backupRepoStats'
          type: array
        current:
          description: current backup repo stats
          $ref: '#/components/schemas/backupRepoStats'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    imageRegistry:
      type: object
      description: Represents an image registry.
      properties:
        name:
          type: string
          x-nullable: false
          description: The name of the image registry.
        url:
          type: string
          description: The url of the image registry.
        username:
          type: string
          nullable: true
          description: The username used to authenticate with the image registry.
        password:
          type: string
          nullable: true
          description: The password used to authenticate with the image registry.
        id:
          type: string
          description: The id of the image registry.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the image registry was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the image registry was last updated.
      required:
        - name
        - url
    imageRegistryList:
      description: imageRegistryList is a list of imageRegistry
      properties:
        items:
          description: Items is the list of imageRegistry objects in the list
          items:
            $ref: '#/components/schemas/imageRegistry'
          type: array
      required:
        - items
      type: object
    backupType:
      enum:
        - Full
        - Incremental
        - Differential
        - Continuous
      type: string
      description: the type of backup
    backupCreate:
      description: BackupCreate is the payload to create a KubeBlocks cluster backup
      properties:
        name:
          description: name of the backup, if not specified, a name will be generated automatically
          type: string
        backupType:
          $ref: '#/components/schemas/backupType'
        backupMethod:
          description: specified the backup method
          type: string
      type: object
      required:
        - backupMethod
    backupStatus:
      description: The current status. Valid values are New, InProgress, Completed, Failed.
      enum:
        - New
        - InProgress
        - Running
        - Completed
        - Failed
        - Deleting
      type: string
    backup:
      description: backup is the payload for KubeBlocks cluster backup
      properties:
        autoBackup:
          description: autoBackup or not
          type: boolean
        backupMethod:
          description: Backup Method.
          type: string
        backupPolicyName:
          description: Which backupPolicy is applied to perform this backup
          pattern: ^[a-z0-9]([a-z0-9\.\-]*[a-z0-9])?$
          type: string
        backupRepo:
          description: backupRepo is the name of backupRepo and it is used to store the backup data
          type: string
        backupType:
          $ref: '#/components/schemas/backupType'
        completionTimestamp:
          description: Date/time when the backup finished being processed.
          format: date-time
          type: string
        creationTimestamp:
          description: Date/time when the backup was created.
          format: date-time
          type: string
        duration:
          description: The duration time of backup execution. When converted to a string, the form is "1h2m0.5s".
          type: string
        name:
          description: name of the backup
          type: string
        orgName:
          description: orgName records the organization name for this backup.
          type: string
        snapshotVolumes:
          description: snapshotVolumes specifies whether to take snapshots of persistent volumes to back up
          type: boolean
        sourceCluster:
          description: sourceCluster records the source cluster information for this backup.
          type: string
        startTimestamp:
          description: Date/time when the backup started being processed.
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/backupStatus'
        timeRangeEnd:
          description: timeRangeEnd records the end time of the backup.
          format: date-time
          type: string
          nullable: true
        timeRangeStart:
          description: timeRangeStart records the start time of the backup.
          format: date-time
          type: string
          nullable: true
        totalSize:
          description: Backup total size. A string with capacity units in the form of "1Gi", "1Mi", "1Ki".
          type: string
        failureReason:
          type: string
        extras:
          type: string
        targetPods:
          type: array
          description: backup target pods
          items:
            type: string
        path:
          description: the path of backup files
          type: string
        retentionPeriod:
          description: determines a duration up to which the backup should be kept
          type: string
        expiration:
          description: indicates when this backup becomes eligible for garbage collection
          type: string
          format: date-time
          nullable: true
        id:
          description: the backup id
          type: string
        clusterId:
          description: the id of cluster that backup belong to
          type: string
        cloudProvider:
          description: the cloud provider
          type: string
        cloudRegion:
          description: the cloud region
          type: string
        environmentName:
          description: the environment name
          type: string
        engine:
          description: the cluster engine
          type: string
        parentBackupName:
          description: the parent backup name
          type: string
        baseBackupName:
          description: the base backup name
          type: string
      required:
        - autoBackup
        - backupMethod
        - backupPolicyName
        - backupType
        - cloudProvider
        - cloudRegion
        - creationTimestamp
        - engine
        - environmentName
        - name
        - orgName
        - retentionPeriod
        - snapshotVolumes
        - sourceCluster
        - status
        - totalSize
      type: object
    backupPolicy:
      description: BackupPolicy is the payload for KubeBlocks cluster backup policy
      properties:
        autoBackup:
          default: false
          description: specify whether to use auto backup
          type: boolean
        autoBackupMethod:
          description: the auto full backup method
          type: string
        pitrEnabled:
          description: specify whether to enable point-in-time recovery
          default: false
          type: boolean
        continuousBackupMethod:
          description: continuous backup method for pitr
          type: string
        cronExpression:
          description: the crop expression for schedule
          type: string
        incrementalBackupEnabled:
          description: specify whether to enable incremental backup
          default: false
          type: boolean
        incrementalCronExpression:
          description: the crop expression for incremental backup schedule
          type: string
        retentionPeriod:
          description: specify the retention period
          type: string
        backupRepo:
          description: the backup repo name, which is used to store backup data
          type: string
        retentionPolicy:
          $ref: '#/components/schemas/backupRetentionPolicy'
        nextBackupTime:
          description: the time to do next backup
          format: date-time
          type: string
          nullable: true
      type: object
    backupList:
      description: BackupList is a list of backups
      properties:
        items:
          description: Items is the list of backup policy objects in the list
          items:
            $ref: '#/components/schemas/backup'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    backupStats:
      description: Backup statistic info
      properties:
        backupStatsStatus:
          description: Number of backups for each different status
          items:
            $ref: '#/components/schemas/backupStatsStatus'
          type: array
        backupStatsEngine:
          description: TotalSize and number of backups for each engine
          items:
            $ref: '#/components/schemas/backupStatsEngine'
          type: array
        backupStatsType:
          description: TotalSize and number of backups for each type
          items:
            $ref: '#/components/schemas/backupStatsType'
          type: array
        latestBackupTime:
          description: create time of the latest backup
          type: string
          format: date-time
          nullable: true
        latestBackupStatus:
          description: backup status of the latest backup
          type: string
          nullable: true
      type: object
    backupLogByPod:
      description: info of backup workload log
      properties:
        log:
          description: logs of the backup workload
          type: string
        podName:
          description: pod name
          type: string
        creationTimestamp:
          description: Date/time when the backup pod was created.
          format: date-time
          type: string
      type: object
    backupLog:
      description: backup workload logs
      properties:
        items:
          description: items is the list of backupLogByPod objects
          items:
            $ref: '#/components/schemas/backupLogByPod'
          type: array
        backupId:
          description: backup id
          type: string
      type: object
    backupView:
      properties:
        filepaths:
          description: the paths of file to view
          type: array
          items:
            type: string
    backupDownload:
      properties:
        filepaths:
          description: the paths of file to download
          type: array
          items:
            type: string
    clusterBackupMethod:
      description: the backup method for cluster
      properties:
        full:
          description: full backup method
          type: string
        incremental:
          description: incremental backup method
          type: string
        continuous:
          description: continuous backup method
          type: string
      type: object
    restore:
      description: create a KubeBlocks restore API
      properties:
        id:
          description: ID of the restore
          type: string
        orgName:
          description: organization name
          type: string
        backupName:
          description: backup name
          type: string
        clusterName:
          description: kubeBlocks cluster name
          type: string
        componentName:
          description: component name of cluster
          type: string
        targetPodName:
          description: target pod name
          type: string
        createdAt:
          format: date-time
          type: string
        name:
          description: kubeBlocks restore name
          type: string
        parameters:
          description: restore parameters to inject env of the restore CR.
          additionalProperties:
            type: string
          type: object
        restoreTime:
          description: restore time
          type: string
        status:
          description: restore status
          properties:
            actions:
              items:
                properties:
                  message:
                    type: string
                  name:
                    description: action name
                    type: string
                  status:
                    description: 'action status, enum values: [Processing, Completed, Failed]'
                    type: string
                  backupName:
                    type: string
                  objectKey:
                    type: string
                  startTime:
                    type: string
                    format: date-time
                  endTime:
                    type: string
                    format: date-time
                type: object
              type: array
            completionTimestamp:
              description: completion time
              type: string
              format: date-time
            conditions:
              items:
                properties:
                  message:
                    type: string
                  reason:
                    type: string
                  type:
                    description: conditionType
                    type: string
                  observedGeneration:
                    type: integer
                    format: int64
                  lastTransitionTime:
                    type: string
                    format: date-time
                  status:
                    type: string
                type: object
              type: array
            phase:
              description: restore phase
              type: string
            startTimestamp:
              description: start time
              type: string
              format: date-time
          type: object
      required:
        - backupName
        - clusterName
        - componentName
      type: object
    restoreList:
      description: restoreList is a list of restore object
      properties:
        items:
          description: Items is the list of restore objects in the list
          items:
            $ref: '#/components/schemas/restore'
          type: array
      required:
        - items
      type: object
    restoreLogByPod:
      description: info of restore workload log
      properties:
        log:
          description: restore pod log
          type: string
        ownerObjectKey:
          description: pod ownerReference objectkey
          type: string
        podName:
          description: pod name
          type: string
        creationTimestamp:
          description: Date/time when the restore pod was created.
          format: date-time
          type: string
      type: object
    restoreLog:
      description: restore workload logs
      properties:
        items:
          description: items is the list of restoreLogByPod objects
          items:
            $ref: '#/components/schemas/restoreLogByPod'
          type: array
        restoreId:
          description: restore id
          type: string
      type: object
    volumeRestorePolicy:
      default: Serial
      description: 'the volume claim restore policy, support values: [Serial, Parallel]'
      enum:
        - Serial
        - Parallel
      type: string
    restoreCreate:
      description: RestoreCreate is the payload to restore a KubeBlocks cluster
      properties:
        environmentName:
          description: the env name of the target environment to restore
          type: string
        backupId:
          description: the id of backup to restore
          type: string
        cluster:
          $ref: '#/components/schemas/cluster'
        restoreTimeStr:
          description: restoreTime point to restore
          type: string
        doReadyRestoreAfterClusterRunning:
          description: the recovery process in the PostReady phase will be performed after the cluster is running successfully.
          type: boolean
        volumeRestorePolicy:
          $ref: '#/components/schemas/volumeRestorePolicy'
      required:
        - environmentName
        - backupId
        - cluster
      type: object
    alertSMTPConfig:
      description: Alert smtp config
      properties:
        smtp_auth_password:
          description: SMTP authentication information
          type: string
        smtp_auth_username:
          description: SMTP authentication information
          type: string
        smtp_from:
          description: The sender's address
          type: string
        smtp_smarthost:
          description: The SMTP host through which emails are sent
          type: string
      required:
        - smtp_auth_password
        - smtp_auth_username
        - smtp_from
        - smtp_smarthost
      type: object
    alertTemplate:
      description: Alert template
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        emailSubject:
          type: string
        emailText:
          type: string
        feishuText:
          type: string
        feishuTitle:
          type: string
        dingdingText:
          type: string
        dingdingTitle:
          type: string
        weixinText:
          type: string
        weixinTitle:
          type: string
        webhookText:
          type: string
        webhookTitle:
          type: string
        id:
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        isDefault:
          type: boolean
      required:
        - name
      type: object
    alertTemplateList:
      description: AlertTemplateList is a list of alert templates
      properties:
        items:
          description: Items is the list of alertTemplate objects in the list
          items:
            $ref: '#/components/schemas/alertTemplate'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    alertCluster:
      required:
        - disabled
      type: object
      properties:
        disabled:
          type: boolean
    alertReceiverCategory:
      type: string
      enum:
        - feishu
        - wechat
        - dingtalk
        - receiver-group
        - webhook
    webhookConfig:
      description: Webhook config of alert receiver
      properties:
        url:
          type: string
      required:
        - url
      type: object
    alertReceiver:
      description: Alert receiver information
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        name:
          type: string
        category:
          $ref: '#/components/schemas/alertReceiverCategory'
        updatedAt:
          format: date-time
          type: string
        userGroup:
          properties:
            emailEnabled:
              type: boolean
            ids:
              items:
                type: string
              type: array
            smsEnabled:
              type: boolean
          type: object
        webhookConfig:
          $ref: '#/components/schemas/webhookConfig'
        orgName:
          type: string
      type: object
    alertReceiverList:
      description: AlertReceiverList is a list of alert receivers
      properties:
        items:
          description: Items is the list of alert receiver objects in the list
          items:
            $ref: '#/components/schemas/alertReceiver'
          type: array
        pageResult:
          $ref: '#/components/schemas/pageResult'
      required:
        - items
      type: object
    URLCheck:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          example: https://example.com
        isConnectable:
          type: boolean
          example: true
          default: false
        timeout:
          type: integer
          minimum: 1
          maximum: 30
          default: 5
          example: 5
        error:
          type: string
          example: null
    alertStatistic:
      type: object
      properties:
        total:
          type: integer
        critical:
          type: integer
        warning:
          type: integer
        info:
          type: integer
    alertSeverity:
      enum:
        - critical
        - warning
        - info
      type: string
    alertMetric:
      required:
        - key
      type: object
      properties:
        key:
          type: string
        threshold:
          type: integer
        notation:
          type: string
        category:
          type: string
      description: Alert metric information
    alertRule:
      required:
        - alertName
      type: object
      properties:
        description:
          type: string
        summary:
          type: string
        alertName:
          type: string
        expr:
          type: string
        for:
          type: string
        groupName:
          type: string
        disabled:
          type: boolean
          default: false
        severity:
          $ref: '#/components/schemas/alertSeverity'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metric:
          $ref: '#/components/schemas/alertMetric'
        orgName:
          type: string
      description: Alert rule information
    alertStrategy:
      required:
        - receiverIds
      type: object
      properties:
        id:
          type: integer
        orgName:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        receiverIds:
          type: array
          items:
            type: integer
        receivers:
          type: array
          items:
            $ref: '#/components/schemas/alertReceiver'
        envs:
          type: array
          items:
            type: string
        severities:
          type: array
          items:
            type: string
        rules:
          type: array
          items:
            type: string
        ruleObjs:
          type: array
          items:
            $ref: '#/components/schemas/alertRule'
        engines:
          type: array
          items:
            type: string
        clusters:
          type: array
          items:
            type: string
        disabled:
          type: boolean
          default: false
        repeatInterval:
          type: string
        muteTimeInterval:
          type: object
          properties:
            weekdays:
              type: array
              items:
                type: integer
                description: Days should be between [0, 6] where 0 = Sunday.
            times:
              type: object
              properties:
                startTime:
                  type: string
                  description: Mute start time, e.g. '17:00', should be in UTC time.
                endTime:
                  type: string
                  description: Mute end time, e.g. '24:00', should be in UTC time.
            onceMinutes:
              type: integer
              description: Only mute once for `onceMinutes` minutes
      description: Alert strategy information
    alertStrategyList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert strategy objects in the list
          items:
            $ref: '#/components/schemas/alertStrategy'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertStrategyList is a list of alert strategies
    alertRuleGroup:
      type: object
      properties:
        name:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/alertRule'
    alertRuleList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert rule objects in the list
          items:
            $ref: '#/components/schemas/alertRuleGroup'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertRuleList is a list of alert rules
    alertMetricList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert metric objects in the list
          items:
            $ref: '#/components/schemas/alertMetric'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertMetricList is a list of alert metric
    alertStatus:
      enum:
        - resolved
        - firing
      type: string
    alertObject:
      type: object
      properties:
        id:
          type: integer
        alertName:
          type: string
        groupName:
          type: string
        expr:
          type: string
        clusterName:
          type: string
        engine:
          type: string
        namespace:
          type: string
        pod:
          type: string
        severity:
          $ref: '#/components/schemas/alertSeverity'
        description:
          type: string
        fingerprint:
          type: string
        startsAt:
          format: date-time
          type: string
        endsAt:
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/alertStatus'
        count:
          type: integer
        orgName:
          type: string
        page:
          type: integer
        pageSize:
          type: integer
      description: Alert object information
    alertObjectList:
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert objects in the list
          items:
            $ref: '#/components/schemas/alertObject'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertObjectList is a list of alert object
    alertConfig:
      required:
        - timeZoneOffset
      type: object
      properties:
        timeZoneOffset:
          type: integer
          description: Time zone offset in seconds, e.g. offset of UTC+08:00 is +8 * 60 * 60
    alertInhibit:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        orgName:
          type: string
        sourceMatch:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        targetMatch:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        equal:
          type: array
          items:
            type: string
      description: Alert object information
    alertInhibitList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of alert inhibits in the list
          items:
            $ref: '#/components/schemas/alertInhibit'
        pageResult:
          $ref: '#/components/schemas/pageResult'
      description: AlertInhibitList is a list of alert inhibit
    alertSMSConfig:
      description: Alert sms config
      properties:
        name:
          type: string
        accessKeyID:
          type: string
        accessKeySecret:
          type: string
        endpoint:
          type: string
        templateCode:
          type: string
        signName:
          type: string
      required:
        - accessKeyID
        - accessKeySecret
        - templateCode
      type: object
    engineOptionVersion:
      type: string
      default: current
      enum:
        - current
        - original
    componentOption:
      type: object
      required:
        - name
        - title
        - order
      properties:
        name:
          type: string
          description: component type
        matchRegex:
          type: string
          description: |
            Determine whether the componentDef of kb-cluster belongs to this component type through this matching regularization.
            if not set, componentDef must be equal to component type.
        title:
          $ref: '#/components/schemas/localizedDescription'
        order:
          type: integer
        roleOrder:
          type: array
          items:
            type: string
        version:
          type: object
          required:
            - majorVersion
            - componentVersionName
          properties:
            componentVersionName:
              type: string
              description: component version name
            minorVersion:
              type: object
              properties:
                default:
                  type: string
                  description: default version.
                rollback:
                  type: boolean
                  description: determine whether minor version can be rolled back.
                disableRollbackPreRelease:
                  type: boolean
                  description: disable roll back the preRelease minor version.
            majorVersion:
              type: object
              required:
                - rule
              properties:
                default:
                  type: string
                  description: default major version.
                rule:
                  type: string
                  description: |
                    ServiceVersion uses semver syntax(X Y.Z), such MySQL 5.7.4 and PG 14.8.0. 
                    Currently supports [X, X.Y, X.Y.Z] formats to determine major versions of the engine from the serviceVersion
                versionMapping:
                  type: array
                  items:
                    type: object
                    description: Configure the mapping relationship with the main component's major versions.
                    properties:
                      mainComponentMajorVersion:
                        type: string
                        description: major version of the main component
                      versions:
                        type: array
                        description: major versions of the current component
                        items:
                          type: string
        main:
          description: Main component flag
          type: boolean
          x-nullable: false
        customSecret:
          type: boolean
          description: whether the component supports custom secret
          x-nullable: false
    integerOption:
      type: object
      required:
        - min
        - max
        - default
        - step
      properties:
        min:
          type: integer
        max:
          type: integer
        default:
          type: integer
        step:
          type: integer
    floatOption:
      type: object
      required:
        - min
        - max
        - default
        - step
      properties:
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        default:
          type: number
          format: double
        step:
          type: number
          format: double
    storageOption:
      type: object
      required:
        - name
        - title
        - min
        - step
        - max
        - default
      properties:
        title:
          $ref: '#/components/schemas/localizedDescription'
        name:
          type: string
        min:
          type: integer
        max:
          type: integer
        default:
          type: integer
        step:
          type: integer
    modeComponent:
      type: object
      required:
        - component
        - replicas
        - cpu
        - memory
        - storages
        - hideEnpoints
        - hideOnCreate
      properties:
        component:
          type: string
        shards:
          $ref: '#/components/schemas/integerOption'
        replicas:
          $ref: '#/components/schemas/integerOption'
        cpu:
          $ref: '#/components/schemas/floatOption'
        memory:
          $ref: '#/components/schemas/floatOption'
        hideEnpoints:
          type: boolean
        hideOnCreate:
          type: boolean
        storages:
          type: array
          items:
            $ref: '#/components/schemas/storageOption'
    modeOption:
      type: object
      required:
        - name
        - title
        - description
        - components
      properties:
        name:
          type: string
        title:
          $ref: '#/components/schemas/localizedDescription'
        description:
          $ref: '#/components/schemas/localizedDescription'
        components:
          type: array
          items:
            $ref: '#/components/schemas/modeComponent'
        proxy:
          required:
            - enabled
          type: object
          properties:
            enabled:
              type: boolean
        versions:
          type: array
          items:
            type: string
        extra:
          type: object
          additionalProperties: true
    accountOption:
      type: object
      required:
        - enabled
        - accountNamePattern
        - create
        - resetPassword
        - delete
      properties:
        maxSuperUserAccount:
          type: integer
          format: int32
          minimum: 0
          default: 2
          description: |
            number of super user accounts cloud create.
            If not set, use default value.
            If set to 0, it means not allowed to create super user account.
          nullable: true
        enabled:
          type: boolean
        privileges:
          type: array
          items:
            type: string
        accountNamePattern:
          type: string
        create:
          type: boolean
        resetPassword:
          type: boolean
        delete:
          type: boolean
        displayRootAccount:
          type: boolean
          x-omitempty: false
        resetRootPassword:
          type: boolean
          x-omitempty: false
    databaseOption:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        databaseNamePattern:
          type: string
    dmsOption:
      type: object
      required:
        - enabled
        - protocol
      properties:
        enabled:
          type: boolean
        protocol:
          type: string
        feature:
          type: object
          additionalProperties: {}
        defaultAccount:
          type: string
          x-nullable: true
        tableMetadata:
          type: array
          items:
            type: object
    backupMethodOption:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        compatibleMethod:
          description: The compatible full backup method for incremental backup method
          type: string
        description:
          $ref: '#/components/schemas/localizedDescription'
    backupOption:
      description: If present, it must be set defaultMethod and fullMethod
      type: object
      required:
        - defaultMethod
        - fullMethod
      properties:
        defaultMethod:
          type: string
        restoreOption:
          type: object
          properties:
            crossModeRecovery:
              type: array
              description: cross mode recovery options
              items:
                type: string
        fullMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
        incrementalMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
        continuousMethod:
          type: array
          items:
            $ref: '#/components/schemas/backupMethodOption'
    benchOption:
      type: object
      required:
        - pgbench
        - sysbench
        - tpcc
        - ycsb
      properties:
        pgbench:
          type: boolean
        sysbench:
          type: boolean
        tpcc:
          type: boolean
        ycsb:
          type: boolean
    engineOptionsServicePattern:
      type: string
      description: service name pattern, e.g. ClusterName-ComponentName or .ClusterName`
      default: cluster-component
      enum:
        - cluster-component
        - cluster
        - cluster-component-service
    endpointOption:
      type: object
      required:
        - title
        - component
        - portName
        - type
        - port
      properties:
        title:
          $ref: '#/components/schemas/localizedDescription'
        component:
          type: string
        portName:
          type: string
        type:
          type: array
          items:
            type: string
        port:
          type: integer
          format: int32
        supportsSystemUse:
          type: boolean
          description: whether the endpoint supports system use, such as health check, dms, databases & accounts management etc.
        servicePattern:
          $ref: '#/components/schemas/engineOptionsServicePattern'
        serviceNameRegex:
          type: string
          description: ServiceName regular expression
        serviceName:
          type: string
          description: service suffix, defined in ComponentDefinition
        selector:
          type: object
          additionalProperties:
            type: string
          description: selector of k8s service
        followNetworkMode:
          type: boolean
          default: false
          description: whether the endpoint follows the network mode of the component
    networkModeOption:
      type: object
      required:
        - supported
      properties:
        supported:
          type: array
          items:
            $ref: '#/components/schemas/networkMode'
    componentOpsOption:
      type: object
      required:
        - component
      properties:
        component:
          type: string
        disableHA:
          type: boolean
          default: false
        inPlace:
          type: boolean
          description: parameter for rebuild instance ops
          default: false
        needBackupWhenInPlace:
          type: boolean
          description: indicate whether backup is required when Inplace is true
          default: false
        backupMethod:
          type: object
          description: indicate the backup method when inplace is true
          properties:
            full:
              type: array
              items:
                type: string
              description: full backup methods
            incremental:
              type: array
              description: incremental backup methods
              items:
                type: string
        restoreEnv:
          type: array
          nullable: true
          items:
            type: object
            required:
              - name
              - value
            properties:
              name:
                type: string
                description: env name
              value:
                type: string
                description: env value
        dependentCustomOps:
          type: object
          properties:
            opsDefName:
              type: string
              description: opsDefinition name
            component:
              type: string
              description: component type name
            when:
              type: string
              description: |
                go template conditional judgment expression, such as $.root.inPlace == true
                available built-in objects that can be referenced in the expression include:
                - cluster: cluster record
                - params: ops input parameters
                - component: current component
                - root: current object
            params:
              description: custom ops parameters
              items:
                properties:
                  name:
                    type: string
                    description: parameter name.
                  value:
                    type: string
                    description: |
                      parameter value, you can define a go template expression to refer the variable of the current ops. 
                      available built-in objects that can be referenced in the expression include:
                      - cluster: cluster record
                      - params: ops input parameters
                      - component: current component
                      - root: current object
                type: object
              type: array
    licenseOption:
      type: object
      required:
        - component
        - opsDefName
      properties:
        component:
          type: string
        opsDefName:
          type: string
    engineOptionsMetricsQueryType:
      type: string
      description: |
        Specifies the type of metrics query to be performed.
        'instant' for a single point in time, 'range' for a time range.
      enum:
        - instant
        - range
    metricsOptionQuery:
      type: object
      properties:
        queryPattern:
          type: string
          x-nullable: false
        queryType:
          $ref: '#/components/schemas/engineOptionsMetricsQueryType'
    metricsOption:
      type: object
      properties:
        replicationLag:
          $ref: '#/components/schemas/metricsOptionQuery'
    dashboardOption:
      type: object
      required:
        - component
        - dashboardUid
        - variables
      properties:
        component:
          type: string
        dashboardUid:
          type: string
        variables:
          type: object
          additionalProperties:
            type: string
        instancePanels:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              panels:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    id:
                      type: string
    logOption:
      type: object
      required:
        - component
        - error
        - slow
        - audit
        - running
      properties:
        component:
          type: string
        error:
          type: boolean
        slow:
          type: boolean
        audit:
          type: boolean
        running:
          type: boolean
    parameterConfig:
      required:
        - configSpecName
        - templateRef
      type: object
      properties:
        configSpecName:
          type: string
          description: name of config spec, included in configSpecs, equal to componentDefinition.configs[x].name
        templateRef:
          type: string
          description: name of the referenced configuration template configMap object, equal to componentDefinition.configs[x].templateRef
    parameterTemplate:
      type: object
      required:
        - name
        - description
        - majorVersion
        - family
        - configs
        - defaultUse
      properties:
        name:
          type: string
          description: name of default parameter template
        description:
          $ref: '#/components/schemas/localizedDescription'
        majorVersion:
          type: string
          description: match the major version set in the component
        family:
          type: string
          description: a alias with major version, used to distinguish between different parameter templates
        configs:
          type: array
          description: parameterConfig contains specific configuration templates for each configuration file, primarily consisting of parameter templates and parameter constraints, mainly used by initializing the default template from addon.
          items:
            $ref: '#/components/schemas/parameterConfig'
        defaultUse:
          type: boolean
          description: whether the default parameter template is used by default, set in componentDefinition.configs, only one default parameter template can be set in certain family.
        versions:
          type: array
          description: deprecated
          items:
            type: string
    parameterConstraint:
      type: object
      required:
        - family
        - majorVersion
        - configSpecName
        - regex
        - configFileName
      properties:
        family:
          type: string
          description: a alias with major version, used to distinguish between different parameter templates
        majorVersion:
          type: string
          description: match the major version set in the component
        versions:
          type: array
          description: deprecated
          items:
            type: string
        configSpecName:
          type: string
          description: name of config spec, included in configSpecs, equal to componentDefinition.configs[x].name
        constraintRef:
          type: string
          description: constraint of the configConstraint, equal to componentDefinition.configs[x].constraintRef
        regex:
          type: string
          description: regular expression of the parameters, mainly used by the frontend for parameter parsing.
        configFileName:
          type: string
          description: name of configuration file
    exprParam:
      type: object
      required:
        - name
        - description
        - configSpecName
        - validVariables
        - defaultExpression
      properties:
        name:
          type: string
          description: name of the parameter
        description:
          type: string
          description: description of each variables and expression
        configSpecName:
          type: string
          description: name of config spec, included in configSpecs, equal to componentDefinition.configs[x].name
        validVariables:
          description: valid variables in the expression
          type: array
          items:
            type: string
        defaultExpression:
          type: string
          description: default expression of the parameter
        unit:
          type: string
          description: unit of parameter
    occupationParam:
      type: object
      required:
        - name
        - expression
        - configSpecName
      properties:
        name:
          type: string
          description: name of the parameter
        expression:
          type: string
          description: expression of the parameter value
        configSpecName:
          type: string
          description: name of config spec, included in configSpecs, equal to componentDefinition.configs[x].name
    parameterOption:
      type: object
      required:
        - component
        - exportTpl
        - enableTemplate
        - configSpecs
      properties:
        component:
          type: string
          description: component type
        exportTpl:
          description: If set to true, the current parameters of the component can be exported and saved as a parameter template.
          type: boolean
        enableTemplate:
          description: If set to true, the parameter templates of the component can be used. Mainly used by frontend.
          type: boolean
        configSpecs:
          type: array
          description: all parameter configuration specs of this component
          items:
            type: string
        disableHA:
          type: boolean
          default: false
        templates:
          type: array
          description: parameter templates, including default parameter templates for different major versions or default parameter templates for different purposes.
          items:
            $ref: '#/components/schemas/parameterTemplate'
        constraints:
          type: array
          description: parameter constraints, mainly used to verify the correctness of the parameter value.
          items:
            $ref: '#/components/schemas/parameterConstraint'
        initOptions:
          type: object
          description: Parameters to be initialized when cluster is created
          additionalProperties:
            type: object
            properties: {}
        exprParams:
          type: array
          description: Parameters to be calculated based on the instance specifications
          items:
            $ref: '#/components/schemas/exprParam'
        occupationParams:
          type: array
          description: occupationParams means that the parameter value is different from the dedicated specification under the shared specification
          items:
            $ref: '#/components/schemas/occupationParam'
    engineOptionsDisasterRecoverySource:
      type: object
      properties:
        metricSource:
          $ref: '#/components/schemas/metricsOptionQuery'
    engineOptionsDisasterRecoveryStatus:
      type: object
      properties:
        delay:
          $ref: '#/components/schemas/engineOptionsDisasterRecoverySource'
        replicationPoint:
          $ref: '#/components/schemas/engineOptionsDisasterRecoverySource'
    disasterRecoveryOption:
      type: object
      required:
        - enabled
      properties:
        enabled:
          type: boolean
        instanceLimit:
          type: integer
          default: 8
        status:
          $ref: '#/components/schemas/engineOptionsDisasterRecoveryStatus'
    cdcClusterConfig:
      type: object
      properties:
        component:
          type: string
        configName:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
    cdcClusterAccount:
      type: object
      properties:
        component:
          type: string
        defaultAccountName:
          type: array
          items:
            type: string
    cdcNetworkType:
      type: string
      enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - FixedPodIP
    cdcClusterEndpoint:
      type: object
      properties:
        role:
          type: string
        component:
          type: string
        portName:
          type: string
        port:
          type: integer
          format: int32
        authDatabase:
          type: string
          nullable: true
        networkType:
          $ref: '#/components/schemas/cdcNetworkType'
    cdcSqlExecutor:
      type: object
      properties:
        sql:
          type: array
          items:
            type: string
        result:
          type: array
          items:
            type: string
        authDatabase:
          type: string
          nullable: true
    cdcLifecycleAction:
      type: object
      properties:
        name:
          type: string
        sqlExecutor:
          $ref: '#/components/schemas/cdcSqlExecutor'
    cdcLifecycle:
      type: object
      properties:
        preStart:
          $ref: '#/components/schemas/cdcLifecycleAction'
        postStart:
          $ref: '#/components/schemas/cdcLifecycleAction'
        preStop:
          $ref: '#/components/schemas/cdcLifecycleAction'
        postStop:
          $ref: '#/components/schemas/cdcLifecycleAction'
    cdcSettings:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/cdcClusterConfig'
        account:
          $ref: '#/components/schemas/cdcClusterAccount'
        endpoint:
          $ref: '#/components/schemas/cdcClusterEndpoint'
        lifecycle:
          $ref: '#/components/schemas/cdcLifecycle'
    cdcConfigResourceType:
      type: string
      enum:
        - ConfigMap
        - Secret
    cdcConfigFormatType:
      type: string
      enum:
        - Ini
        - Toml
        - Properties
    cdcToolTemplate:
      type: object
      properties:
        image:
          type: string
        command:
          type: array
          items:
            type: string
        args:
          type: array
          items:
            type: string
        replicas:
          type: integer
          format: int32
          nullable: true
        configFileName:
          type: string
        configFilePath:
          type: string
        configResourceType:
          $ref: '#/components/schemas/cdcConfigResourceType'
        configFormat:
          $ref: '#/components/schemas/cdcConfigFormatType'
        localRecoveryEnabled:
          description: whether to enable local recovery feature
          type: boolean
        localRecoveryStorageClass:
          type: string
          nullable: true
        localRecoveryStorageSize:
          description: size of local recovery storage, the unit is MiB
          type: integer
          nullable: true
        localRecoveryPath:
          type: string
        LogPath:
          type: string
        startupTimeoutMinutes:
          type: integer
          format: int32
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
    cdcWorkerTemplate:
      type: object
      properties:
        usingTool:
          $ref: '#/components/schemas/cdcToolTemplate'
    cdcOption:
      type: object
      properties:
        versions:
          type: array
          items:
            type: string
        source:
          $ref: '#/components/schemas/cdcSettings'
        sink:
          $ref: '#/components/schemas/cdcSettings'
        worker:
          $ref: '#/components/schemas/cdcWorkerTemplate'
    engineOption:
      type: object
      required:
        - engineName
        - title
        - description
        - versions
        - components
        - modes
        - dms
        - endpoints
        - promote
        - stop
        - start
        - restart
        - hscale
        - vscale
        - dashboards
        - logs
        - parameters
      properties:
        engineName:
          type: string
        title:
          type: string
        description:
          $ref: '#/components/schemas/localizedDescription'
        versions:
          type: array
          items:
            type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/componentOption'
        modes:
          type: array
          items:
            $ref: '#/components/schemas/modeOption'
        account:
          $ref: '#/components/schemas/accountOption'
        database:
          $ref: '#/components/schemas/databaseOption'
        dms:
          $ref: '#/components/schemas/dmsOption'
        backup:
          description: If this field is null, backup is not supported.
          $ref: '#/components/schemas/backupOption'
        bench:
          $ref: '#/components/schemas/benchOption'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/endpointOption'
        networkMode:
          $ref: '#/components/schemas/networkModeOption'
        promote:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        stop:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        start:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        restart:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        hscale:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        vscale:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        license:
          type: object
          required:
            - secretName
            - fileName
          properties:
            required:
              type: boolean
              description: Indicate whether the current cluster requires users to input the license
            secretName:
              type: string
              description: support to refer the cluster name with variable ${clusterName}
            fileName:
              type: string
              description: the license file name
            components:
              type: array
              items:
                $ref: '#/components/schemas/licenseOption'
        storageExpansion:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        rebuildInstance:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        upgrade:
          type: array
          items:
            $ref: '#/components/schemas/componentOpsOption'
        metrics:
          $ref: '#/components/schemas/metricsOption'
        dashboards:
          type: array
          items:
            $ref: '#/components/schemas/dashboardOption'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/logOption'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/parameterOption'
        disasterRecovery:
          $ref: '#/components/schemas/disasterRecoveryOption'
        cdc:
          type: array
          items:
            $ref: '#/components/schemas/cdcOption'
    engineOptionList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of engineOption objects in the list
          items:
            $ref: '#/components/schemas/engineOption'
    engineOptionHistory:
      required:
        - modifierId
        - modifierEmail
        - option
        - createdAt
      type: object
      properties:
        modifierId:
          type: string
        modifierEmail:
          type: string
        option:
          $ref: '#/components/schemas/engineOption'
        createdAt:
          type: string
          format: date-time
    engineOptionHistoryList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of engineOptionHistory objects in the list
          items:
            $ref: '#/components/schemas/engineOptionHistory'
    engineLicense:
      type: object
      required:
        - engineName
        - name
      properties:
        engineName:
          type: string
        name:
          type: string
        key:
          type: string
          x-nullable: false
        description:
          type: string
        expiredAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        id:
          type: string
          x-nullable: false
        idString:
          type: string
    engineLicenseList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          description: Items is the list of engineLicense objects in the list
          items:
            $ref: '#/components/schemas/engineLicense'
    engineLicenseCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the engine license
        engineName:
          type: string
          description: Name of the engine
        description:
          type: string
          description: Description of the engine license
        expiredAt:
          type: string
          format: date-time
          description: Expiration date and time of the license (optional)
      required:
        - name
        - engineName
    engineLicenseFormData:
      description: the data of the engine license
      type: object
      properties:
        licenseFile:
          type: string
          format: binary
          description: The license file to upload
      required:
        - licenseFile
    engineType:
      type: string
      description: engine type
      enum:
        - RDBMS
        - search-engine
        - key-value
        - time-series
        - streaming
        - LLM
        - vector
        - document
        - graph
        - other
    engineStatus:
      type: string
      description: engine addon status in K8s
      enum:
        - Disabled
        - Enabled
        - Failed
        - Enabling
        - Disabling
    engine:
      type: object
      properties:
        id:
          title: ID
          type: string
          description: engine ID
        description:
          title: description
          type: string
          description: the engine description
        name:
          title: Name
          type: string
          description: engine Name
        version:
          title: Version
          type: string
          description: engine version
        kbVersionConstraint:
          title: kbVersionConstraint
          type: string
          description: KubeBlocks version constrain
        type:
          title: Type
          $ref: '#/components/schemas/engineType'
        installed:
          type: boolean
          description: whether the engine is installed
        provider:
          title: provider
          type: string
          description: engine addon provider
        status:
          $ref: '#/components/schemas/engineStatus'
        availableVersion:
          title: availableVersion
          type: array
          description: engine available versions
          items:
            type: string
        upgradeHistory:
          title: upgradeHistory
          type: string
          description: engine upgrade history
        errMsg:
          title: errMsg
          description: engine error messages when the engine status is failed
          type: string
        clusterVersions:
          title: clusterVersions
          type: array
          description: clusterversion in the engines
          items:
            type: string
    engineList:
      items:
        $ref: '#/components/schemas/engine'
      type: array
    engineActionType:
      type: string
      description: engine action type
      enum:
        - enable
        - disable
        - upgrade
    license:
      description: License info
      type: object
      properties:
        clusterID:
          type: string
          description: The kubernetes cluster ID
        email:
          type: string
          description: The licensed user email
        userName:
          type: string
          description: The licensed user or organization name
        unit:
          type: string
          description: The licensed unit, such as CPU or Node
        quantity:
          type: string
          description: The licensed total count of the unit
        engines:
          type: array
          description: The supported engines
          items:
            type: string
        notAfter:
          type: string
          format: date-time
          description: The license expiration time
        notBefore:
          type: string
          format: date-time
          description: The license start time
        used:
          type: number
          description: The used count of the unit
          format: double
        license:
          type: string
          description: The license key
        mode:
          type: string
          description: The license mode
    licenseRequest:
      required:
        - key
      properties:
        key:
          x-nullable: false
          type: string
          description: License key
    class:
      type: object
      properties:
        engine:
          type: string
        code:
          type: string
        codeShort:
          type: string
        mode:
          type: string
        cpu:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        cpuRequest:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        cpuLimit:
          type: number
          multipleOf: 0.1
          minimum: 0.1
          format: double
        memory:
          type: number
          multipleOf: 0.1
          description: memory, unit is Gi
          minimum: 0.05
          format: double
        memoryRequest:
          type: number
          multipleOf: 0.1
          description: memory request, unit is Gi
          minimum: 0.05
          format: double
        memoryLimit:
          type: number
          multipleOf: 0.1
          description: memory limit, unit is Gi
          minimum: 0.05
          format: double
        component:
          type: string
        instanceType:
          type: string
    classBatch:
      type: object
      properties:
        engine:
          type: string
        mode:
          type: string
        component:
          type: string
        instanceType:
          type: string
        cpuOverCommit:
          type: number
          multipleOf: 0.1
          format: double
        memoryOverCommit:
          type: number
          multipleOf: 0.1
          format: double
    OccupationType:
      type: string
      enum:
        - general
        - exclusive
    serverConfiguration:
      type: object
      properties:
        architectureType:
          type: string
          description: Server architecture type, can be empty.
    instanceTypes:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the instance type.
        createdAt:
          type: string
          format: date-time
          description: Creation time.
        description:
          type: string
          maxLength: 255
          description: Any characters, no more than 255 characters long.
        displayName:
          type: string
          maxLength: 63
          description: Any characters, no more than 63 characters long.
        occupationType:
          $ref: '#/components/schemas/OccupationType'
        name:
          type: string
          pattern: ^[a-z0-9]{1,8}$
          description: Consists of lowercase English letters and numbers, 1-8 characters long. Used to add to the specification code.
        serverConfiguration:
          $ref: '#/components/schemas/serverConfiguration'
    createInstanceType:
      type: object
      properties:
        description:
          type: string
          maxLength: 255
          description: Any characters, no more than 255 characters long.
        displayName:
          type: string
          maxLength: 63
          description: Any characters, no more than 63 characters long.
        occupationType:
          $ref: '#/components/schemas/OccupationType'
        name:
          type: string
          pattern: ^[a-z0-9]{1,8}$
          description: Consists of lowercase English letters and numbers, 1-8 characters long. Used to add to the specification code.
        serverConfiguration:
          $ref: '#/components/schemas/serverConfiguration'
        engines:
          type: array
          items:
            type: string
          description: List of engine names supported by this instance type.
        sourceInstanceTypeName:
          type: array
          items:
            type: string
          description: The Names of the instance types to be copied. All specifications of these instances will be copied to the new instance type.
    provider:
      description: The cloud provider that the environment is running on.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - logo
        - enabled
        - supportARN
        - environmentCount
        - regionCount
        - zoneCount
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          description: The name of the cloud provider.
        nameCN:
          type: string
          description: The Chinese name of the cloud provider.
        nameEN:
          type: string
          description: The English name of the cloud provider.
        logo:
          type: string
          description: The logo of the cloud provider.
        enabled:
          type: boolean
          description: Whether the cloud provider is enabled.
        supportARN:
          type: boolean
          description: Whether the cloud provider supports ARN.
        environmentCount:
          type: integer
          description: The number of environments that the cloud provider has.
        regionCount:
          type: integer
          description: The number of regions that the cloud provider has.
        zoneCount:
          type: integer
          description: The number of zones that the cloud provider has.
        createdAt:
          type: string
          format: date-time
          description: The time when the cloud provider was created.
        updatedAt:
          type: string
          format: date-time
          description: The time when the cloud provider was last updated.
    providerList:
      description: The list of cloud providers.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/provider'
          description: The list of cloud providers.
    providerCreate:
      description: The cloud provider that needs to be created.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - logo
        - enabled
        - supportARN
      properties:
        name:
          type: string
          description: The name of the cloud provider.
        logo:
          type: string
          description: The logo of the cloud provider.
        enabled:
          type: boolean
          description: Whether the cloud provider is enabled.
        nameCN:
          type: string
          description: The Chinese name of the cloud provider.
        nameEN:
          type: string
          description: The English name of the cloud provider.
        supportARN:
          type: boolean
          description: Whether the cloud provider supports ARN.
    providerUpdate:
      description: The cloud provider that needs to be updated.
      type: object
      required:
        - nameCN
        - nameEN
        - logo
        - enabled
        - supportARN
      properties:
        logo:
          type: string
          description: The logo of the cloud provider.
        enabled:
          type: boolean
          description: Whether the cloud provider is enabled.
        nameCN:
          type: string
          description: The Chinese name of the cloud provider.
        nameEN:
          type: string
          description: The English name of the cloud provider.
        supportARN:
          type: boolean
          description: Whether the cloud provider supports ARN.
    region:
      description: The region that the cloud provider has.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - provider
        - enabled
        - zoneCount
        - group
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          description: The name of the region.
        nameCN:
          type: string
          description: The Chinese name of the region.
        nameEN:
          type: string
          description: The English name of the region.
        provider:
          type: string
          description: The name of the cloud provider.
        group:
          type: string
          description: The group of the region.
        enabled:
          type: boolean
          description: Whether the region is enabled.
        zoneCount:
          type: integer
          description: The number of zones that the region has.
        createdAt:
          type: string
          format: date-time
          description: The time when the region was created.
        updatedAt:
          type: string
          format: date-time
          description: The time when the region was last updated.
    regionList:
      description: The list of regions.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/region'
          description: The list of regions.
    regionCreate:
      description: The region that needs to be created.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - enabled
        - group
      properties:
        name:
          type: string
          description: The name of the region.
        nameCN:
          type: string
          description: The Chinese name of the region.
        nameEN:
          type: string
          description: The English name of the region.
        enabled:
          type: boolean
          description: Whether the region is enabled.
        group:
          type: string
          description: The group of the region.
    regionUpdate:
      description: The region that needs to be updated.
      type: object
      required:
        - nameCN
        - nameEN
        - group
        - enabled
      properties:
        nameCN:
          type: string
          description: The Chinese name of the region.
        nameEN:
          type: string
          description: The English name of the region.
        group:
          type: string
          description: The group of the region.
        enabled:
          type: boolean
          description: Whether the region is enabled.
    zone:
      description: The zone that the region has.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - enabled
        - region
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          description: The name of the zone.
        nameCN:
          type: string
          description: The Chinese name of the zone.
        nameEN:
          type: string
          description: The English name of the zone.
        enabled:
          type: boolean
          description: Whether the zone is enabled.
        region:
          type: string
          description: The name of the region.
        createdAt:
          type: string
          format: date-time
          description: The time when the zone was created.
        updatedAt:
          type: string
          format: date-time
          description: The time when the zone was last updated.
    zoneList:
      description: The list of zones.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/zone'
          description: The list of zones.
    zoneCreate:
      description: The zone that needs to be created.
      type: object
      required:
        - name
        - nameCN
        - nameEN
        - enabled
      properties:
        name:
          type: string
          description: The name of the zone.
        nameCN:
          type: string
          description: The Chinese name of the zone.
        nameEN:
          type: string
          description: The English name of the zone.
        enabled:
          type: boolean
          description: Whether the zone is enabled.
    zoneUpdate:
      description: The zone that needs to be updated.
      type: object
      required:
        - nameCN
        - nameEN
        - enabled
      properties:
        nameCN:
          type: string
          description: The Chinese name of the zone.
        nameEN:
          type: string
          description: The English name of the zone.
        enabled:
          type: boolean
          description: Whether the zone is enabled.
    regionGroup:
      description: The region group
      type: object
      required:
        - group
        - groupCN
        - groupEN
        - provider
      properties:
        group:
          type: string
          description: The name of the region group
        groupCN:
          type: string
          description: The Chinese name of the region group.
        groupEN:
          type: string
          description: The English name of the region group.
        provider:
          type: string
          description: The name of the provider.
    regionGroupList:
      description: The list of region group.
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/regionGroup'
          description: The list of region group.
    regionGroupCreate:
      description: The region group that needs to be created.
      type: object
      required:
        - group
        - groupCN
        - groupEN
      properties:
        group:
          type: string
          description: The name of the region group.
        groupCN:
          type: string
          description: The Chinese name of the region group.
        groupEN:
          type: string
          description: The English name of the region group.
    regionGroupUpdate:
      description: The region group that needs to be updated.
      type: object
      properties:
        groupCN:
          type: string
          description: The Chinese name of the region group.
        groupEN:
          type: string
          description: The English name of the region group.
    llm:
      description: llm
      properties:
        id:
          description: ID of the llm
          title: ID
          type: string
        name:
          description: Name of the llm
          title: Name
          type: string
        type:
          description: Type of the llm
          title: Type
          type: string
        enabled:
          description: Whether this LLM is enabled
          title: Enabled
          type: boolean
        config:
          description: Config
          title: Config
          type: object
          additionalProperties:
            type: object
        createdAt:
          description: |-
            CreatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
        updatedAt:
          description: |-
            UpdatedAt is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system. Read-only. Null for lists
          format: date-time
          type: string
      required:
        - id
        - name
        - config
        - type
        - enabled
      type: object
    llmList:
      required:
        - items
      type: object
      properties:
        items:
          type: array
          x-nullable: false
          description: Items is the list of llm objects
          items:
            $ref: '#/components/schemas/llm'
    monitorDataSinkCreate:
      description: External Endpoint create option
      type: object
      required:
        - exporterUrl
        - monitorDataSinkType
        - environmentName
      properties:
        exporterUrl:
          type: string
          description: url for exporter(eg. url for ElasticSearch)
        username:
          type: string
          description: Username
          nullable: true
        environmentName:
          type: string
          description: Name for relative Environment
        monitorDataSinkType:
          type: string
          description: type of monitor data sink(logs or metrics)
        password:
          type: string
          description: Password
          nullable: true
        apiKey:
          type: string
          description: apiKey
          nullable: true
        indexName:
          type: string
          description: indexName for ElasticSearch
          nullable: true
    monitorDataSink:
      description: MonitorDataSink
      type: object
      required:
        - id
        - exporterUrl
        - monitorDataSinkType
        - environmentID
      properties:
        id:
          type: string
          description: MonitorDataSink ID
        exporterUrl:
          type: string
          description: url for exporter(eg. url for ElasticSearch)
        environmentID:
          type: string
          description: ID for relative Environment
        indexName:
          type: string
          description: indexName for ElasticSearch
          nullable: true
        monitorDataSinkType:
          type: string
          description: type of monitor data sink(logs or metrics)
    monitorDataSinkUpdate:
      description: External Endpoint update option
      type: object
      required:
        - environmentName
        - monitorDataSinkType
      properties:
        monitorDataSinkType:
          type: string
          description: type of monitor data sink(logs or metrics)
          nullable: true
        environmentName:
          type: string
          description: Name for relative Environment
        exporterUrl:
          type: string
          description: url for exporter(eg. url for ElasticSearch)
        name:
          type: string
          description: Endpoint name
          nullable: true
        username:
          type: string
          description: Username
          nullable: true
        password:
          type: string
          description: Password
          nullable: true
        apiKey:
          type: string
          description: apiKey
          nullable: true
        indexName:
          type: string
          description: indexName for ElasticSearch
          nullable: true
    monitorDataSinkList:
      description: External Endpoint list
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/monitorDataSink'
      required:
        - items
    engineVersionCreate:
      description: EngineVersionRecord create option
      type: object
      required:
        - engineName
        - version
        - kbVersionConstraint
        - chartUrl
      properties:
        engineName:
          type: string
          description: Name of the engine
        version:
          type: string
          description: Version of the engine
        kbVersionConstraint:
          type: string
          description: Version constraint for KB
        clusterChartUrl:
          type: string
          description: URL for the cluster chart
          nullable: true
        chartUrl:
          type: string
          description: URL for the chart
        setValues:
          type: string
          description: Configuration values set for the engine
          nullable: true
        chartsImage:
          type: string
          description: Image associated with the charts
          nullable: true
        setImageRegistry:
          type: boolean
          description: Determines if the image registry is set
          default: true
          nullable: true
    engineVersion:
      description: EngineVersionRecord
      type: object
      required:
        - id
        - engineName
        - version
        - kbVersionConstraint
        - chartUrl
      properties:
        id:
          type: integer
          format: int64
          description: Primary Key for the EngineVersionRecord
        engineName:
          type: string
          description: Name of the engine
        version:
          type: string
          description: Version of the engine
        kbVersionConstraint:
          type: string
          description: Version constraint for KB
        clusterChartUrl:
          type: string
          description: URL for the cluster chart
          nullable: true
        chartUrl:
          type: string
          description: URL for the chart
        setValues:
          type: string
          description: Configuration values set for the engine
          nullable: true
        chartsImage:
          type: string
          description: Image associated with the charts
          nullable: true
        setImageRegistry:
          type: boolean
          description: Determines if the image registry is set
          default: true
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the record was created
          nullable: true
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the record was last updated
          nullable: true
    engineVersionDelete:
      description: EngineVersionRecord delete option
      type: object
      required:
        - engineName
        - version
      properties:
        engineName:
          type: string
          description: Name of the engine
        version:
          type: string
          description: Version of the engine
    engineVersionUpdate:
      description: EngineVersionRecord update option
      type: object
      required:
        - engineName
        - version
      properties:
        engineName:
          type: string
          description: Name of the engine
        version:
          type: string
          description: Version of the engine
        kbVersionConstraint:
          type: string
          description: Version constraint for KB
          nullable: true
        clusterChartUrl:
          type: string
          description: URL for the cluster chart
          nullable: true
        chartUrl:
          type: string
          description: URL for the chart
          nullable: true
        setValues:
          type: string
          description: Configuration values set for the engine
          nullable: true
        chartsImage:
          type: string
          description: Image associated with the charts
          nullable: true
        setImageRegistry:
          type: boolean
          description: Determines if the image registry is set
          default: true
          nullable: true
    engineVersionList:
      description: EngineVersionRecord list
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/engineVersion'
      required:
        - items
    featurePreReleaseType:
      type: string
      description: Indicates the maturity level of a feature
      enum:
        - ALPHA
        - BETA
        - ''
        - DEPRECATED
    feature:
      properties:
        name:
          description: Name of a feature
          type: string
        enabled:
          description: The enablement state for the feature
          type: boolean
        preRelease:
          $ref: '#/components/schemas/featurePreReleaseType'
      required:
        - name
        - enabled
        - preRelease
      type: object
    featureList:
      description: A list of feature
      properties:
        items:
          description: The list of feature
          items:
            $ref: '#/components/schemas/feature'
          type: array
      required:
        - items
      type: object
    inspection:
      description: inspection
      properties:
        id:
          type: integer
        orgName:
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        creator:
          type: string
        clusterID:
          type: string
        clusterName:
          type: string
        clusterEngine:
          type: string
        result:
          type: string
        severity:
          type: string
        status:
          type: string
        isAuto:
          type: boolean
        scriptID:
          type: integer
        scriptName:
          type: string
        scriptCategory:
          type: string
        reason:
          type: string
        suggestion:
          type: string
        unit:
          type: string
      type: object
    autoInspectionRunUnit:
      type: string
      description: Specifies the unit of time for the auto inspection schedule.
      enum:
        - hour
        - day
        - week
        - month
    autoInspection:
      properties:
        id:
          type: integer
        orgName:
          type: string
        updatedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        creator:
          type: string
        schedule:
          type: string
        runEvery:
          $ref: '#/components/schemas/autoInspectionRunUnit'
        daysOfWeek:
          type: array
          items:
            type: integer
        daysOfMonth:
          type: array
          items:
            type: integer
        hour:
          type: integer
        minute:
          type: integer
        savedDays:
          type: integer
        nextRunTime:
          format: date-time
          type: string
        enabled:
          type: boolean
    inspectionScript:
      properties:
        id:
          type: integer
        engine:
          type: string
        name:
          type: string
        category:
          type: string
        type:
          type: string
        scriptType:
          type: string
        reason:
          type: string
        suggestion:
          type: string
        enabled:
          type: boolean
        scriptName:
          type: string
        script:
          type: string
        statusCheckName:
          type: string
        statusCheck:
          type: string
        unit:
          type: string
    storageProviderSchemaProps:
      type: object
      description: the schema properties for storage provider parameters
      properties:
        default:
          type: object
          description: default value for the parameter
        description:
          type: string
          description: description of the parameter
        type:
          type: string
          description: type of the parameter
    storageProvider:
      type: object
      description: Storage Provider comprises specifications that provide guidance accessing remote storage.
      properties:
        id:
          type: string
          description: Unique identifier for the storage provider
        name:
          type: string
          description: Name of the storage provider
        credential:
          type: array
          description: defines which parameters are credential fields
          items:
            type: string
        schema:
          type: object
          description: the schema for the storage provider for creating a storage
          additionalProperties:
            $ref: '#/components/schemas/storageProviderSchemaProps'
        required:
          type: array
          description: defines which parameters are required
          items:
            type: string
    storageProviderList:
      type: array
      items:
        $ref: '#/components/schemas/storageProvider'
    storage:
      type: object
      description: Storage is a specification that provides guidance accessing remote storage.
      properties:
        id:
          type: string
          description: Unique identifier for the storage
        name:
          type: string
          description: Name of the storage
        storageProvider:
          type: string
          description: Name of the storage provider
        params:
          type: object
          description: the parameters for the storage
          additionalProperties:
            type: string
        envName:
          type: string
          description: the environment name that storage belongs to
        createdBy:
          type: string
          description: User who created the storage
          format: date-time
        clusterID:
          type: string
          description: the id of cluster that storage used
          nullable: true
        updatedBy:
          type: string
          description: User who updated the storage
          format: date-time
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
    storageList:
      type: array
      items:
        $ref: '#/components/schemas/storage'
    storageUpdate:
      description: storageUpdate is the schema for storage update request
      type: object
      properties:
        storageID:
          type: string
          description: the name of storage
        params:
          type: object
          description: the parameters to create the storage
          additionalProperties:
            type: string
        tags:
          type: object
          description: the tags for the storage
          additionalProperties:
            type: string
    storageCheckResult:
      description: storageCheck is the result when checking storage connectivity
      type: object
      properties:
        connected:
          type: boolean
          description: the result that the storage connectivity
        error:
          type: string
          description: the error msg
    importBackup:
      description: scan and import backup records from storage
      type: object
      properties:
        bucket:
          type: string
          description: the name of bucket
        path:
          type: string
          description: the path to backup's kubeblocks-backup.json
    CPU:
      type: object
      properties:
        cpu_capacity:
          type: string
        cpu_capacity_max:
          type: string
        cpu_assigned:
          type: string
        cpu_assigned_max:
          type: string
    Memory:
      type: object
      properties:
        mem_capacity:
          type: string
        memory_limit:
          type: string
        mem_assigned:
          type: string
    LogDisk:
      type: object
      properties:
        log_disk_capacity:
          type: string
        log_disk_assigned:
          type: string
        log_disk_in_use:
          type: string
    DataDisk:
      type: object
      properties:
        data_disk_capacity:
          type: string
        data_disk_allocated:
          type: string
        data_disk_in_use:
          type: string
        data_disk_health_status:
          type: string
        data_disk_abnormal_time:
          type: string
    Tenant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        mode:
          type: string
        create_at:
          type: string
        role:
          type: string
        primary_zone:
          type: string
        status:
          type: string
        primary_zone_proxy:
          type: string
        chart_set:
          type: string
        resource:
          type: string
        cpu:
          $ref: '#/components/schemas/CPU'
        memory:
          $ref: '#/components/schemas/Memory'
        log_disk:
          $ref: '#/components/schemas/LogDisk'
        data_disk:
          $ref: '#/components/schemas/DataDisk'
    TenantList:
      type: array
      description: result set of Tenant
      items:
        $ref: '#/components/schemas/Tenant'
    DmsObParameter:
      type: object
      required:
        - name
        - value
        - description
      properties:
        name:
          description: The name of the parameter
          type: string
        value:
          description: The value of the parameter
          type: string
        dataType:
          description: The type of the parameter value
          type: string
          x-omitempty: false
        description:
          description: The description of the parameter
          type: string
        enum:
          description: The value options of the parameter
          type: array
          x-omitempty: false
          items: {}
        maximum:
          description: The maximum value of the parameter
          format: double
          type: number
          nullable: true
        minimum:
          description: The minimum value of the parameter
          format: double
          type: number
          nullable: true
        immutable:
          description: Whether the parameter is an immutable parameter, immutable parameters cannot be modified
          type: boolean
        isVariable:
          description: Whether the parameter is variable or a parameter
          type: boolean
        editLevel:
          description: EditLevel represents the way the configuration item is modified.
          type: string
        readOnly:
          description: Whether the parameter is read-only
          type: boolean
          x-omitempty: false
    DmsParameterList:
      type: array
      items:
        $ref: '#/components/schemas/DmsObParameter'
    DmsObAlterParameter:
      type: object
      required:
        - parameter
        - isVariable
        - tenantName
        - mode
        - newValue
      properties:
        parameter:
          type: string
          description: parameter to alter
        newValue:
          type: string
          description: new value of parameter
        mode:
          type: string
          description: tenant mode
        tenantName:
          type: string
          description: tenant name
        isVariable:
          type: boolean
          description: whether the param is tenant variable or param
    summary:
      type: object
      properties:
        namespace:
          type: string
          description: The namespace of cluster
        name:
          type: string
          description: The name of cluster
        cpuRequests:
          type: string
          description: The CPU requests in configuration
        cpuLimits:
          type: string
          description: The CPU limits in configuration
        memoryRequests:
          type: string
          description: The memory requests in configuration
        memoryLimits:
          type: string
          description: The memory limits in configuration
        storageSize:
          type: string
          description: The storage size of volume
        replicas:
          type: integer
          description: The number of postgresql pods
        backupEndpoint:
          type: string
          description: The endpoint of backup
        backupPath:
          type: string
          description: The path where to store backup
        backupSchedule:
          type: string
          description: The backup schedule
        status:
          type: string
          description: The status of cluster
        creationTime:
          type: string
          description: The creation time of cluster
    metadb_instance:
      description: Instance is the information of metadb cluster instances
      properties:
        cluster:
          description: Cluster name
          type: string
        cpu:
          description: cpu with uint cores.
          type: string
        memory:
          description: Memory with uint Gi.
          type: string
        name:
          description: Instance name
          type: string
        node:
          description: node name
          type: string
        role:
          description: Role for instance
          type: string
      required:
        - cluster
        - cpu
        - memory
        - name
        - node
        - role
      type: object
    metadb_instanceList:
      description: ClusterList is a list of metadb cluster
      properties:
        items:
          description: Items is the list of metadb cluster objects in the list
          items:
            $ref: '#/components/schemas/metadb_instance'
          type: array
      required:
        - items
      type: object
    metadb_instanceMetrics:
      description: instance metrics
      properties:
        instanceName:
          description: the name of the instance
          type: string
        cpuUsage:
          description: cpu with uint cores.
          type: string
        memoryUsage:
          description: memory with uint Gi.
          type: string
      required:
        - instanceName
        - cpuUsage
        - memoryUsage
      type: object
    metadb_instanceMetricsList:
      description: instance metrics list
      properties:
        items:
          description: instanceMetrics list
          type: array
          items:
            $ref: '#/components/schemas/metadb_instanceMetrics'
      required:
        - items
      type: object
    metadb_backup:
      properties:
        path:
          description: the path of storaging backups
          type: string
        completionTimestamp:
          description: Date/time when the backup finished being processed.
          type: string
        creationTimestamp:
          description: Date/time when the backup was created.
          type: string
        duration:
          description: The duration time of backup execution. When converted to a string, the form is "1h2m0.5s".
          type: string
        name:
          description: name of the backup
          type: string
      required:
        - completionTimestamp
        - creationTimestamp
        - duration
        - name
      type: object
    metadb_backupList:
      description: BackupList is a list of backups
      properties:
        items:
          description: Items is the list of backup objects in the list
          items:
            $ref: '#/components/schemas/metadb_backup'
          type: array
      required:
        - items
      type: object
    backupConfig:
      type: object
      properties:
        provider:
          type: string
        schedule:
          type: string
        accessKeyId:
          type: string
        secretAccessKey:
          type: string
        endpoint:
          type: string
        region:
          type: string
        bucket:
          type: string
        autoBackup:
          default: false
          type: boolean
          description: enable or disable auto backup
        nextBackupTime:
          description: time for next backup
          type: string
        retentionDay:
          description: specify the retention days
          type: integer
          default: 5
          minimum: 2
        lastBackupTime:
          description: the time of last backup
          type: string
    metadb_restore:
      type: object
      properties:
        namespace:
          description: the namespace of new cluster, default value is original namespace
          type: string
        backupName:
          description: the name of backup
          type: string
        clusterName:
          description: the name of new cluster
          type: string
        timestamp:
          description: determine backup files based on timestamp
          type: string
        duration:
          description: the duration time of restore execution
          type: string
        completionTimestamp:
          description: completion time
          format: date-time
          type: string
        startTimestamp:
          description: start time
          format: date-time
          type: string
        cpu:
          type: number
          format: double
        memory:
          type: number
          format: double
        storage:
          minimum: 1
          type: number
          format: double
        replicas:
          type: integer
          description: the number of postgresql pods
      required:
        - clusterName
    volumeExpand:
      type: object
      properties:
        size:
          description: the new volume size of cluster
          type: string
    vscale:
      type: object
      properties:
        cpu:
          description: the cpu resource of vertical scale
          type: string
        memory:
          description: the memory resource of vertical scale
          type: string
      required:
        - cpu
        - memory
    platformParameterCategory:
      enum:
        - recycle-bin
      type: string
      description: platformParameter category, representing the platformParameter group, such as 'recycle bin'
    platformParameter:
      description: platformParameter item
      type: object
      required:
        - id
        - name
        - category
        - description
        - constraints
        - type
      properties:
        id:
          type: string
          description: platformParameter ID
        name:
          type: string
          description: platformParameter name
        category:
          $ref: '#/components/schemas/platformParameterCategory'
        type:
          type: string
          description: type of platformParameter value
        constraints:
          type: object
          description: platformParameter constraints including min, max, enum, default value
          properties:
            min:
              type: string
              description: platformParameter min value
            max:
              type: string
              description: platformParameter max value
            enum:
              type: array
              items:
                type: string
              description: platformParameter enum constraints
            default:
              type: string
              description: platformParameter default value
        value:
          type: string
          description: platformParameter value
        description:
          type: string
          description: platformParameter description
    platformParameterList:
      description: platformParameter list
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/platformParameter'
      required:
        - items
    platformParameterUpdate:
      description: platformParameter update
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: platformParameter name
        value:
          type: string
          description: platformParameter value
    recycleBinClusterListItem:
      description: information of kubeblocks cluster in recycle bin
      required:
        - cloudProvider
        - engine
        - environmentName
        - id
        - name
        - state
        - version
        - stoppedAt
      type: object
      properties:
        cloudProvider:
          description: Cloud Provider
          type: string
        cloudRegion:
          description: Cloud Provider
          type: string
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        displayName:
          description: Display name of cluster.
          type: string
        engine:
          description: Cluster Application Engine
          type: string
        mode:
          description: Cluster topology mode
          type: string
        environmentName:
          description: Environment Name
          type: string
        id:
          description: Cluster Recycle Bin ID
          type: string
        clusterId:
          description: Cluster ID
          type: string
        name:
          description: Name of cluster. Name must be unique within an Org
          type: string
        version:
          description: Cluster Application Version
          type: string
        classCode:
          description: Cluster main component classCode
          type: string
        storage:
          description: Cluster main component storage
          type: string
        orgName:
          description: Name of the Org
          type: string
        state:
          description: state represents whether the cluster has been deleted by a stop opsRequest,  and therefore, whether it is in the recycle bin. It is differnt from the Status.Phase of the cluster in k8s.
          type: string
        stoppedAt:
          title: StoppedAt
          type: string
          description: 'StoppedAt is a timestamp representing the server time when this object was stopped and moved to the recycle bin. '
          format: date-time
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created.
          format: date-time
        expiredAt:
          title: ExpiredAt
          type: string
          description: ExpiredAt is a timestamp representing the server time when this object will be expired, and deleted automatically.
          format: date-time
    recycleBinClusterList:
      description: recycleBinClusterList is a list of KubeBlocks clusters in the recycle bin
      properties:
        items:
          description: Items is the KubeBlocks cluster objects in the recycleBinClusterList
          items:
            $ref: '#/components/schemas/recycleBinClusterListItem'
          type: array
      required:
        - items
      type: object
    recycleBinCluster:
      required:
        - engine
        - environmentName
        - name
      type: object
      properties:
        id:
          title: ID
          type: string
          description: Cluster Recycle Bin ID
        clusterId:
          title: Cluster ID
          type: string
          description: Cluster ID
        orgName:
          title: Org Name
          type: string
          description: Org Name
        cloudProvider:
          title: Cloud Provider
          type: string
          description: Cloud Provider
        environmentId:
          title: Environment ID
          type: string
          description: ID of the environment
        environmentName:
          title: Environment Name
          type: string
          description: Environment Name
        environmentType:
          title: Environment Type
          type: string
          description: Environment Types
        cloudRegion:
          title: Cloud Region
          type: string
          description: Cloud Region
        namespace:
          title: Environment Namespace
          type: string
          default: kubeblocks-cloud-ns
          description: Environment Namespace
        name:
          title: Name
          type: string
          description: Name of cluster. Name must be unique within an Org
        hash:
          title: Hash
          type: string
          description: Hash of cluster. Name must be unique within an Org
        engine:
          title: Engine
          type: string
          description: Cluster Application Engine
        values:
          type: object
          additionalProperties: true
          description: Values
        version:
          title: Version
          type: string
          description: Cluster Application Version
        replicas:
          title: Replicas
          type: integer
          description: The number of replicas, for standalone mode, the replicas is 1, for raftGroup mode, the default replicas is 3.
        cpu:
          title: CPU
          type: number
          description: CPU cores.
          format: double
        memory:
          title: Memory(Gi)
          type: number
          description: Memory, the unit is Gi.
          format: double
        storage:
          title: Storage(Gi)
          minimum: 1
          type: number
          description: Storage size, the unit is Gi.
          format: double
        status:
          title: Status
          type: string
          description: status represents the actual status of the cluster in k8s,  it is different from the state of the cluster in recycle bin,  which means whether the cluster has been deleted by a stop opsRequest.
        state:
          title: state
          type: string
          description: state represents whether the cluster has been deleted by a stop opsRequest,  and therefore, whether it is in the recycle bin. It is differnt from the Status of the cluster undeleted.
        mode:
          title: Mode
          type: string
          description: Cluster topology mode
        components:
          $ref: '#/components/schemas/components'
        singleZone:
          title: Single availability zones
          description: Use single availability zones
          type: boolean
          default: false
        availabilityZones:
          title: Availability Zones
          description: Availability Zones
          items:
            type: string
          type: array
        backup:
          description: Set cluster backup
          $ref: '#/components/schemas/clusterBackup'
        stoppedAt:
          title: StoppedAt
          type: string
          description: 'StoppedAt is a timestamp representing the server time when this object was stopped and moved to the recycle bin. '
          format: date-time
        createdAt:
          title: CreatedAt
          type: string
          description: CreatedAt is a timestamp representing the server time when this object was created.
          format: date-time
        expiredAt:
          title: ExpiredAt
          type: string
          description: ExpiredAt is a timestamp representing the server time when this object will be expired, and deleted automatically.
          format: date-time
      description: KubeBlocks cluster(in recycle bin) information
    taskList:
      type: object
      required:
        - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/task'
    cluster_opsStatus:
      enum:
        - Pending
        - Creating
        - Running
        - Cancelling
        - Succeed
        - Cancelled
        - Failed
        - Aborted
      type: string
    opsType:
      enum:
        - VerticalScaling
        - HorizontalScaling
        - VolumeExpansion
        - Upgrade
        - Reconfiguring
        - Switchover
        - Restart
        - Stop
        - Start
        - Expose
        - Backup
        - Restore
        - RebuildInstance
        - Custom
      type: string
    clusterTaskList:
      description: TaskList is a list of operation task objects
      properties:
        items:
          description: Items is the list of operation task objects in the list
          items:
            $ref: '#/components/schemas/clusterTask'
          type: array
      type: object
    availableClusterList:
      type: array
      items:
        type: object
        properties:
          id:
            type: string
            description: ID of the cluster
          name:
            type: string
            description: Name of the cluster
          displayName:
            type: string
            description: Display name of the cluster
          clusterType:
            type: string
    relatedClusterListItem:
      type: object
      x-nullable: true
      description: the simplified cluster info for relation
      required:
        - id
        - name
        - clusterDefinition
        - version
        - mode
        - status
        - environmentName
        - resource
        - storage
        - createdAt
      properties:
        id:
          type: string
          description: ID of the cluster
        name:
          type: string
          description: Name of the cluster
        clusterDefinition:
          type: string
          description: Type of the cluster
        version:
          type: string
        mode:
          type: string
        status:
          type: string
        environmentName:
          type: string
          description: Name of the environment
        resource:
          type: string
          description: Resource of the cluster
        storage:
          type: string
        createdAt:
          type: string
          format: date-time
          description: Time when the cluster was created
    relatedClusterList:
      type: array
      items:
        $ref: '#/components/schemas/relatedClusterListItem'
    environmentModuleInfo:
      type: object
      description: Environment module information in an environment
      properties:
        environmentId:
          type: string
          description: Environment ID
        lastUpdated:
          type: string
          format: date-time
          description: Last update time of the data
        environmentModules:
          type: array
          items:
            $ref: '#/components/schemas/environmentModule'
    environmentModuleAction:
      type: string
      description: |
        Action to perform on the environment module:
        - Enable: Enable the module
        - Disable: Disable the module 
        - Upgrade: Upgrade the module to specified version
      enum:
        - Enable
        - Disable
        - Upgrade
    environmentModuleUpdate:
      type: object
      description: Update information for an environment module
      properties:
        name:
          type: string
          description: Name of the environment module to update
        action:
          $ref: '#/components/schemas/environmentModuleAction'
        version:
          type: string
          description: Version of the environment module to upgrade to
      required:
        - name
        - action
    podResources:
      type: object
      description: Resource usage information for a pod
      properties:
        cpu:
          type: string
          description: CPU usage
        memory:
          type: string
          description: Memory usage
        storage:
          type: string
          description: Storage usage
    podOwnerReference:
      type: object
      description: Reference to pod owner
      properties:
        kind:
          type: string
          description: Owner type
        name:
          type: string
          description: Owner name
        uid:
          type: string
          description: Owner UID
        apiVersion:
          type: string
          description: Owner API version
        controller:
          type: boolean
          description: Whether it is a controller
    containerInfo:
      type: object
      description: Container information
      properties:
        name:
          type: string
          description: Container name
        image:
          type: string
          description: Container image
        ready:
          type: boolean
          description: Container ready status
        restartCount:
          type: integer
          description: Container restart count
        livenessProbe:
          type: object
          description: Liveness probe configuration
        readinessProbe:
          type: object
          description: Readiness probe configuration
        resources:
          type: object
          description: Container resource usage
    podCondition:
      type: object
      description: Pod condition information
      properties:
        type:
          type: string
          description: Condition type
        status:
          type: string
          description: Condition status
        lastTransitionTime:
          type: string
          format: date-time
          description: Last transition time
        reason:
          type: string
          description: Condition reason
        message:
          type: string
          description: Condition message
    pod:
      type: object
      description: Single pod information for environment module
      properties:
        name:
          type: string
          description: Pod name
        namespace:
          type: string
          description: Pod namespace
        nodeName:
          type: string
          description: Node name where pod is running
        status:
          type: string
          description: Pod status
        phase:
          type: string
          description: Pod phase
        ip:
          type: string
          description: Pod IP address
        creationTimestamp:
          type: string
          format: date-time
          description: Pod creation time
        resources:
          $ref: '#/components/schemas/podResources'
        ownerReferences:
          type: array
          items:
            $ref: '#/components/schemas/podOwnerReference'
        containers:
          type: array
          items:
            $ref: '#/components/schemas/containerInfo'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/podCondition'
    environmentModuleDetails:
      type: object
      description: Detailed information about a specific environment module, including its configuration, status and associated pods
      properties:
        environmentName:
          type: string
          description: Name of the environment where the module is deployed
        moduleInfo:
          $ref: '#/components/schemas/environmentModule'
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of when the module information was last updated
        modulePods:
          type: array
          items:
            $ref: '#/components/schemas/pod'
          description: List of pods that belong to this environment module
    logEntry:
      type: object
      description: Single log entry
      properties:
        message:
          type: string
          description: Log message
    environmentModuleLogs:
      type: object
      description: Environment module pod logs
      properties:
        environmentId:
          type: string
          description: Environment ID
        moduleName:
          type: string
          description: Environment module name
        podName:
          type: string
          description: Pod name
        containerName:
          type: string
          description: Container name
        logs:
          type: array
          items:
            $ref: '#/components/schemas/logEntry'
        nextTimestamp:
          type: string
          format: date-time
          description: Next timestamp for pagination
    Broker:
      x-go-name: KafkaBroker
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        host:
          type: string
        port:
          type: integer
          x-omitempty: false
        leaderPartitions:
          type: array
          items:
            type: integer
        followerPartitions:
          type: array
          items:
            type: integer
    BrokerList:
      x-go-name: KafkaBrokerList
      type: array
      items:
        $ref: '#/components/schemas/Broker'
        nullable: true
    ConfigEntry:
      x-go-name: KafkaConfigEntry
      type: object
      properties:
        name:
          type: string
          x-omitempty: false
        value:
          type: string
          x-omitempty: false
        isDefault:
          type: boolean
          description: Whether the configuration is the default value
          x-omitempty: false
        readOnly:
          type: boolean
          x-omitempty: false
        sensitive:
          type: boolean
          description: Whether the configuration is sensitive
          x-omitempty: false
        description:
          type: string
          description: Configuration description
          x-omitempty: false
        validValues:
          type: array
          items:
            type: string
          description: Valid values for the configuration
          x-omitempty: true
        type:
          type: string
          description: Configuration type
          x-omitempty: true
    ConfigList:
      x-go-name: KafkaConfigList
      type: array
      items:
        $ref: '#/components/schemas/ConfigEntry'
        nullable: true
    UpdateBrokerConfigRequest:
      x-go-name: KafkaBrokerConfigUpdate
      type: object
      properties:
        configs:
          type: object
          additionalProperties:
            type: string
    Topic:
      x-go-name: KafkaTopic
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-omitempty: false
        partitionsCount:
          type: integer
          format: int32
          x-omitempty: false
        consumerGroupsCount:
          type: integer
          format: int32
          x-omitempty: false
        replicaCount:
          type: integer
          format: int32
          x-omitempty: false
        TotalLogSize:
          type: integer
          format: int64
          x-omitempty: false
        internal:
          type: boolean
          description: show if the topic is internal topic
          x-omitempty: false
    TopicsList:
      x-go-name: KafkaTopicsList
      type: array
      items:
        $ref: '#/components/schemas/Topic'
        nullable: true
    CreateTopicRequest:
      x-go-name: KafkaTopicCreation
      type: object
      properties:
        name:
          type: string
        partitions:
          type: integer
          format: int32
          minimum: 1
        replicationFactor:
          type: integer
          format: int32
          minimum: 1
      required:
        - name
        - partitions
        - replicationFactor
    PartitionInfo:
      x-go-name: KafkaPartitionInfo
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        beginningOffset:
          type: integer
          format: int64
          x-omitempty: false
        endOffset:
          type: integer
          format: int64
          x-omitempty: false
    TopicDetails:
      x-go-name: KafkaTopicDetails
      type: object
      required:
        - name
      properties:
        name:
          type: string
          x-omitempty: false
        internal:
          type: boolean
          x-omitempty: false
        replicaCount:
          type: integer
          format: int32
          x-omitempty: false
          description: the replica count of the topic
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/PartitionInfo'
            nullable: true
        totalLogSize:
          type: integer
          format: int64
          x-omitempty: false
    TopicBrokerList:
      x-go-name: KafkaTopicBrokerList
      type: array
      items:
        $ref: '#/components/schemas/Broker'
        nullable: true
    brokerNode:
      x-go-name: kafkaNode
      type: object
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        host:
          type: string
          x-omitempty: false
        port:
          type: integer
          format: int32
          x-omitempty: false
        logSize:
          type: integer
          format: int64
          x-omitempty: false
    Partition:
      x-go-name: KafkaPartition
      type: object
      required:
        - id
        - leader
      properties:
        id:
          type: integer
          format: int32
          x-omitempty: false
        leader:
          $ref: '#/components/schemas/brokerNode'
        replicas:
          type: array
          items:
            $ref: '#/components/schemas/brokerNode'
        isr:
          type: array
          items:
            $ref: '#/components/schemas/brokerNode'
          description: In-Sync Replicas
        beginningOffset:
          type: integer
          format: int64
          x-omitempty: false
        endOffset:
          type: integer
          format: int64
          x-omitempty: false
    PartitionList:
      x-go-name: KafkaPartitionList
      type: array
      items:
        $ref: '#/components/schemas/Partition'
        nullable: true
    ExpandPartitionRequest:
      type: object
      required:
        - newPartitions
      properties:
        newPartitions:
          type: integer
          format: int32
    UpdateTopicConfigRequest:
      type: object
      properties:
        configs:
          type: object
          additionalProperties:
            type: string
    ConsumerGroup:
      x-go-name: KafkaConsumerGroup
      x-nullable: true
      type: object
      properties:
        groupId:
          type: string
          x-omitempty: false
        state:
          type: string
          x-omitempty: false
        lag:
          type: integer
          format: int64
          x-omitempty: false
        topics:
          type: array
          items:
            type: string
          x-omitempty: false
    ConsumerGroupList:
      x-go-name: KafkaConsumerGroupList
      type: array
      items:
        $ref: '#/components/schemas/ConsumerGroup'
        nullable: true
    TopicOffset:
      type: object
      x-nullable: true
      properties:
        topic:
          type: string
          description: 主题名称
        partition:
          type: integer
          format: int32
          description: 分区号
          x-omitempty: false
        consumerOffset:
          type: integer
          format: int64
          nullable: true
          description: 消费者组当前消费位置
        beginningOffset:
          type: integer
          format: int64
          nullable: true
          description: 分区最早消息的偏移量
        endOffset:
          type: integer
          format: int64
          nullable: true
          description: 分区最新消息的下一个偏移量
        groupId:
          type: string
          description: 消费者组ID
          x-omitempty: false
    TopicOffsetList:
      x-go-name: KafkaTopicOffsetList
      type: array
      items:
        $ref: '#/components/schemas/TopicOffset'
        nullable: true
    OffsetResetStrategy:
      type: string
      enum:
        - EARLIEST
        - LATEST
        - TIMESTAMP
        - ABSOLUTE
    ResetOffsetRequest:
      type: object
      properties:
        partition:
          type: integer
          format: int32
          description: the partition to reset
          x-omitempty: false
        seek:
          $ref: '#/components/schemas/OffsetResetStrategy'
          description: the seek strategy
          x-nullable: true
          x-omitempty: false
        offset:
          type: integer
          format: int64
          description: the offset to reset to
          x-omitempty: false
    TopicMessage:
      x-go-name: KafkaTopicMessage
      type: object
      properties:
        topic:
          type: string
          description: 消息所属的主题
          x-omitempty: false
        partition:
          type: integer
          format: int32
          description: 消息所在的分区号
          x-omitempty: false
        offset:
          type: integer
          format: int64
          description: 消息在分区中的偏移量
          x-omitempty: false
        timestamp:
          type: integer
          format: int64
          description: 消息的时间戳
          x-omitempty: false
        key:
          type: string
          description: 消息的key
          x-omitempty: false
        value:
          type: string
          description: 消息的内容
          x-omitempty: false
    TopicMessageList:
      x-go-name: KafkaTopicMessageList
      type: array
      items:
        $ref: '#/components/schemas/TopicMessage'
        nullable: true
    TopicMessageRequest:
      type: object
      x-go-name: KafkaTopicMessageRequest
      properties:
        partition:
          type: integer
          format: int32
          description: 指定消息将被发送到的Kafka分区
          example: 0
          x-omitempty: false
        key:
          type: string
          description: 消息的键（可选）
          x-omitempty: false
        value:
          type: string
          description: 消息的实际内容
          x-omitempty: false
    ConsumerGroupDescribe:
      x-go-name: KafkaConsumerGroupDescribe
      x-nullable: true
      type: object
      properties:
        groupId:
          type: string
          description: Consumer group ID
          x-omitempty: false
        topic:
          type: string
          description: Topic name
          x-omitempty: false
        partition:
          type: integer
          description: Partition number
          format: int32
          x-omitempty: false
        currentOffset:
          type: integer
          format: int64
          description: Current offset position of the consumer group
          x-omitempty: false
        logBeginningOffset:
          type: integer
          format: int64
          description: The earliest message offset in this partition
          x-omitempty: false
        logEndOffset:
          type: integer
          format: int64
          description: The next offset after the latest message in this partition
          x-omitempty: false
        lag:
          type: integer
          format: int64
          description: Consumer lag
          x-omitempty: false
        consumerId:
          type: string
          description: Consumer ID, unique identifier automatically generated by Kafka
          x-omitempty: false
        host:
          type: string
          description: Consumer host address
          x-omitempty: false
        clientId:
          type: string
          description: Consumer client ID
          x-omitempty: false
    ConsumerGroupDescribeResponse:
      x-go-name: KafkaConsumerGroupDescribeResponse
      type: array
      items:
        $ref: '#/components/schemas/ConsumerGroupDescribe'
        nullable: true
    redisPrivilegeType:
      description: Redis user privileges
      enum:
        - READWRITE
        - READONLY
        - UNKNOWN
      type: string
    ACLUser:
      x-go-name: RedisACLUser
      type: object
      x-nullable: true
      properties:
        role:
          $ref: '#/components/schemas/accountListRoleType'
        privileges:
          $ref: '#/components/schemas/redisPrivilegeType'
        name:
          type: string
          description: ACL user name
        enabled:
          type: boolean
          description: Whether the user is enabled
          x-omitempty: false
        nopass:
          type: boolean
          description: Whether the user requires no password
          x-omitempty: false
        passwords:
          type: array
          items:
            type: string
          description: List of plain text passwords
        password_hashes:
          type: array
          items:
            type: string
          description: List of hashed passwords
        passwords_to_remove:
          type: array
          items:
            type: string
          description: List of passwords to be removed
        password_hashes_to_remove:
          type: array
          items:
            type: string
          description: List of password hashes to be removed
      required:
        - name
        - role
    ACLUserResponse:
      x-go-name: RedisACLUserResponse
      type: object
      properties:
        mode:
          type: string
        master:
          x-omitempty: true
          type: array
          items:
            $ref: '#/components/schemas/ACLUser'
            nullable: true
        sentinel:
          x-omitempty: true
          type: array
          items:
            $ref: '#/components/schemas/ACLUser'
            nullable: true
    RedisInsight:
      type: object
      properties:
        host:
          type: string
          description: redis insight host
    RedisInsightNetMode:
      type: string
      enum:
        - PRIVATE
        - PUBLIC
    RedisInsightSvcType:
      type: string
      enum:
        - ClusterIP
        - LoadBalancer
        - NodePort
    RedisInsightEnableOpt:
      type: object
      required:
        - networkMode
        - serviceType
      properties:
        networkMode:
          $ref: '#/components/schemas/RedisInsightNetMode'
          description: network mode of redis insight
        serviceType:
          $ref: '#/components/schemas/RedisInsightSvcType'
          description: service type of redis insight
    DocumentList:
      x-go-name: MongoDocumentList
      type: object
      properties:
        documents:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        total:
          type: integer
          x-omitempty: false
    environmentModuleList:
      type: array
      items:
        $ref: '#/components/schemas/environmentModule'
    analysisResult:
      properties:
        explanation:
          type: string
        error:
          type: string
      type: object
    ClusterExecutionLog:
      type: object
      description: Log entry for cluster execution
      properties:
        timestamp:
          type: integer
          format: int64
          description: Timestamp of the execution
        client:
          type: string
          description: Client identifier
        dbName:
          type: string
          description: Database name
        user:
          type: string
          description: User who executed the command
        executionTime:
          type: number
          description: Time taken for execution
          format: double
        command:
          type: string
          description: Command that was executed
        extra:
          type: object
          description: Additional information
          additionalProperties: true
      required:
        - timestamp
        - client
        - dbName
        - user
        - executionTime
        - command
        - extra
  responses:
    '204':
      description: No Content
    '400':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Bad Request
    '401':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Unauthorized
    '403':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Forbidden
    '404':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Not Found
    '409':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Conflict
    '429':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Too many requests
    '500':
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIErrorResponse'
      description: Internal server error
  parameters:
    startTime:
      name: start
      in: query
      description: The start of the time range for the query, unit is seconds.
      schema:
        type: integer
        format: int64
      required: true
      example: 1708848695
    endTime:
      name: end
      in: query
      description: The end of the time range for the query, unit is seconds.
      schema:
        type: integer
        format: int64
      required: true
      example: 1711354295
    orderBy:
      name: orderBy
      in: query
      description: |
        A generic orderBy construct used to specify which field to sort by in the interface. (e.g., startTime or endTime).  The validity of this field is verified by the apiserver,  and it is not required in the YAML.
      required: false
      schema:
        type: string
    sortDesc:
      name: sortDesc
      in: query
      description: Specifies the sorting direction. `true` for descending, `false` for ascending.
      type: boolean
      required: false
      default: true
x-tagGroup:
  - name: User
    tags:
      - user
  - name: Metrics
    tags:
      - metrics
  - name: Organization
    tags:
      - organization
      - member
      - role
      - invitation
  - name: Project
    tags:
      - project
  - name: environment
    tags:
      - environment
      - vipPool
      - resourceStats
  - name: cluster
    tags:
      - cluster
      - clusterLog
      - instance
      - clusterlog
      - account
      - database
      - opsrequest
      - parameter
      - tag
      - metrics
      - service
      - tls
      - database
      - recycleBinCluster
      - relation
      - clusterTask
  - name: License
    tags:
      - license
  - name: MonitorDataSink
    tags:
      - monitorDataSink
  - name: Feature
    tags:
      - feature
  - name: PlatformParameter
    tags:
      - platformParameter
  - name: task
    tags:
      - task
  - name: engine
    tags:
      - engine
