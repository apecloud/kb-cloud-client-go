// Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
// This product includes software developed at ApeCloud (https://www.apecloud.com/).
// Copyright 2022-Present ApeCloud Co., Ltd

package admin

import "github.com/apecloud/kb-cloud-client-go/api/common"

type ConsumerGroupDescribe struct {
	// Consumer group ID
	GroupId *string `json:"groupId,omitempty"`
	// Topic name
	Topic *string `json:"topic,omitempty"`
	// Partition number
	Partition *int32 `json:"partition,omitempty"`
	// Current offset position of the consumer group
	CurrentOffset *int64 `json:"currentOffset,omitempty"`
	// The earliest message offset in this partition
	LogBeginningOffset *int64 `json:"logBeginningOffset,omitempty"`
	// The next offset after the latest message in this partition
	LogEndOffset *int64 `json:"logEndOffset,omitempty"`
	// Consumer lag
	Lag *int64 `json:"lag,omitempty"`
	// Consumer ID, unique identifier automatically generated by Kafka
	ConsumerId *string `json:"consumerId,omitempty"`
	// Consumer host address
	Host *string `json:"host,omitempty"`
	// Consumer client ID
	ClientId *string `json:"clientId,omitempty"`
	// UnparsedObject contains the raw value of the object if there was an error when deserializing into the struct
	UnparsedObject       map[string]interface{} `json:"-"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NewConsumerGroupDescribe instantiates a new ConsumerGroupDescribe object.
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func NewConsumerGroupDescribe() *ConsumerGroupDescribe {
	this := ConsumerGroupDescribe{}
	return &this
}

// NewConsumerGroupDescribeWithDefaults instantiates a new ConsumerGroupDescribe object.
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set.
func NewConsumerGroupDescribeWithDefaults() *ConsumerGroupDescribe {
	this := ConsumerGroupDescribe{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasGroupId() bool {
	return o != nil && o.GroupId != nil
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ConsumerGroupDescribe) SetGroupId(v string) {
	o.GroupId = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetTopic() string {
	if o == nil || o.Topic == nil {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetTopicOk() (*string, bool) {
	if o == nil || o.Topic == nil {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasTopic() bool {
	return o != nil && o.Topic != nil
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ConsumerGroupDescribe) SetTopic(v string) {
	o.Topic = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetPartition() int32 {
	if o == nil || o.Partition == nil {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetPartitionOk() (*int32, bool) {
	if o == nil || o.Partition == nil {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasPartition() bool {
	return o != nil && o.Partition != nil
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *ConsumerGroupDescribe) SetPartition(v int32) {
	o.Partition = &v
}

// GetCurrentOffset returns the CurrentOffset field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetCurrentOffset() int64 {
	if o == nil || o.CurrentOffset == nil {
		var ret int64
		return ret
	}
	return *o.CurrentOffset
}

// GetCurrentOffsetOk returns a tuple with the CurrentOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetCurrentOffsetOk() (*int64, bool) {
	if o == nil || o.CurrentOffset == nil {
		return nil, false
	}
	return o.CurrentOffset, true
}

// HasCurrentOffset returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasCurrentOffset() bool {
	return o != nil && o.CurrentOffset != nil
}

// SetCurrentOffset gets a reference to the given int64 and assigns it to the CurrentOffset field.
func (o *ConsumerGroupDescribe) SetCurrentOffset(v int64) {
	o.CurrentOffset = &v
}

// GetLogBeginningOffset returns the LogBeginningOffset field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetLogBeginningOffset() int64 {
	if o == nil || o.LogBeginningOffset == nil {
		var ret int64
		return ret
	}
	return *o.LogBeginningOffset
}

// GetLogBeginningOffsetOk returns a tuple with the LogBeginningOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetLogBeginningOffsetOk() (*int64, bool) {
	if o == nil || o.LogBeginningOffset == nil {
		return nil, false
	}
	return o.LogBeginningOffset, true
}

// HasLogBeginningOffset returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasLogBeginningOffset() bool {
	return o != nil && o.LogBeginningOffset != nil
}

// SetLogBeginningOffset gets a reference to the given int64 and assigns it to the LogBeginningOffset field.
func (o *ConsumerGroupDescribe) SetLogBeginningOffset(v int64) {
	o.LogBeginningOffset = &v
}

// GetLogEndOffset returns the LogEndOffset field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetLogEndOffset() int64 {
	if o == nil || o.LogEndOffset == nil {
		var ret int64
		return ret
	}
	return *o.LogEndOffset
}

// GetLogEndOffsetOk returns a tuple with the LogEndOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetLogEndOffsetOk() (*int64, bool) {
	if o == nil || o.LogEndOffset == nil {
		return nil, false
	}
	return o.LogEndOffset, true
}

// HasLogEndOffset returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasLogEndOffset() bool {
	return o != nil && o.LogEndOffset != nil
}

// SetLogEndOffset gets a reference to the given int64 and assigns it to the LogEndOffset field.
func (o *ConsumerGroupDescribe) SetLogEndOffset(v int64) {
	o.LogEndOffset = &v
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetLag() int64 {
	if o == nil || o.Lag == nil {
		var ret int64
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetLagOk() (*int64, bool) {
	if o == nil || o.Lag == nil {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasLag() bool {
	return o != nil && o.Lag != nil
}

// SetLag gets a reference to the given int64 and assigns it to the Lag field.
func (o *ConsumerGroupDescribe) SetLag(v int64) {
	o.Lag = &v
}

// GetConsumerId returns the ConsumerId field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetConsumerId() string {
	if o == nil || o.ConsumerId == nil {
		var ret string
		return ret
	}
	return *o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetConsumerIdOk() (*string, bool) {
	if o == nil || o.ConsumerId == nil {
		return nil, false
	}
	return o.ConsumerId, true
}

// HasConsumerId returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasConsumerId() bool {
	return o != nil && o.ConsumerId != nil
}

// SetConsumerId gets a reference to the given string and assigns it to the ConsumerId field.
func (o *ConsumerGroupDescribe) SetConsumerId(v string) {
	o.ConsumerId = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasHost() bool {
	return o != nil && o.Host != nil
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *ConsumerGroupDescribe) SetHost(v string) {
	o.Host = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ConsumerGroupDescribe) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerGroupDescribe) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ConsumerGroupDescribe) HasClientId() bool {
	return o != nil && o.ClientId != nil
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ConsumerGroupDescribe) SetClientId(v string) {
	o.ClientId = &v
}

// MarshalJSON serializes the struct using spec logic.
func (o ConsumerGroupDescribe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnparsedObject != nil {
		return common.Marshal(o.UnparsedObject)
	}
	if o.GroupId != nil {
		toSerialize["groupId"] = o.GroupId
	}
	if o.Topic != nil {
		toSerialize["topic"] = o.Topic
	}
	if o.Partition != nil {
		toSerialize["partition"] = o.Partition
	}
	if o.CurrentOffset != nil {
		toSerialize["currentOffset"] = o.CurrentOffset
	}
	if o.LogBeginningOffset != nil {
		toSerialize["logBeginningOffset"] = o.LogBeginningOffset
	}
	if o.LogEndOffset != nil {
		toSerialize["logEndOffset"] = o.LogEndOffset
	}
	if o.Lag != nil {
		toSerialize["lag"] = o.Lag
	}
	if o.ConsumerId != nil {
		toSerialize["consumerId"] = o.ConsumerId
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}
	return common.Marshal(toSerialize)
}

// UnmarshalJSON deserializes the given payload.
func (o *ConsumerGroupDescribe) UnmarshalJSON(bytes []byte) (err error) {
	all := struct {
		GroupId            *string `json:"groupId,omitempty"`
		Topic              *string `json:"topic,omitempty"`
		Partition          *int32  `json:"partition,omitempty"`
		CurrentOffset      *int64  `json:"currentOffset,omitempty"`
		LogBeginningOffset *int64  `json:"logBeginningOffset,omitempty"`
		LogEndOffset       *int64  `json:"logEndOffset,omitempty"`
		Lag                *int64  `json:"lag,omitempty"`
		ConsumerId         *string `json:"consumerId,omitempty"`
		Host               *string `json:"host,omitempty"`
		ClientId           *string `json:"clientId,omitempty"`
	}{}
	if err = common.Unmarshal(bytes, &all); err != nil {
		return common.Unmarshal(bytes, &o.UnparsedObject)
	}
	additionalProperties := make(map[string]interface{})
	if err = common.Unmarshal(bytes, &additionalProperties); err == nil {
		common.DeleteKeys(additionalProperties, &[]string{"groupId", "topic", "partition", "currentOffset", "logBeginningOffset", "logEndOffset", "lag", "consumerId", "host", "clientId"})
	} else {
		return err
	}
	o.GroupId = all.GroupId
	o.Topic = all.Topic
	o.Partition = all.Partition
	o.CurrentOffset = all.CurrentOffset
	o.LogBeginningOffset = all.LogBeginningOffset
	o.LogEndOffset = all.LogEndOffset
	o.Lag = all.Lag
	o.ConsumerId = all.ConsumerId
	o.Host = all.Host
	o.ClientId = all.ClientId

	if len(additionalProperties) > 0 {
		o.AdditionalProperties = additionalProperties
	}

	return nil
}
